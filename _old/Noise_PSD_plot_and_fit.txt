#pragma TextEncoding = "UTF-8"
#pragma rtGlobals=3		// Use modern global access method and strict wave access.
#include <SQLConstants>
#include <KBColorizeTraces>


//////////////////////////// All Panels ////////////////////////////
//"Switch To" Buttons
// Clear Results

Function SwitchToEval(ba) : ButtonControl
// switch to Panel2
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			DoWindow /F Panel2
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function SwitchToData(ba) : ButtonControl
// switch to Panel0
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			DoWindow /F Panel0
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function Clear_res(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			DoAlert /T="Clear Results" 2,"Are you sure?"
		if(V_flag==1)
			SetDataFolder Saved_Results
			KillWaves /A
			Make/N=0/O sel
			Make/T/N=0/O Data_List
			Make/T/O Data_types={"Drive","Current","Resistance","Exponent","Beta","Exp_Lor","Beta_Lor","Ampl_Lor","Tau_Lor","CNR_1pf","CNR_1pf_Lor","CNR_Lor","CNR_Num","TCNR","Int_Noise_1pf","Int_Noise_1pf_L","Int_Noise_Lor","Int_Noise_Num","Int_Noise_Tot","Lor2Tot","1pf2Tot","LorTo1pf","Bias_On_Sample","Int_Base_Noise","Filter_Code","","","","UserDef1","UserDef2"}
			Make/T/O Data_types_Layer4={"Serial_Resistance","Gain","Cut_Start","Cut_Stop","df","NumAvg","Integral_Limit_f1","Integral_Limit_f2","Fit_Lorentzian_f0_Min","Fit_Lorentzian_f0_Max","Fit_Range_Log_1","Fit_Range_Log_2","Fit_NumDec","Fit_beta_initial","Fit_f0_initial","","","","","","","","","","","","","","",""}
			Make/T/O Data_types_meta={"Filename","MeasuredFile","BasePSD","UserID","Comment","Date","Version","","",""}
			Make/N=0/O sel_left
			Make/N=0/O sel_
			Make/N=0/O sel
			ListBox ResList listWave=Data_List,selWave=sel
			ListBox PlotLeft listWave=Data_types
			ListBox PlotRight listWave=Data_types
			ListBox PlotBottom listWave=Data_types
			SetDataFolder root:
			SetVariable ivname, value=_STR:""
			
		endif
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


//////////////////////////// Panel0-Data ////////////////////////////////////////////////////////

Window Panel0() : Panel
	PauseUpdate; Silent 1		// building window...
	NewPanel /W=(469,54,1840,918)
	ShowTools/A
	ShowInfo/W=$WinName(0,64)
	SetDrawLayer UserBack
	DrawText 100,100,"Button Clear_win"
	DrawText 100,100,"SetVariable f1\rSetVariable f2"
	DrawText 100,100,"TitleBox title0"
	DrawText 100,100,"TitleBox title2\rSetVariable SetBias"
	SetDrawEnv arrow= 1,arrowlen= 30
	SetDrawEnv save
	SetDrawEnv arrowsharp= 0.3
	DrawLine 61,67,177,31
	SetDrawEnv save
	DrawRect 313,647,842,846
	DrawRect 29,652,276,776
	DrawRect 973,7,1349,148
	DrawRect 872,644,1126,836
	Button Clear_data,pos={1190.00,624.00},size={150.00,50.00},proc=Clear_data,title="Clear All"
	Button Clear_data,fStyle=1,fColor=(65280,0,0)
	Button Load_CH0,pos={990.00,39.00},size={100.00,28.00},proc=Load_CH0,title="Load_CH0"
	Button Load_CH0,fStyle=1,fColor=(65535,43690,0)
	ListBox In_data,pos={977.00,185.00},size={370.00,413.00},proc=ListBoxPSD
	ListBox In_data,listWave=root:In_data_names,selWave=root:data_sel,mode= 8
	ListBox In_data,editStyle= 1,widths={181,176},userColumnResize= 1
	Button Get_Cur3,pos={434.00,685.00},size={50.00,22.00},proc=Get_Cursor_log,title="Cursors"
	SetVariable set_range_log2,pos={321.00,698.00},size={110.00,18.00},title="Range_log2"
	SetVariable set_range_log2,value= range_log2
	SetVariable set_range_log1,pos={321.00,677.00},size={110.00,18.00},title="Range_log1"
	SetVariable set_range_log1,value= range_log1
	Button Do_Fit,pos={687.00,768.00},size={150.00,33.00},proc=Do_Fit,title="Fit"
	Button Do_Fit,fStyle=1
	Slider Graph_select,pos={1164.00,86.00},size={129.00,58.00},proc=Set_Graph
	Slider Graph_select,limits={0,1,1},value= 1,vert= 0
	Slider Graph_select,userTicks={Graph_sel_int,Graph_sel}
	Button Clear_Graph,pos={1240.00,40.00},size={100.00,28.00},proc=Clear_Graph,title="Clear Graph"
	Button Clear_Graph,fStyle=1,fColor=(65280,0,0)
	Button Plot_Sel,pos={1136.00,40.00},size={100.00,28.00},proc=Plot_Sel,title="Plot Selected"
	Button Plot_Sel,fStyle=1
	Button SaveGraph,pos={940.00,652.00},size={110.00,22.00},proc=SavePlotGraph,title="Save Plotted Graph"
	SetVariable f1,pos={319.00,790.00},size={133.00,18.00},title="f1 [Hz]"
	SetVariable f1,limits={0,1e+06,1},value= f1
	SetVariable f2,pos={319.00,813.00},size={133.00,18.00},title="f2 [Hz]"
	SetVariable f2,limits={0,1e+06,1},value= f2
	SetVariable Rser,pos={39.00,744.00},size={230.00,22.00},title="Serial Resistance [Ohm] "
	SetVariable Rser,fSize=14,limits={0,1e+10,1},value= Rserial
	TitleBox title0,pos={1162.00,158.00},size={56.00,23.00},title="Base PSD"
	TitleBox title1,pos={979.00,158.00},size={42.00,23.00},title="In PSD"
	Button Help,pos={1302.00,782.00},size={50.00,25.00},proc=Help,title="Help"
	SetVariable SetBias,pos={41.00,663.00},size={228.00,22.00},proc=SetBias,title="Drive [mV]                     "
	SetVariable SetBias,fSize=14,value= _NUM:50
	SetVariable SetRes,pos={41.00,690.00},size={228.00,22.00},proc=SetRes,title="Resistance [Ohm]         "
	SetVariable SetRes,fSize=14,value= _NUM:31191.1
	CheckBox Lorentzian,pos={497.00,655.00},size={121.00,25.00},proc=FitLorentzian,title="Fit Lorentzian"
	CheckBox Lorentzian,fSize=18,value= 1
	Button Get_Cur4,pos={704.00,710.00},size={60.00,22.00},proc=Get_Cursor_B,title="Cursor B"
	SetVariable set_range_log3,pos={497.00,712.00},size={200.00,18.00},proc=Setf0,title="Lorentzian f0                   "
	SetVariable set_range_log3,value= lorentzian_f
	SetVariable Temperature,pos={39.00,717.00},size={230.00,22.00},title="Temperature [K]            "
	SetVariable Temperature,fSize=14,limits={0,1e+10,1},value= tempK
	CheckBox KeepLast,pos={1232.00,679.00},size={107.00,15.00},proc=KeepLastProc,title="Keep last settings"
	CheckBox KeepLast,value= 1
	TitleBox CNRanalytic,pos={319.00,764.00},size={128.00,23.00},title="CNR Integration Limits"
	SetVariable set_beta_red,pos={497.00,733.00},size={200.00,18.00},title="ß reduct. (ß=ß0*10^(x))"
	SetVariable set_beta_red,limits={-inf,0,1},value= beta_red
	Button SwitchToEval,pos={1233.00,814.00},size={120.00,40.00},proc=SwitchToEval,title="Switch to\rPanel2"
	Button SwitchToEval,fColor=(65535,54611,49151)
	SetVariable SetNumDec,pos={321.00,727.00},size={110.00,18.00},title="NumDec     "
	SetVariable SetNumDec,value= NumDec
	SetVariable setsleep,pos={735.00,612.00},size={120.00,18.00},title="Delay (ms):"
	SetVariable setsleep,value= _NUM:300
	SetVariable Setf0Min,pos={497.00,796.00},size={140.00,18.00},title="f0 min [Hz]"
	SetVariable Setf0Min,value= f0_Min
	SetVariable Setf0Max,pos={497.00,817.00},size={140.00,18.00},title="f0 max [Hz]"
	SetVariable Setf0Max,value= f0_Max
	Button smartfit,pos={687.00,806.00},size={150.00,33.00},proc=SmartFitProc,title="SmartFit"
	Button smartfit,fStyle=1
	Button fullauto,pos={990.00,112.00},size={100.00,28.00},proc=FullAutoProc,title="Full Auto"
	Button fullauto,fStyle=1,fColor=(65535,43690,0)
	TabControl FitTab,pos={300.00,605.00},size={552.00,253.00},fSize=20
	TabControl FitTab,tabLabel(0)="PSD Fit",value= 0
	TabControl ParamTab,pos={17.00,605.00},size={270.00,182.00},fSize=20
	TabControl ParamTab,tabLabel(0)="Parameters",value= 0
	ValDisplay VersionDispl,pos={24.00,829.00},size={50.00,17.00},title="v."
	ValDisplay VersionDispl,fSize=12,fColor=(21845,21845,21845)
	ValDisplay VersionDispl,valueColor=(65535,65535,65535)
	ValDisplay VersionDispl,valueBackColor=(34952,34952,34952)
	ValDisplay VersionDispl,limits={0,0,0},barmisc={0,1000},value= #"versionNumber"
	TitleBox FitLim,pos={320.00,653.00},size={77.00,23.00},title="Fitting Limits"
	TitleBox LorLim,pos={496.00,773.00},size={139.00,23.00},title="Lorentzian f0 Constraints"
	TitleBox InitParam,pos={496.00,690.00},size={87.00,23.00},title="Initial Fit Guess"
	TitleBox Load,pos={989.00,14.00},size={80.00,23.00},title="Loading PSDs"
	TitleBox Load1,pos={1136.00,15.00},size={92.00,23.00},title="Displaying PSDs"
	SetVariable SaveName,pos={891.00,704.00},size={216.00,18.00},title="Save Name"
	SetVariable SaveName,value= _STR:"M2_2p5_220920_ser01_E",styledText= 1
	Button AddToRes,pos={896.00,759.00},size={209.00,33.00},proc=SaveAll,title="Add All To Results and Save"
	Button AddToRes,fStyle=1,fColor=(3,52428,1)
	Button AddToResSel,pos={896.00,797.00},size={209.00,33.00},proc=SaveSelected,title="Add Selected To Results and Save"
	Button AddToResSel,fStyle=1,fColor=(3,52428,1)
	TabControl SaveTab,pos={861.00,605.00},size={282.00,243.00},fSize=20
	TabControl SaveTab,tabLabel(0)="Save Results",value= 0
	SetVariable UserName,pos={891.00,681.00},size={216.00,18.00},title="UserID"
	SetVariable UserName,value= user,styledText= 1
	TitleBox Load2,pos={989.00,86.00},size={99.00,23.00},title="Load + Fit + Save"
	SetVariable Comment,pos={891.00,726.00},size={216.00,18.00},title="Comment"
	SetVariable Comment,value= comment,styledText= 1
	SetVariable FilterDecoder,pos={1027.00,610.00},size={120.00,18.00},proc=FilterDecodeProc,title="FilterDecode()"
	SetVariable FilterDecoder,limits={0,inf,1},value= _NUM:0
	Execute/Q/Z "SetWindow kwTopWin sizeLimit={33,48,inf,inf}" // sizeLimit requires Igor 7 or later
	Display/W=(15,15,960,540)/HOST=# 
	RenameWindow #,G0
	SetActiveSubwindow ##
	Display/W=(15,15,960,540)/HOST=# 
	RenameWindow #,G1
	SetActiveSubwindow ##
EndMacro


Function Load_CH0(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			//Clear Graph
			KillWindow Panel0#G1; Display/HOST=Panel0 /W=(15,15,960,540)
			KillWindow Panel0#G0; Display/HOST=Panel0 /W=(15,15,960,540)

			DoLoadMultipleFiles("CH0")
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End

Function Load_CH1(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			DoLoadMultipleFiles("CH1")
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function Load_Cross(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			DoLoadMultipleFiles("Cross")
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function/S DoLoadMultipleFiles(mode)
	String mode
	Variable refNum
	String message = "Select one or more files"
	String outputPaths
	String fileFilters = "All (*.):.;"
 
	Open/P=home /D /R /MULT=1 /M=message/F=fileFilters refNum
	outputPaths = S_fileName
 
	if (strlen(outputPaths) == 0)
		Print "Cancelled"
	else
		Variable numFilesSelected = ItemsInList(outputPaths, "\r")
		Variable i
		for(i=0; i<numFilesSelected; i+=1)
			String path = StringFromList(i, outputPaths, "\r")
			Printf "%d: %s\r", i, path
			Load_PSD(mode,path)
		endfor
	endif
 
	return outputPaths		// Will be empty if user canceled
End

Function LoadFileList(workingdir,files,mode)
	String mode
	String workingdir
	String files
 
		Variable numFilesSelected = ItemsInList(files, ";")
		Variable i
		for(i=0; i<numFilesSelected; i+=1)
			String path = workingdir + StringFromList(i, files, ";")
			Printf "%d: %s\r", i, path
			Load_PSD(mode,path)
		endfor
 
	//return outputPaths		// Will be empty if user canceled
End

Function FullAuto()
	//Könyvtár kiválasztása
	NewPath/Q/O/M="Select folder with PSD segments" fullauto_userselect_dir
	
	if (V_flag != 0)
		return 0
	endif
	
	String files
	files = indexedFile(fullauto_userselect_dir,-1,"????")
	//files = sortList(files)
	Variable len_files = ItemsInList(files, ";")
	//Make/T/N=(len_files) fullauto_dirfiles
	//fullauto_dirfiles = StringFromList(p, files, ";")
	Variable i = 0
	
	//Itt ki lesznek dobva azok az elemek, amiknek a nevévben nincs _Segm_
	for (i = 0; i < len_files;)
		if (stringmatch(StringFromList(i,files,";"),"*_Segm_*") == 0)
			files = RemoveFromList(StringFromList(i,files,";"),files)
			len_files = len_files - 1
		else
			i = i + 1
		endif
	endfor
	//Make/T/O/N=(len_files) fullauto_dirfiles
	//fullauto_dirfiles = StringFromList(p, files, ";")
	
		
	for (i = 0; i < len_files;)
		String ws = StringFromList(i,files,";")
		Variable cut = strsearch(ws,"_Segm_",0)
		String basename = ws[0,cut-1]
		String clist = ""
		Variable j = 0
		//Ez a rész átrakja a files listából a clist-be az adott IV-hez tartozó elemeket
		for (j = 0; j < len_files;)
			String cf = StringFromList(j,files,";")
			if (strsearch(cf,basename,0) != -1)
				files = RemoveFromList(cf,files)
				clist += cf + ";"
				len_files = len_files - 1
			else
				j = j + 1
			endif
		endfor
		
		
		//Ha csak egy elem van a listában, akkor az úgyis konstans mérés, nincs értelme full autoval kiértékelni
		if (ItemsInList(clist, ";") > 1)
			//LoadFileList(fullauto_userselect_dir)
			PathInfo fullauto_userselect_dir
			
			//sort-olni kell a clistet, hogy sorban legyenek beolvasva a szegmensek
			String sorted = ""
			Variable curr_index = 0
			Variable failsafe = 0
			Variable cb = ItemsInList(clist, ";")
			for (;cb != ItemsInList(sorted, ";") && failsafe < cb+1;failsafe++ )
				for(j = 0; j < ItemsInList(clist, ";");j++)
					String cc = StringFromList(j,clist,";")
					Variable cut2 = strsearch(cc,"_Segm_",0)
					Variable numh = str2num(cc[cut2+6,strlen(cc)-1])
					if (numh == curr_index)
						sorted += cc + ";"
						curr_index++
					endif
				endfor
			endfor
			
			//Ha nem sikerült a sort, akkor ne csinálja
			if (failsafe != cb+1)
				clist = sorted
			endif
			
			LoadFileList(S_path,clist,"CH0")
			
			//Alapzajok megkeresése
			Variable min_l = 1
			Variable min_h = 1
			Variable mini_l = 0 //első nulla indexe
			Variable mini_h = 0 //második nulla indexe
									//vagy fordítva
			
			for(j = 0; j < ItemsInList(clist, ";");j++)
				String wname = StringFromList(j,clist,";") + "_CH0"
				Wave wer = root:$wname
				Variable s = sum(wer)
				
				if (s < min_h)
					min_h = s
					mini_h = j
				endif
				if (min_h < min_l)
					Variable tmp = min_l
					min_l = min_h
					min_h = tmp
					
					tmp = mini_l
					mini_l = mini_h
					mini_h = tmp
				endif
			endfor
			
			//PSD-k lefitelése
			//Azért nem jelölöm ki egyszerre az összeset, mert a jövőben valószínűleg jobban meg akarjuk majd válogatni a spektrumokat, és így könnyebb lesz
			
			//String zeroname = StringFromList(mini_l,clist,";") + "_CH0"
			//Wave zero = root:$zeroname
			Wave data_sel = root:data_sel
			//data_sel[mini_l][1] = 1
			
			for (j = 0; j < ItemsInList(clist, ";");j++)
				if(j == mini_l || j == mini_h)
					continue
				endif
				
				data_sel[mini_l][1] = 1
				data_sel[j][0] = 1
				
				initSmartFit()
				
				data_sel[j][0] = 0
				
			endfor
			
			for (j = 0; j < ItemsInList(clist, ";");j++)
				if(j == mini_l || j == mini_h)
					data_sel[j][0] = 0
					data_sel[j][1] = 0
				endif	
				data_sel[j][0] = 1
				data_sel[j][1] = 0
			endfor
			
			Save_Parameters2(basename)
			Clear_All()
			
			//break; //deleteme
		endif
		
	endfor
	DoWindow /F Panel2
End


Function initSmartFit()
	String in_psd
	String base_psd
	Wave data_sel=root:data_sel
	Wave /T In_data_names=root:In_data_names
	NVar ind=root:Temp_Results:ind
	
	Wave data = root:Temp_Results:data
	
	Variable i=0
	Nvar f1=root:f1
	Nvar f2=root:f2
	Nvar Rserial=root:Rserial
	Nvar tempK=root:tempK
	
	ControlInfo /W=Panel0 fitRes
				//if(sum(data_sel)>2)
				///DoAlert /T="Selection alert" 0,"Select ONLY 2 waves! "
				if (sum(data_sel)<2)
				DoAlert /T="Selection alert" 0, "Select at least 2 waves!"
				//elseif(sum(data_sel)==2)
		elseif(f1==0)
			DoAlert /T="Frequency Alert" 0,"Set f1!"
		elseif(f2==0)
			DoAlert /T="Frequency Alert" 0,"Set f2!"
		elseif(Rserial==0)
			DoAlert /T="Serial resistance Alert" 0,"Set Serial resistance!"
		elseif(tempK==0)
			DoAlert /T="Temperature Alert" 0,"Set Temperature!"
		else		
			for (i=0;i<Dimsize(data_sel,0); i=i+1)
				if (data_sel[i][1]==1)
					base_psd=In_data_names[i][1]
				endif
			endfor
		
			for (i=0;i<Dimsize(data_sel,0); i=i+1)
				if (data_sel[i][0]==1)
					in_psd=In_data_names[i][0]
					if(data[i][0][0]==0)
						DoAlert /T="Bias Alert" 0,"Set bias!"
					elseif(data[i][2][0]==0 && V_value==0)
						DoAlert /T="Sample resistance Alert" 0,"Set Sample resistance or Switch ON thermal fit!"
					else
						//if(f1==0)
						//DoAlert /T="Frequency Alert" 0,"Set f1!"
						//elseif(f2==0)
						//DoAlert /T="Frequency Alert" 0,"Set f2!"
						//elseif(Rserial==0)
						//DoAlert /T="Serial resistance Alert" 0,"Set Serial resistance!"
						//elseif(data[i][2][0]==0 && V_value==0)
						//DoAlert /T="Sample resistance Alert" 0,"Set Sample resistance or Swithc ON thermal fit!"
						//else		
								
						SmartFit($in_psd,$base_psd,i)
						SetVariable SetBias value= _NUM:data[i][0][0]
						SetVariable SetRes value= _NUM:data[i][2][0]
						//endif
					endif
					
					// display Graph1 log-log 
					SetWindow Panel0#G0 hide=1
	
					//Set SliderControl Graph_select to Graph1
					Slider Graph_select value=1
					
					// Delay between plotted fits (also after last)
					ControlInfo setsleep
					Sleep/T V_Value/1000*60
					//setsleep has to be at least around 300 ms for SmartFit showing individual plots
					
				endif
			endfor
		endif
End


Function Load_PSD(mode, path)
	String mode
	String path
	String wave_name	
	Wave /T in_data_names=root:In_data_names
	Variable data_ind=DimSize(in_data_names,0)-1
	Wave data_sel=root:data_sel
	
	Wave data = root:Temp_Results:data
	Wave/T files = root:Temp_Results:files
	
	//Adjust results matrix size
	Redimension/N=(data_ind+1,30,5) data
	Redimension/N=(data_ind+1,30) files
	
	//Adjust size of other waves needed later
	Redimension/N=(1,data_ind+1) root:Temp_Results:outp_fit
	Redimension/N=(1,data_ind+1) root:Temp_Results:outp_fit_x
	Redimension/N=(data_ind+1,2) root:Temp_Results:W_sigma_par_1pf
	Redimension/N=(data_ind+1,2) root:Temp_Results:W_sigma_rel_1pf
	Redimension/N=(data_ind+1) root:Temp_Results:W_goodness_1pf
	Redimension/N=(data_ind+1,4) root:Temp_Results:W_sigma_par
	Redimension/N=(data_ind+1,4) root:Temp_Results:W_sigma_rel
	Redimension/N=(data_ind+1) root:Temp_Results:W_sigma_rel_sum
	Redimension/N=(data_ind+1) root:Temp_Results:W_goodness
		
	Variable Rtemp, Vtemp, Itemp
	Variable dftemp, NumAvgtemp, Gaintemp, CutStarttemp, CutStoptemp
	String pathtemp
	Gaintemp = 0
	NVar Rserialtemp=root:Rserial
	Make /T/O header0

	//Load header data
	LoadWave/N=header/D/G/J/O/K=2/V={" "," $",0,0}/L={0,0,2,0,1} path

	//first line
	sscanf header0[0],"%f;%f;%f;%s",Vtemp,Itemp,Rtemp,pathtemp
	data[data_ind][0][0]=Vtemp  //drive
	data[data_ind][1][0]=Itemp  //current
	data[data_ind][2][0]=Rtemp  //resistance
	
	//original path of current signal
	files[data_ind][1] = pathtemp
	
	//second line
	sscanf header0[1],"%f;%f;%f;%f;%f;%f",dftemp,NumAvgtemp,Rserialtemp,Gaintemp,CutStarttemp,CutStoptemp
	data[data_ind][4][4]=dftemp  //df
	data[data_ind][5][4]=NumAvgtemp //NumAvg
	data[data_ind][0][4]=Rserialtemp  //Rserial
	data[data_ind][1][4]=Gaintemp //Gain
	data[data_ind][2][4]=CutStarttemp  //CutStart
	data[data_ind][3][4]=CutStoptemp  //CutStop
	if (Gaintemp == 0)
		//backward compatibility!!! earlier version saved only 3-3 parameters in the first & second line
		sscanf header0[1],"%f;%f;%f",dftemp,NumAvgtemp,Rserialtemp
		data[data_ind][4][4]=dftemp
		data[data_ind][5][4]=NumAvgtemp
		data[data_ind][0][4]=Rserialtemp
		data[data_ind][1][4]=-1
		data[data_ind][2][4]=-1
		data[data_ind][3][4]=-1
		files[data_ind][1]="-1"
	endif
	
	//bias on sample
	data[data_ind][22][0] = data[data_ind][0][0]-data[data_ind][0][4]*data[data_ind][1][0]  //Vbias = Vdrive - Rserial*I
	
	print "df=", dftemp
	print "Serial resistance=", Rserialtemp
	
	//Load PSD data	
	if (StringMatch(mode,"cross"))	
		LoadWave/A/D/G/O/K=0/L={1,2,0,2,1} S_path+S_fileName
		S_waveNames=RemoveEnding(S_waveNames)
		wave_name=(S_fileName+"_Cross")
		rename $S_waveNames $(wave_name)
		SetScale/P x 0,dftemp,"", $(wave_name)
	elseif (StringMatch(mode,"CH0"))
		LoadWave/A/D/G/O/K=0/L={1,2,0,0,1} S_path+S_fileName
		S_waveNames=RemoveEnding(S_waveNames)
		wave_name=(S_fileName+"_CH0")
		rename $S_waveNames $(wave_name)
		SetScale/P x 0,dftemp,"", $(wave_name)
	elseif (StringMatch(mode,"CH1"))
		//LoadWave/D/G/J/O/K=0/V={" "," $",0,0}/L={1,2,0,1,1} S_path+S_fileName
		LoadWave/A/D/G/O/K=0/L={1,2,0,1,1} S_path+S_fileName
		S_waveNames=RemoveEnding(S_waveNames)
		wave_name=(S_fileName+"_CH1")
		print wave_name
		rename $S_waveNames $(wave_name)
		SetScale/P x 0,dftemp,"", $(wave_name)
	endif
	
	//filename
	in_data_names[DimSize(in_data_names,0)-1][]=wave_name
	files[data_ind][0] = wave_name
	
	//Add the additional blank space
	Redimension/N=(DimSize(in_data_names,0)+1,-1) in_data_names
	Redimension/N=(DimSize(in_data_names,0),-1) data_sel

	//Display
	AppendToGraph /W=Panel0#G0 $wave_name
	ModifyGraph  /W=Panel0#G0 tick=2,mirror=1,fSize=24,axThick=3
	ModifyGraph /W=Panel0#G0 log=1
	Label  /W=Panel0#G0 bottom "f [Hz]"
	Label  /W=Panel0#G0 left "sqrt(PSD) [V/sqrt(Hz)]"

End


Function Set_Graph(sa) : SliderControl
	STRUCT WMSliderAction &sa

	switch( sa.eventCode )
		case -1: // control being killed
			break
		default:
			if( sa.eventCode & 1 ) // value set
				Variable curval = sa.curval
				if(curval==0)
					SetWindow Panel0#G0 hide=0
					SetWindow Panel0#G1 hide=1
				elseif(curval==1)
					SetWindow Panel0#G0 hide=1
					SetWindow Panel0#G1 hide=0
				endif
			endif
			break
	endswitch

	return 0
End


Function Plot_Sel(ba) : ButtonControl
	STRUCT WMButtonAction &ba
			Wave data_sel=root:data_sel
		Wave /T In_data_names=root:In_data_names
		Variable i=0
	switch( ba.eventCode )
		case 2: // mouse up
	for (i=0;i<Dimsize(data_sel,0); i=i+1)
		if (data_sel[i][0]==1)
			AppendToGraph /W=Panel0#G0 $(In_data_names[i][0])
		endif
	endfor
	
	for (i=0;i<Dimsize(data_sel,0); i=i+1)
		if (data_sel[i][1]==1)
			AppendToGraph /W=Panel0#G0 $(In_data_names[i][1])
		endif
	endfor	
	ModifyGraph  /W=Panel0#G0 tick=2,mirror=1,fSize=24,axThick=3
	ModifyGraph /W=Panel0#G0 log=1
	Label  /W=Panel0#G0 bottom "f [Hz]"
	Label  /W=Panel0#G0 left "sqrt(PSD) [V/sqrt(Hz)]"
	
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End

Function Plot_Fit(ba) : ButtonControl
	STRUCT WMButtonAction &ba
	Wave data_sel=root:data_sel
	Wave /T In_data_names=root:In_data_names
	Wave data = root:Temp_Results:data
	
	Variable i=0
		
	switch( ba.eventCode )
		case 2: // mouse up
		//for (i=0;i<Dimsize(data_sel,0); i=i+1)
		//if (data_sel[i][0]==1)
		//AppendToGraph /W=Panel0#G0 $(In_data_names[i][0])
		//endif
		//endfor
		//print("Hello")
		if (sum(data_sel)>1)
				DoAlert /T="Selection alert" 0, "Select only 1 wave!"
		else
			for (i=0;i<Dimsize(data_sel,0); i=i+1)
				if (data_sel[i][0]==1)
					if(data[i][0][0]==0)
						DoAlert /T="Bias Alert" 0,"No fit available for the selected wave!"
					else
						i=Dimsize(data_sel,0)
					endif
				endif
			endfor
		endif

			break
		case -1: // control being killed
			break
	endswitch

	return 0
End

Function Clear_Graph(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			KillWindow Panel0#G1; Display/HOST=Panel0 /W=(15,15,960,540)
			KillWindow Panel0#G0; Display/HOST=Panel0 /W=(15,15,960,540)
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function ListBoxPSD(lba) : ListBoxControl
	STRUCT WMListboxAction &lba

	Variable row = lba.row
	Variable col = lba.col
	WAVE/T/Z listWave = lba.listWave
	WAVE/Z selWave = lba.selWave
	Variable i=0
	Variable j=0
	switch( lba.eventCode )
		case -1: // control being killed
			break
		case 1: // mouse down
		
		for (i=0;i<Dimsize(selWave,0); i=i+1)
			for (j=0;j<Dimsize(selWave,1); j=j+1)
				if (selWave[i][j]==1)
					print listWave[i][j]
				endif
			endfor
		endfor
		
		//print listWave[lba.row][lba.col]

			break
		case 3: // double click
			break
		case 4: // cell selection
		case 5: // cell selection plus shift key
			break
		case 6: // begin edit
			break
		case 7: // finish edit
			break
		case 13: // checkbox clicked (Igor 6.2 or later)
			break
	endswitch

	return 0
End


Function Clear_data(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
		DoAlert /T="Clear Data" 2,"Sure?"
		if(V_flag==1)
			Clear_All()
		endif
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function Clear_All()

	//Clear results and set default start
	KillWindow Panel0#G0; Display/HOST=Panel0 /W=(15,15,960,540)
	KillWindow Panel0#G1; Display/HOST=Panel0 /W=(15,15,960,540)
	Define_Variables()
	
	//Clear Data start
	KillWaves /A
	ControlInfo /W=Panel0 KeepLAst
	if(!V_value)
		KillVariables /A
		Variable /G range_log1
		Variable /G range_log2
		Variable /G f1
		Variable /G f2
		Variable /G Rserial
		Variable /G lorentzian_f
		Variable /G lorentzian_x
		Variable /G tempK=0
		Variable /G beta_red
		Variable /G NumDec
		Variable /G f0_Min
		Variable /G f0_Max
		Variable /G versionNumber
		String /G user
		String /G comment
  endif
	//Additional dimension needed because ListBox handles an empty wave buggy
	Make/N=(1,2)/O /T In_data_names
	Make/N=(1,2)/O data_sel	
	Make/N=2/I Graph_sel_int
	Duplicate/O root:smartfit_default:smartfit_betas root:smartfit_betas
	Duplicate/O root:smartfit_default:smartfit_freqs root:smartfit_freqs

	Graph_sel_int[0]=0
	Graph_sel_int[1]=1
	Make/N=2/T Graph_sel
	Graph_sel[0]="   lin-log"
	Graph_sel[1]="log-log   "
	ListBox In_data listWave=In_data_names,selWave=data_sel
	Slider Graph_select userTicks={Graph_sel_int,Graph_sel}
	//Clear data end
End


// Bias-t mV-ban megadni!!!
Function Define_Variables()
	//size is later adjusted as PSD-s are loaded
	
	//kill all old waves
	SetDataFolder root:Temp_Results
	KillWaves /A
	SetDataFolder ::
	
	//log skálán ekvidisztáns binezés beállítása
	def_log_ind(50)
	
	Variable /G root:Temp_Results:ind=0
	Make/O/N=(1,0)/D root:Temp_Results:outp_fit  //2D array contains all PSDs which were fitted 
	Make/O/N=(1,0)/D root:Temp_Results:outp_fit_x  //corresponding x-scale
	
	//save parameters and results in temporary matrix:
	Make/O/N=(0,30,5)/D root:Temp_Results:data
	Make/O/N=(0,10)/T root:Temp_Results:files
	
	//Fitting parameters and Error
	Make/O/N=(0,2) root:Temp_Results:W_sigma_par_1pf
	Make/O/N=(0,2) root:Temp_Results:W_sigma_rel_1pf
	Make/O/N=(0) root:Temp_Results:W_goodness_1pf
	Make/O/N=(0,4) root:Temp_Results:W_sigma_par
	Make/O/N=(0,4) root:Temp_Results:W_sigma_rel
	Make/O/N=(0) root:Temp_Results:W_sigma_rel_sum
	Make/O/N=(0) root:Temp_Results:W_goodness
End


Function def_log_ind(num)
	Variable num
	Variable ii
	
	
	MAKE /N=(6*num+1)/O root:Temp_Results:log_ind1
	WAVE log_ind1=root:Temp_Results:log_ind1
	WAVE fx=root:fx
	WAVE temp2=root:temp2
	MAKE /N=(6*num+1)/O temp2_log
	MAKE /N=(6*num+1)/O fx_log
	for (ii=0; ii<6*num+1; ii+=1)
		log_ind1[ii]=round(10^(ii*(1/num)))
		//temp2_log[ii]=temp2[log_ind1[ii]]
		//fx_log[ii]=fx[log_ind1[ii]]
	endfor
End


Function Help(ba): ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			DoWindow /F Help_noise
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function SavePlotGraph(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			ControlInfo /W=Panel0 Graph_select
			String PlotG = "Panel0#G"+num2str(V_value)
			SavePICT/N=$(PlotG)/E=-5/B=72
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function FullAutoProc(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			FullAuto()
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function SmartFitProc(ba) : ButtonControl
	STRUCT WMButtonAction &ba
	
	switch( ba.eventCode )
		case 2: // mouse up
				initSmartFit()
		
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function KeepLastProc(cba) : CheckBoxControl
	STRUCT WMCheckboxAction &cba

	switch( cba.eventCode )
		case 2: // mouse up
			Variable checked = cba.checked
			if(checked != 1)
				DoAlert /T="Keep Last Settings" 1,"Sure?\nThis action will reset all parameters."
				if(V_flag==2)
					CheckBox KeepLast value=1
				endif
			endif
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function FilterDecodeProc(sva) : SetVariableControl
	STRUCT WMSetVariableAction &sva

	switch( sva.eventCode )
		case 1: // mouse up
		case 2: // Enter key
		case 3: // Live update
			Variable dval = sva.dval
			FilterDecode(dval)
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End

/////////////////////////////////////////////////////////////////////

Function SetBias(sva) : SetVariableControl
	STRUCT WMSetVariableAction &sva
	Wave data = root:Temp_Results:data
	Nvar ind=root:Temp_Results:ind
	switch( sva.eventCode )
		case 1: // mouse up
		case 2: // Enter key
		
		case 3: // Live update
			Variable dval = sva.dval
			String sval = sva.sval
			data[ind][0][0]=sva.dval
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function SetRes(sva) : SetVariableControl
	STRUCT WMSetVariableAction &sva
	Wave data = root:Temp_Results:data
	Nvar ind=root:Temp_Results:ind
	switch( sva.eventCode )
		case 1: // mouse up
		case 2: // Enter key
		case 3: // Live update
			Variable dval = sva.dval
			String sval = sva.sval
			data[ind][2][0]=sva.dval
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End

/////////////////////////////////////////////////////////////////////


Function FitLorentzian(cba) : CheckBoxControl
	STRUCT WMCheckboxAction &cba

	switch( cba.eventCode )
		case 2: // mouse up
			Variable checked = cba.checked
			if(checked)
			Button Get_Cur4 disable=0
			SetVariable Setf0Max disable=0
			SetVariable set_range_log3 disable=0
			SetVariable Setf0Min disable=0
			SetVariable set_beta_red disable=0
			TitleBox InitParam disable=0
			TitleBox LorLim disable=0
			SetDrawEnv linethick= 0,arrowfat= 0.00
			else
			Button Get_Cur4 disable=1
			SetVariable Setf0Max disable=1
			SetVariable set_range_log3 disable=1
			SetVariable Setf0Min disable=1
			TitleBox InitParam disable=1
			TitleBox LorLim disable=1
			SetVariable set_beta_red disable=1
			SetDrawEnv linethick= 3.00,arrowfat= 0.80
			endif
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function Get_Cursor_log(ba) : ButtonControl
	STRUCT WMButtonAction &ba
	NVAR Range_log1= root:Range_log1
	NVAR Range_log2= root:Range_log2
	Wave log_ind1=root:Temp_Results:log_ind1
	switch( ba.eventCode )
		case 2: // mouse up
			//Range_log1=round(log(pcsr(A))*(DimSize(log_ind1,0)-1)/6)
			//Range_log2=round(log(pcsr(B))*(DimSize(log_ind1,0)-1)/6)
			Range_log1=pcsr(A)
			Range_log2=pcsr(B)
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End

Function Get_Cursor_B(ba) : ButtonControl
	STRUCT WMButtonAction &ba
	NVar lorentzian_f=root:lorentzian_f
	NVar lorentzian_x=root:lorentzian_x
	Wave log_ind1=root:Temp_Results:log_ind1
	Wave fx_log=root:fx_log
	switch( ba.eventCode )
		case 2: // mouse up
			//lorentzian_x=round(log(pcsr(B))*(DimSize(log_ind1,0)-1)/6)
			//lorentzian_f=10^fx_log[lorentzian_x]
			lorentzian_x=pcsr(B)
			lorentzian_f=10^fx_log[lorentzian_x]
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End

Function refresh_f0() 
	//find nearest logarithmic value in fx_log
	NVAR lorentzian_f
	Wave fx_log
	Variable/G lorentzian_x
	Variable temp_x = log(lorentzian_f)
	
	Variable V_Value
	FindLevel/Q fx_log temp_x
	if (!(V_LevelX == V_LevelX)) //NaN check
		V_LevelX = 0
	endif
	lorentzian_x = round(V_LevelX)
End

Function Setf0(sva) : SetVariableControl
	STRUCT WMSetVariableAction &sva

	switch( sva.eventCode )
		case 1: // mouse up
		case 2: // Enter key
		case 3: // Live update
			Variable dval = sva.dval
			String sval = sva.sval
			
			
			refresh_f0()
					
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function changeLorFreq(new_freq)
	Variable new_freq
	WAVE fx_log = root:fx_log
	Variable/G lorentzian_x
	Variable temp_x = log(new_freq)
	
	Variable V_Value
	FindLevel/Q fx_log temp_x
	lorentzian_x = round(V_LevelX)
	NVAR lorentzian_f = root:lorentzian_f
	lorentzian_f = new_freq
End


Function SmartFit(in_psd,base_psd,ind)
	WAVE in_psd
	WAVE base_psd
	Variable ind
	NVAR beta_red=root:beta_red
	//NVAR lorentzian_f=root:lorentzian_f
	NVAR range_log1 = root:range_log1
	NVAR range_log2 = root:range_log2
	WAVE smartfit_betas = root:smartfit_betas
	WAVE smartfit_freqs = root:smartfit_freqs
	WAVE fx_log = root:fx_log
	if (WaveExists(fx_log) == 0)
		QuickFitPSD(in_psd,base_psd,ind)
		DisplayFit(in_psd,base_psd,ind)
	endif
	WAVE fx_log = root:fx_log
	WAVE fit_pure_psd_log = root:fit_pure_psd_log
	Duplicate/O in_psd wpsd
	wpsd = in_psd^2-base_psd^2
	wpsd = log(wpsd)
	WAVE fx = root:fx
	Duplicate/O wpsd psd_avg
	Make /D/O/N=(dimsize(smartfit_freqs,0),dimsize(smartfit_betas,0)) fits = 0
	
		
	Variable i = 0
	Variable avg_steps_o = 10
	Variable avg_steps = avg_steps_o
	for (i = 0; i < dimsize(wpsd,0);i++)
		if (i >= 10) 
			avg_steps = round(avg_steps_o*log(i))
		endif
		if (i < avg_steps/2+1 || i > dimsize(wpsd,0)-avg_steps/2-1)
			psd_avg[i] = wpsd[i]
		else
			Variable h = 0
			Variable s = 0
			for (h = 0; h < avg_steps; h++)
				s += wpsd[i-avg_steps/2+h]
			endfor
			psd_avg[i] = s/avg_steps
		endif
	endfor
	
	Variable j = 0
	for (i = 0; i < dimsize(smartfit_freqs,0); i++)
		for (j = 0; j < dimsize(smartfit_betas,0); j++)
			changeLorFreq(smartfit_freqs[i])
			beta_red = smartfit_betas[j]
			QuickFitPSD(in_psd,base_psd,ind)
			//no display here
			WAVE W_coef_psdfit = root:W_coef_psdfit
			Variable sumd = 0
			Variable k = 1
			
			for (k = 1; fx[k] < fx_log[range_log1]; k++)
			endfor
			
			Variable cntr = 0
			for (; fx[k] < fx_log[range_log2];k++)
				Variable diff = abs(Noise001(W_coef_psdfit,fx[k])-psd_avg[k])/abs(psd_avg[k])
				cntr++
				//kompenzáció
				if (k >= 10)
					diff = diff/(k/10.0)
				endif
				//tudom hogy ez így hülyén néz ki, de ennél egyszerűbb módszert nem találtam a nan értékek szűrésére
				if (diff == diff)
					sumd += diff
				endif
			endfor
			if (fit_pure_psd_log[50] == 0)
				sumd = 0
			endif
			fits[i][j] = sumd/cntr*1658
			
		endfor
	endfor
	
	
	variable mini = 0
	variable minj = 0
	variable m = 10000
	for (i = 0; i < dimsize(fits,0); i++)
		for (j = 0; j < dimsize(fits,1); j++)
			if (fits[i][j] != 0 && fits[i][j] < m)
				m = fits[i][j]
				mini = i
				minj = j
			endif
		endfor
	endfor
	
	changeLorFreq(smartfit_freqs[mini])
	beta_red = smartfit_betas[minj]
	
	QuickFitPSD(in_psd,base_psd,ind)
	DisplayFit(in_psd,base_psd,ind)
	
	return m
//	print fits[mini][minj]
//	print smartfit_freqs[mini]
//	print smartfit_betas[minj]
//	print fit_temp_log[50]
End


Function Do_Fit(ba) : ButtonControl
	STRUCT WMButtonAction &ba
	String in_psd
	String base_psd
	Wave data_sel=root:data_sel
	Wave /T In_data_names=root:In_data_names
	Wave data = root:Temp_Results:data
	
	Nvar ind=root:Temp_Results:ind
	
	Variable i=0
	Nvar f1=root:f1
	Nvar f2=root:f2
	Nvar Rserial=root:Rserial
	Nvar tempK=root:tempK
	
	ControlInfo /W=Panel0 fitRes
	
	switch( ba.eventCode )
		case 2: // mouse up
				//if(sum(data_sel)>2)
				///DoAlert /T="Selection alert" 0,"Select ONLY 2 waves! "
				if (sum(data_sel)<2)
				DoAlert /T="Selection alert" 0, "Select at least 2 waves!"
				//elseif(sum(data_sel)==2)
		elseif(f1==0)
			DoAlert /T="Frequency Alert" 0,"Set f1!"
		elseif(f2==0)
			DoAlert /T="Frequency Alert" 0,"Set f2!"
		elseif(Rserial==0)
			DoAlert /T="Serial resistance Alert" 0,"Set Serial resistance!"
		elseif(tempK==0)
			DoAlert /T="Temperature Alert" 0,"Set Temperature!"
		else		
			for (i=0;i<Dimsize(data_sel,0); i=i+1)
				if (data_sel[i][1]==1)
					base_psd=In_data_names[i][1]
				endif
			endfor
		
			for (i=0;i<Dimsize(data_sel,0); i=i+1)
				if (data_sel[i][0]==1)
					in_psd=In_data_names[i][0]
					if(data[i][0][0]==0)
						DoAlert /T="Bias Alert" 0,"Set bias!"
					elseif(data[i][2][0]==0 && V_value==0)
						DoAlert /T="Sample resistance Alert" 0,"Set Sample resistance or Switch ON thermal fit!"
					else
						//if(f1==0)
						//DoAlert /T="Frequency Alert" 0,"Set f1!"
						//elseif(f2==0)
						//DoAlert /T="Frequency Alert" 0,"Set f2!"
						//elseif(Rserial==0)
						//DoAlert /T="Serial resistance Alert" 0,"Set Serial resistance!"
						//elseif(data[i][2][0]==0 && V_value==0)
						//DoAlert /T="Sample resistance Alert" 0,"Set Sample resistance or Swithc ON thermal fit!"
						//else		
								
						Fit_PSD_new($in_psd,$base_psd,i)
						SetVariable SetBias value= _NUM:data[i][0][0]
						SetVariable SetRes value= _NUM:data[i][2][0]
						//endif
					endif
					
					// display Graph1 log-log 
					//!!! ONLY works after last fit (why?)
					SetWindow Panel0#G0 hide=1
	
					//Set SliderControl Graph_select to Graph1
					Slider Graph_select value=1
					
					// Delay between plotted fits (sadly also after last)
					ControlInfo setsleep
					Sleep/T V_Value/1000*60
					
				endif
			endfor
		endif
		
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function Fit_PSD_new(in_psd,base_psd,ind)
	WAVE in_psd
	WAVE base_psd
	Variable ind
	QuickFitPSD(in_psd,base_psd,ind)
	DisplayFit(in_psd,base_psd,ind)
End


Function QuickFitPSD(in_psd,base_psd,ind)
	WAVE in_psd  //sqrt of PSD
	WAVE base_psd  //sqrt of base PSD
	Variable ind
	
	//temporary data matrix
	Wave data = root:Temp_Results:data
	Wave/T files = root:Temp_Results:files
	
	//all PSDs to be stored in here
	WAVE outp_fit=root:Temp_Results:outp_fit
	if (DimSize(outp_fit,0)<DimSize(in_psd,0))
		Redimension /N=(DimSize(in_psd,0),-1) outp_fit
	endif
	WAVE outp_fit_x=root:Temp_Results:outp_fit_x
	if (DimSize(outp_fit_x,0)<DimSize(in_psd,0))
		Redimension /N=(DimSize(in_psd,0),-1) outp_fit_x
	endif

	//fitting meta data
	NVAR f1=root:f1
	NVAR f2=root:f2
	NVAR f0_Min = root:f0_Min
	NVAR f0_Max = root:f0_Max
	NVAR range_log1=root:range_log1
	NVAR range_log2=root:range_log2
	NVAR NumDec = root:NumDec
	NVAR beta_red=root:beta_red
	NVAR lorentzian_f = root:lorentzian_f
	NVAR lorentzian_x=root:lorentzian_x
	
	//
	Duplicate/O base_psd fx
	fx=log(p*DimDelta(base_psd,0))
	Make/O/N=0 fx_log

	generate_equidistant_logscale(fx,fx_log)
	//update Lorentzian f0
	lorentzian_f=10^fx_log[lorentzian_x]
	
	data[ind][6][4] = f1  //int_limit_f1
	data[ind][7][4] = f2  //int_limit_f2
	data[ind][8][4] = f0_Min  //fitLor_f0_Min
	data[ind][9][4] = f0_Max  //fitLor_f0_Max
	data[ind][10][4] = range_log1  //fit_range_log1
	data[ind][11][4] = range_log2  //fit_range_log2
	data[ind][12][4] = NumDec  //fit_NumDec
	data[ind][13][4] = beta_red  //fit_beta_initial
	data[ind][14][4] = lorentzian_f  //fit_f0_initial
	
	files[ind][2]=NameOfWave(base_psd)
	
	
	//
	Duplicate /O 'in_psd' 'pure_psd'
	Duplicate /O 'in_psd' 'pure_base'
	pure_psd=(in_psd^2-base_psd^2)  //subtract base noise squared
	pure_base = base_psd^2  //base noise squared
	
	//**temporary Variables for clarity in calculations**
	Variable current = data[ind][1][0]
	//**
	
	//Numerical integral of the PSD
	data[ind][23][0] = (sum(pure_base,f1,f2)*DimDelta(pure_base,0))  //int base
	data[ind][17][0] =(sum(pure_psd,f1,f2)*DimDelta(pure_psd,0))  //int (PSD-base)
	data[ind][12][0]=sqrt(data[ind][17][0])/abs(current) //CNR_Num=int_curr_num/current
	
	//logarithmic y-scale of PSD
	pure_psd=log(pure_psd)
	outp_fit[][ind]=pure_psd[p]
	outp_fit_x[][ind]=fx[p]
	//pure_psd: log-scaled y, lin-scaled x
	//outp_fit: log-scaled y, non-scaled x -> proper x wave is root:fx (which is log-scaled!!)
	//outp_fit_x: x-scale for outp_fit = fx (log-scaled)
	
	//equidistantly log-scaled PSD
	Duplicate /O 'pure_psd' 'pure_psd_log'
	generate_equidistant_logscale(pure_psd,pure_psd_log)
	
	//Error waves
	WAVE W_sigma_par_1pf=root:Temp_Results:W_sigma_par_1pf
	WAVE W_sigma_rel_1pf=root:Temp_Results:W_sigma_rel_1pf
	WAVE W_sigma_par=root:Temp_Results:W_sigma_par
	WAVE W_sigma_rel=root:Temp_Results:W_sigma_rel
	WAVE W_sigma_rel_sum=root:Temp_Results:W_sigma_rel_sum
	WAVE W_goodness=root:Temp_Results:W_goodness
	WAVE W_goodness_1pf=root:Temp_Results:W_goodness_1pf
	
	Make /D/N=2/O W_coef
	Make /D/N=2/O W_sigma
	WAVE W_sigma=root:W_sigma
	WAVE W_coef=root:W_coef	
	
	refresh_f0() //Just in case lorentzian_x did not get refreshed after setting forentzian_f
	
	
	//////////////////
	//FITTING only 1pf
	CurveFit/Q/NTHR=0 line  pure_psd_log[range_log1,range_log2] /X=fx_log[range_log1,range_log2] /D 
	Variable A
	Variable B
	B=W_coef[1]
	A=W_coef[0]
	data[ind][3][0]=W_coef[1] //slope -> exponent
	data[ind][4][0]=10^W_coef[0]  //interc -> beta
	
	Variable k
	for (k=0; k<2; k+=1)
		W_sigma_par_1pf[ind][k]=W_sigma[k]
		W_sigma_rel_1pf[ind][k]=abs(W_sigma[k]/W_coef[k])
	endfor

	Make/D/N=4/O W_coef
	W_coef[0] = {10^(A+beta_red),B,10^pure_psd_log[lorentzian_x]/0.7/2/pi*lorentzian_f,2*pi/lorentzian_f}
	Make/O/T/N=2 T_Constraints
	
	// Constraints of Lorentzian f0
	ControlInfo Setf0Min
	Variable taumax = 1/(2*pi*V_Value)
	ControlInfo Setf0Max
	Variable taumin = 1/(2*pi*V_Value)
	T_Constraints[0] = {"K3 > "+num2str(taumin),"K3 < "+num2str(taumax)}//,"K1 > -1.6","K1 < -0.6"}
	
	
	//////////////////
	//actual FITTING Lorentzian+1pf
	Variable V_fitOptions=4
	FuncFit/Q/H="0000"/NTHR=0 Noise001 W_coef  pure_psd_log[range_log1,range_log2] /X=fx_log[range_log1,range_log2] /D /C=T_Constraints

	W_coef[2]=abs(W_coef[2])
	W_coef[3]=abs(W_coef[3])
	Duplicate /O pure_psd_log fit_lorentz
	Duplicate /O W_coef W_coef_psdfit
	fit_lorentz=log(W_coef[2]*W_coef[3]/(1+(W_coef[3]*2*pi*10^fx_log)^2))
	Duplicate /O pure_psd_log fit_1pf
	fit_1pf=log(W_coef[0]*(10^fx_log)^W_coef[1])
	data[ind][5][0]=W_coef[1]  //slope_log -> exponent_lor
	data[ind][6][0]=10^(log(W_coef[0]))  //interc_log -> beta_lor
	data[ind][7][0]=W_coef[2]  //ampl_lor
	data[ind][8][0]=W_coef[3]  //tau_lor
	
	for (k=0; k<4; k+=1)
		W_sigma_par[ind][k]=W_sigma[k]
		W_sigma_rel[ind][k]=abs(W_sigma[k]/W_coef[k])
		W_sigma_rel_sum[ind]=W_sigma_rel[ind][0]+W_sigma_rel[ind][1]+W_sigma_rel[ind][2]+W_sigma_rel[ind][3]
	endfor
	W_goodness[ind]=V_chisq
		
	Duplicate/O fit_lorentz fit_lor_1pf_sum
	fit_lor_1pf_sum=log((10^fit_lorentz+10^fit_1pf))
	
	//**temporary Variables for clarity in calculations**
	Variable slope = data[ind][3][0]
	Variable interc = data[ind][4][0]
	Variable slope_log = data[ind][5][0]
	Variable interc_log = data[ind][6][0]
	Variable ampl = data[ind][7][0]
	Variable tau = data[ind][8][0]
	//**
	

	//Waves needed for display lin-log (Graph0)
	Duplicate /O pure_psd pure_psd_lin
	pure_psd_lin = sqrt(in_psd^2-base_psd^2)
	
	Duplicate /O pure_psd_lin lorentz_lin
	lorentz_lin=ampl*tau/(1+(2*pi*tau*DimDelta(pure_psd_lin,0)*p)^2)  
		
	Duplicate /O pure_psd_lin lin_1pf
	lin_1pf = interc_log*(DimDelta(pure_psd_lin,0)*p)^slope_log
	lin_1pf[0] = lin_1pf[1]
		
	Duplicate/O lin_1pf fit_sum_lin
	fit_sum_lin=lin_1pf+lorentz_lin
    	
	fit_sum_lin=sqrt(fit_sum_lin)
 	lin_1pf=sqrt(lin_1pf)
 	lorentz_lin=sqrt(lorentz_lin)



//	//EVERY display related functionality comes here!
//	if (disp == 1)
//		
//		// Panel0#G0: Linear scale graph Graph0
//		KillWindow Panel0#G0; Display/HOST=Panel0 /W=(15,15,960,540)
//		
//		//Calculations for that
//		Duplicate /O pure_psd pure_psd_lin
//		pure_psd_lin = sqrt(in_psd^2-base_psd^2)
//		
//		Duplicate /O pure_psd_lin lorentz_lin
//		lorentz_lin=ampl*tau/(1+(2*pi*tau*DimDelta(pure_psd_lin,0)*p)^2)  
//			
//		Duplicate /O pure_psd_lin lin_1pf
//		lin_1pf = interc_log*(DimDelta(pure_psd_lin,0)*p)^slope_log
//		lin_1pf[0] = lin_1pf[1]
//			
//		Duplicate/O lin_1pf fit_sum_lin
//     fit_sum_lin=lin_1pf+lorentz_lin
//        	
//		fit_sum_lin=sqrt(fit_sum_lin)
//	 	lin_1pf=sqrt(lin_1pf)
//     	lorentz_lin=sqrt(lorentz_lin)
//        	
//       AppendToGraph /W=Panel0#G0 pure_psd_lin,lorentz_lin,lin_1pf,fit_sum_lin
//       ModifyGraph /W=Panel0#G0 log(bottom)=1, lsize=2,rgb(pure_psd_lin)=(0,0,65535),rgb(lorentz_lin)=(0,0,0),rgb(fit_sum_lin)=(52428,34958,1)
//       ModifyGraph  /W=Panel0#G0 tick=2,mirror=1,fSize=24,axThick=3
//       SetAxis/W=Panel0#G0 left WaveMin(pure_psd_lin),pure_psd_lin[1]
//       Label  /W=Panel0#G0 bottom "f [Hz]"
//       Label  /W=Panel0#G0 left "sqrt(PSD) [V/sqrt(Hz)]"
//	
//		// Panel0#G1: Logarithmic scale graph Graph1	
//		KillWindow Panel0#G1; Display/HOST=Panel0 /W=(15,15,960,540)
//		
//		AppendToGraph /W=Panel0#G1 outp_fit[][ind] vs outp_fit_x[][ind]
//		ModifyGraph /W=Panel0#G1 rgb(outp_fit)=(0,0,65280),mode(outp_fit)=0		
//		
//		AppendToGraph /W=Panel0#G1 pure_psd_log vs fx_log
//		ModifyGraph /W=Panel0#G1 mode(pure_psd_log)=3,mrkThick(pure_psd_log)=2,rgb(pure_psd_log)=(0,2,26214),msize(pure_psd_log)=6
//		
//		AppendToGraph /W=Panel0#G1 $("fit_pure_psd_log")
//		ModifyGraph /W=Panel0#G1 lsize(fit_pure_psd_log)=2,rgb(fit_pure_psd_log)=(65280,65280,16384)
//		
//		AppendToGraph /W=Panel0#G1 fit_lorentz vs fx_log
//		ModifyGraph /W=Panel0#G1 mode(fit_lorentz)=2,rgb(fit_lorentz)=(0,0,0)
//		
//		AppendToGraph /W=Panel0#G1 fit_1pf vs fx_log
//		ModifyGraph /W=Panel0#G1 mode(fit_1pf)=2,rgb(fit_1pf)=(65535,0,0)
//		
//		AppendToGraph /W=Panel0#G1 fit_lor_1pf_sum vs fx_log
//		ModifyGraph /W=Panel0#G1 mode(fit_lor_1pf_sum)=2,rgb(fit_lor_1pf_sum)=(65535,43690,0)
//		
//		Label/W=Panel0#G1 bottom "log(f)"
//		Label/W=Panel0#G1 left "log(PSD)"
//		ModifyGraph/W=Panel0#G1 tick=2,mirror=1,fSize=24,axThick=3,lsize=4
//
////		TextBox /W=Panel0#G1 /C/N=text0/Z=1/A=LT/X=1.00/Y=1.00 "1/f fit \rExp:\t\t" + num2str(slope) + " \rBeta:\t" + num2str(interc)
//		TextBox /W=Panel0#G1 /C/N=text1/Z=1/A=RT/X=1.00/Y=1.00 "1/f + Lorentzian fit:"+ "\rExp_log:\t\t" + num2str(slope_log) + " \rBeta_log:\t" + num2str(interc_log) +"\rAmpl:\t\t" + num2str(ampl)  + " \rTau:\t\t" + num2str(tau) + " \rf0:\t\t" + num2str(1/2/pi/tau)
//		
//		//Save png
////		SavePICT/O/N=Panel0#G1/P=home/E=-5/B=72 as NameOfWave(in_psd)+"outp_fit.png"
////		SavePICT/O/N=Panel0#G0/P=home/E=-5/B=72 as NameOfWave(in_psd)+"comp.png"
//	endif


	//Analytical integral of the PSD
	data[ind][14][0]=interc/(slope+1)*f2^(slope+1)-interc/(slope+1)*f1^(slope+1)  //int_curr
	data[ind][15][0]=interc_log/(slope_log+1)*f2^(slope_log+1)-interc_log/(slope_log+1)*f1^(slope_log+1)  //int_curr_log
	//???	//int_lor=ampl*log(tau^2*(2*pi*f2)^2+1)/(tau^2)-ampl*log(tau^2*(2*pi*f1)^2+1)/(tau^2)
	data[ind][16][0]=ampl/2/pi*(atan(tau*(2*pi*f2))-atan(tau*(2*pi*f1)))  //int_curr_lor
	
	data[ind][18][0]=data[ind][15][0]+data[ind][16][0] //int_curr_tot
	
	//**temporary Variables for clarity in calculations**
	Variable int_curr = data[ind][14][0]
	Variable int_curr_log = data[ind][15][0]
	Variable int_curr_lor = data[ind][16][0]
	Variable int_curr_tot = data[ind][18][0]
	//**
	
	data[ind][9][0]=sqrt(int_curr)/abs(current) //curr_noise_ratio
	data[ind][10][0]=sqrt(int_curr_log)/abs(current)  //curr_noise_ratio_log
	data[ind][11][0]=sqrt(int_curr_lor)/abs(current)  //curr_noise_ratio_lor
	data[ind][13][0]=sqrt(int_curr_tot)/abs(current)  //curr_noise_ratio_tot
		
	data[ind][19][0]=int_curr_lor/int_curr_tot  //Lor2Tot
	data[ind][20][0]=int_curr_log/int_curr_tot  //'1pf2Tot'
	data[ind][21][0]=int_curr_lor/int_curr_log  //Lor21pf

	//Analytical errors
	data[ind][3][1]=W_sigma_par_1pf[ind][1]  //exponent_err, 1pf
	data[ind][4][1]=ln(10)*interc*W_sigma_par_1pf[ind][0]  //beta_err, 1pf
	data[ind][5][1]=W_sigma_par[ind][1]  //exp_lor_err, 1pf in (Lor+1pf)
	data[ind][6][1]=W_sigma_par[ind][0]  //beta_lor_err, 1pf in (Lor+1pf)
	data[ind][7][1]=W_sigma_par[ind][2]  //ampl_lor_err, Lor in (Lor+1pf)
	data[ind][8][1]=W_sigma_par[ind][3]  //tau_lor_err, Lor in (Lor+1pf)
			
	//int_curr_err
	data[ind][14][1]=sqrt((interc*ln(10)*W_sigma_par_1pf[0])^2*(1/(slope+1)*(f2^(slope+1)-f1^(slope+1)))^2+W_sigma_par_1pf[1]^2*(interc/(slope+1)*(f2^(slope+1)*(ln(f2)-1/(slope+1))-f1^(slope+1)*(ln(f1)-1/(slope+1))))^2)
	//int_curr_log_err
	data[ind][15][1]=sqrt((W_sigma_par[0])^2*(1/(slope_log+1)*(f2^(slope_log+1)-f1^(slope_log+1)))^2+W_sigma_par[1]^2*(interc_log/(slope_log+1)*(f2^(slope_log+1)*(ln(f2)-1/(slope_log+1))-f1^(slope_log+1)*(ln(f1)-1/(slope_log+1))))^2)
	//int_curr_lor_err
	data[ind][16][1]=sqrt(W_sigma_par[2]^2*(atan(2*pi*tau*f2)/2/pi-atan(2*pi*tau*f1)/2/pi)^2+W_sigma_par[3]^2*(f2*ampl/((2*pi*tau*f2)^2+1)-f1*ampl/((2*pi*tau*f1)^2+1))^2)
	
	//**temporary Variables for clarity in calculations**
	Variable current_err = data[ind][1][1]  //is zero!!!!
	Variable int_curr_err = data[ind][14][1]
	Variable int_curr_log_err = data[ind][15][1]
	Variable int_curr_lor_err = data[ind][16][1]
	Variable int_curr_tot_err = data[ind][18][1]
	//**
	
	data[ind][18][1]=sqrt(int_curr_log_err^2+int_curr_lor_err^2)  //int_curr_tot_err
	
	data[ind][9][1]=sqrt((int_curr_err^2/4/int_curr/current^2)+(current_err^2*int_curr/current^4))  //curr_noise_err
	data[ind][10][1]=sqrt((int_curr_log_err^2/4/int_curr_log/current^2)+(current_err^2*int_curr_log/current^4))  //curr_noise_err_log
	data[ind][11][1]=sqrt((int_curr_lor_err^2/4/int_curr_lor/current^2)+(current_err^2*int_curr_lor/current^4))  //curr_noise_err_lor
	data[ind][13][1]=sqrt((int_curr_tot_err^2/4/int_curr_tot/current^2)+(current_err^2*int_curr_tot/current^4))  //curr_noise_err_tot

	data[ind][19][1]=sqrt((int_curr_lor_err/int_curr_tot)^2+(int_curr_tot_err*int_curr_lor/int_curr_tot^2)^2)  //Lor2Tot_err
	data[ind][20][1]=sqrt((int_curr_log_err/int_curr_tot)^2+(int_curr_tot_err*int_curr_log/int_curr_tot^2)^2)  //1pf2Tot_err
	data[ind][21][1]=sqrt((int_curr_lor_err/int_curr_log)^2+(int_curr_log_err*int_curr_lor/int_curr_log^2)^2)  //LorTo1pf
	
	//calculate filterCode
	FitFilter(data, ind)
	
	ind=ind+1

End


Function DisplayFit(in_psd,base_psd,ind)
	WAVE in_psd
	WAVE base_psd
	Variable ind
	
	Wave pure_psd
	Wave pure_psd_lin
	Wave lorentz_lin //korábban számolni!  
	Wave lin_1pf//korábban számolni! 
	Wave outp_fit = root:Temp_Results:outp_fit
	Wave outp_fit_x = root:Temp_Results:outp_fit_x
	Wave pure_psd_log
	Wave fx_log
	Wave fit_lorentz
	Wave fit_1pf
	Wave fit_lor_1pf_sum
	Wave fit_sum_lin
	
	Wave data = root:Temp_results:data
	Variable slope_log = data[ind][5][0]
	Variable interc_log = data[ind][6][0]
	Variable ampl = data[ind][7][0]
	Variable tau = data[ind][8][0]
	
	// Panel0#G0: Linear scale graph Graph0
	KillWindow Panel0#G0; Display/HOST=Panel0 /W=(15,15,960,540)
	
	AppendToGraph /W=Panel0#G0 pure_psd_lin,lorentz_lin,lin_1pf,fit_sum_lin
	ModifyGraph /W=Panel0#G0 log(bottom)=1, lsize=2,rgb(pure_psd_lin)=(0,0,65535),rgb(lorentz_lin)=(0,0,0),rgb(fit_sum_lin)=(52428,34958,1)
	ModifyGraph  /W=Panel0#G0 tick=2,mirror=1,fSize=24,axThick=3
	
	//find first available value (NaN values ruin plotting)
	Variable axisMax
	Variable index = 1
	do
		axisMax = pure_psd_lin[index]
		index += 1
	while (numtype(axisMax) == 2)
	
	SetAxis/W=Panel0#G0 left WaveMin(pure_psd_lin), axisMax
	Label  /W=Panel0#G0 bottom "f [Hz]"
	Label  /W=Panel0#G0 left "sqrt(PSD) [V/sqrt(Hz)]"
	
	// Panel0#G1: Logarithmic scale graph Graph1	
	KillWindow Panel0#G1; Display/HOST=Panel0 /W=(15,15,960,540)
	
	AppendToGraph /W=Panel0#G1 outp_fit[][ind] vs outp_fit_x[][ind]
	ModifyGraph /W=Panel0#G1 rgb(outp_fit)=(0,0,65280),mode(outp_fit)=0		
	
	AppendToGraph /W=Panel0#G1 pure_psd_log vs fx_log
	ModifyGraph /W=Panel0#G1 mode(pure_psd_log)=3,mrkThick(pure_psd_log)=2,rgb(pure_psd_log)=(0,2,26214),msize(pure_psd_log)=6
	
	AppendToGraph /W=Panel0#G1 $("fit_pure_psd_log")
	ModifyGraph /W=Panel0#G1 lsize(fit_pure_psd_log)=2,rgb(fit_pure_psd_log)=(65280,65280,16384)
	
	AppendToGraph /W=Panel0#G1 fit_lorentz vs fx_log
	ModifyGraph /W=Panel0#G1 mode(fit_lorentz)=2,rgb(fit_lorentz)=(0,0,0)
	
	AppendToGraph /W=Panel0#G1 fit_1pf vs fx_log
	ModifyGraph /W=Panel0#G1 mode(fit_1pf)=2,rgb(fit_1pf)=(65535,0,0)
	
	AppendToGraph /W=Panel0#G1 fit_lor_1pf_sum vs fx_log
	ModifyGraph /W=Panel0#G1 mode(fit_lor_1pf_sum)=2,rgb(fit_lor_1pf_sum)=(65535,43690,0)
	
	Label/W=Panel0#G1 bottom "log(f)"
	Label/W=Panel0#G1 left "log(PSD)"
	ModifyGraph/W=Panel0#G1 tick=2,mirror=1,fSize=24,axThick=3,lsize=4
	
	//		TextBox /W=Panel0#G1 /C/N=text0/Z=1/A=LT/X=1.00/Y=1.00 "1/f fit \rExp:\t\t" + num2str(slope) + " \rBeta:\t" + num2str(interc)
	TextBox /W=Panel0#G1 /C/N=text1/Z=1/A=RT/X=1.00/Y=1.00 "1/f + Lorentzian fit:"+ "\rExp_log:\t\t" + num2str(slope_log) + " \rBeta_log:\t" + num2str(interc_log) +"\rAmpl:\t\t" + num2str(ampl)  + " \rTau:\t\t" + num2str(tau) + " \rf0:\t\t" + num2str(1/2/pi/tau)
	
	DoUpdate
	
	//Save png
	//		SavePICT/O/N=Panel0#G1/P=home/E=-5/B=72 as NameOfWave(in_psd)+"outp_fit.png"
	//		SavePICT/O/N=Panel0#G0/P=home/E=-5/B=72 as NameOfWave(in_psd)+"comp.png"
End


Function Noise001(w,f) : FitFunc
	Wave w
	Variable f

	//CurveFitDialog/ These comments were created by the Curve Fitting dialog. Altering them will
	//CurveFitDialog/ make the function less convenient to work with in the Curve Fitting dialog.
	//CurveFitDialog/ Equation:
	//CurveFitDialog/ f(f) = log(A*(10^f)^B+abs(C)*abs(D)/(1+(abs(D)*2*pi*10^f)^2))
	//CurveFitDialog/ End of Equation
	//CurveFitDialog/ Independent Variables 1
	//CurveFitDialog/ f
	//CurveFitDialog/ Coefficients 4
	//CurveFitDialog/ w[0] = A
	//CurveFitDialog/ w[1] = B
	//CurveFitDialog/ w[2] = C
	//CurveFitDialog/ w[3] = D

	return log(w[0]*(10^f)^w[1]+abs(w[2])*abs(w[3])/(1+(abs(w[3])*2*pi*10^f)^2))
End


Function RC_filter(w,x) : FitFunc
	Wave w
	Variable x

	//CurveFitDialog/ These comments were created by the Curve Fitting dialog. Altering them will
	//CurveFitDialog/ make the function less convenient to work with in the Curve Fitting dialog.
	//CurveFitDialog/ Equation:
	//CurveFitDialog/ f(x) = thermal/sqrt(1+x^2*(2*pi*RC)^2)
	//CurveFitDialog/ End of Equation
	//CurveFitDialog/ Independent Variables 1
	//CurveFitDialog/ x
	//CurveFitDialog/ Coefficients 2
	//CurveFitDialog/ w[0] = thermal
	//CurveFitDialog/ w[1] = RC

	return w[0]/sqrt(1+x^2*(2*pi*w[1])^2)
End

//Original version (modified by Zoli 28/03/2023, see below)
//Function generate_equidistant_logscale(in, out)
//	Wave in
//	Wave out
//	NVAR NumDec
//	
//	Variable NumDec_temp
//	NumDec_temp=NumDec*log(2);
//		
//	Variable i = NumDec_temp*log(NumDec_temp)/log(2) + NumDec_temp
//	
//	Variable j = 0
//	Redimension/N=1 out
//	out[0]=in[floor(2^(i/NumDec_temp))-1]
//	//print out[0]
//
//	i += 1
//	do
//		Redimension/N=(NumPnts(out) + 1) out
//		out[NumPnts(out) - 1] =in[floor(2^(i/NumDec_temp))-1]
//		i+=1	
//	while (2^(i/NumDec_temp)-1 < numPnts(in))
//End

//Modified version
Function generate_equidistant_logscale(in, out)
	Wave in
	Wave out
	NVAR NumDec
	
	Variable bool_modified=1
	Variable NumDec_temp
	NumDec_temp=NumDec*log(2);
		
	Variable i = NumDec_temp*log(NumDec_temp)/log(2) + NumDec_temp
	
	if(bool_modified)
	Redimension/N=(floor(2^(i/NumDec_temp))-2) out
	out[]=in[p+1]
	//DC component excluded
	else
	Redimension/N=1 out
	out[0]=in[floor(2^(i/NumDec_temp))-1]
	endif

	i+=1
	do
		Redimension/N=(NumPnts(out) + 1) out
		out[NumPnts(out) - 1] =in[floor(2^(i/NumDec_temp))-1]
		i+=1	
	while (2^(i/NumDec_temp)-1 < numPnts(in))
	
End


Function Clear_Last(ba) : ButtonControl
	STRUCT WMButtonAction &ba
	Nvar ind=root:Temp_Results:ind
	switch( ba.eventCode )
		case 2: // mouse up
			if(ind>0)
			ind=ind-1
			endif
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


/////////////////////////////////////////////////////////////////////


Function SaveAll(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			case 2: // mouse up
			DoAlert /T="Save Results" 2,"Is actual name correct?"
			if(V_flag==1)
				Wave data_sel=root:data_sel
				data_sel[][0]=1
				data_sel[(DimSize(data_sel,0)-1)][0]=0
				
				ControlInfo SaveName
				String SaveName = s_value
				Save_Parameters2(SaveName)

			endif
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function SaveSelected(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			DoAlert /T="Save Results" 2,"Is actual name correct?"
			if(V_flag==1)
				ControlInfo SaveName
				String SaveName = s_value
				Save_Parameters2(SaveName)
			endif
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function Save_Parameters2(name)
	String name
	
	Wave data_sel=root:data_sel
	Wave /T In_data_names=root:In_data_names

	Wave  sel=root:Saved_Results:sel
	Wave /T Data_List=root:Saved_Results:Data_List
	InsertPoints DimSize(Data_List,0),1, :Saved_Results:Data_List
	
	Variable i=0
	//update waves Data_List and sel (Panel2 list of saved results)
	for(i=0;i<DimSize(Data_List,0);i=i+1)
		if(StringMatch(Data_List[i],name))
			//overwrite if saved name already exists
			Data_List[i]=name
			DeletePoints (DimSize(Data_List,0)-1),1, :Saved_Results:Data_List
			i=DimSize(Data_List,0)+1
		elseif(i==DimSize(Data_List,0)-1)
			Data_List[i]=name
			InsertPoints DimSize(sel,0),1, :Saved_Results:sel
		endif
	endfor
	
	//Data matrix with 5 Layers:
	//0: results
	//1: errors
	//2: original results (if filter was used)
	//3: original errors (if filter was used)
	//4: meta data and fitting details
	SumDimension /D=0 /dest=W_SumDimension data_sel
	if(W_SumDimension[0]>0)
		Make/O/N=(W_SumDimension[0],30,5)/D root:Saved_Results:$name+"_data"
		Make/O/T/N=(W_SumDimension[0],10,0) root:Saved_Results:$(name+"_files")
	else //nothing selected in "save selected" mode
		DoAlert /T="No data selected!" 0,"No data selected!"
	endif
	
	//new, saved data to be stored in here
	WAVE/T files=root:Saved_Results:$(name+"_files")
	WAVE data=root:Saved_Results:$(name+"_data")
	
	//old, temporary data are stored here
	WAVE/T files_temp=root:Temp_Results:files
	WAVE data_temp=root:Temp_Results:data
	
	SVAR userID = root:user
	SVAR comment = root:comment
	NVAR version = root:versionNumber
	
	Variable j=0
	//loop through all data
	for(i=0;i<DimSize(In_data_names,0)-1;i=i+1)
		//selected data
		if(data_sel[i][0]==1)
	
			//additional info to be saved in files
			files_temp[i][3]=userID
			files_temp[i][4]=comment
			files_temp[i][5]=date()
			files_temp[i][6]=num2str(version)
			
			//copy temp data to saved data matrix
			data[j][][0]=data_temp[i][q][0]
			data[j][][1]=data_temp[i][q][1]
			data[j][][4]=data_temp[i][q][4]
			
			files[j][][0]=files_temp[i][q][0]
			
			j=j+1
		endif
	endfor
	
	//copy original data to backup layers 2&3, this is needed for filtering
	data[][][2]=data[p][q][0]
	data[][][3]=data[p][q][1]
	
	Save/C/P=home files,data
	
End


Function FitFilter(data, ind)
	//FilterCode in binary coding
	Wave data
	Variable ind
	Variable FilterCode
	NVAR f1, f2
	WAVE outp_fit = root:Temp_Results:outp_fit
	WAVE outp_fit_x = root:Temp_Results:outp_fit_x
	
	Duplicate/RMD=[][ind, ind ]	outp_fit_x, root:Temp_Results:outp_fit_x_ind
	WAVE outp_fit_x_ind = root:Temp_Results:outp_fit_x_ind
		
	// no filter event
	//000000000
	FilterCode = 0  
	
	//'Only 1pf' fit error greater than parameter value
	//000000001		
	if(abs(data[ind][3][0])<abs(data[ind][3][1]))  //exponent
		FilterCode += 1 
	elseif(data[ind][4][0]<data[ind][4][1])  //beta
		FilterCode += 1 
	endif
	//1pf from 'Lor+1pf' fit error greater than parameter value
	//000000010
	if(abs(data[ind][5][0])<abs(data[ind][5][1]))  //exponent
		FilterCode += 2 
	elseif(data[ind][6][0]<data[ind][6][1])  //beta
		FilterCode += 2 
	endif
	//1pf from 'Lor+1pf' fit exponent not in range (-1.4)-(-0.6)
	//000000100
	if(data[ind][5][0]<-1.4 || data[ind][5][0]>-0.6)
		FilterCode += 4	
	endif
	//Lorentzian from 'Lor+1pf' fit error greater than parameter value 
	//000001000
	if(data[ind][7][0]<data[ind][7][1])	//amplitude
		FilterCode += 8 
	elseif(data[ind][8][0]<data[ind][8][1])  //tau
		FilterCode += 8 
	endif
	//NaN value in the fitted, logarithmic PSD (in_PSD-base_PSD)
	// = negative value in the linear PSD (in_PSD-base_PSD)
	//between integral limits f1, f2
	//000010000
	Variable fx1, fx2, fx1_ind, fx2_ind
	fx1 = log(f1)
	fx2 = log(f2)
	FindLevel/Q outp_fit_x_ind, fx1
	fx1_ind = floor(V_LevelX)
	FindLevel/Q outp_fit_x_ind, fx2
	fx2_ind = ceil(V_LevelX)
	FindValue/FNAN/RMD=[fx1_ind,fx2_ind][ind, ind] outp_fit
	if(V_row != -1) 
		FilterCode += 16 
	endif
	//fitted PSD not emerging from the base PSD
	//limit is when the 1/f^2 (Lorentzian with f0<f1) PSD reaches the base level at the f2 upper integration level
	//for clear 1/f spectra or Lorentzian with f0>f1 smaller differences is possible
	//data[ind][17][0]: int_noise_num = (int_PSD - int_base_noise)
	//data[ind][23][0]: int_base_noise
	//strict condition eased by alpha parameter
	//int_PSD/int_base_noise = int_noise_num/int_base_noise + 1
	//000100000
	Variable alpha = 5
	if((data[ind][17][0]/data[ind][23][0]) < ((ln(f2/f1) / (1-f1/f2)) * alpha - 1) )	
		FilterCode += 32 
	endif
//	print("(int_PSD - int_base_noise)/int_base_noise = "+ num2str(data[ind][17][0]/data[ind][23][0]))
	//CNR_Num vs TCNR
	////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	//001000000	
	//data[ind][12][0] vs data[ind][13][0]
	if(0)				
		FilterCode += 64 
	endif
	//Lor2Tot too small (Lor fit not reliable)
	//010000000
	if(data[ind][19][0]<0.05)	
		FilterCode += 128 
	endif
	//1pf2Tot too small (1/f fit not reliable)
	//10000000
	if(data[ind][20][0]<0.05)	
		FilterCode += 256 
	endif
	
	data[ind][24][0]=FilterCode
	
	KillWaves root:Temp_Results:outp_fit_x_ind
End


Function FilterDecode(DecValue)
	Variable DecValue
	String BinValue
	
	sprintf BinValue, "%b", DecValue
	
	String title = "FilterCode: " + BinValue
	String message = ""
	
	Variable slen= strlen(BinValue)


	//000000001
	//1
	if(str2num(BinValue[slen-1,slen-1]) == 1)
		message += "000000001: Only 1pf fit: Error greater than parameter value!\r"
	endif
	
	//000000010
	//2
	if(str2num(BinValue[slen-2,slen-2]) == 1)
		message += "000000010: (Lor+1pf), 1pf fit: Error greater than parameter value!\r"
	endif
	
	//000000100
	//4
	if(str2num(BinValue[slen-3,slen-3]) == 1)
		message += "000000100: (Lor+1pf), 1pf fit: Exponent is out of range!\r"
	endif
	
	//000001000
	//8
	if(str2num(BinValue[slen-4,slen-4]) == 1)
		message += "000001000: (Lor+1pf), Lorentzian fit: Error greater than parameter value!\r"
	endif
	
	//000010000
	//16
	if(str2num(BinValue[slen-5,slen-5]) == 1)
		message += "000010000: Negative values in normed PSD!\r"
	endif
	
	//000100000
	//32
	if(str2num(BinValue[slen-6,slen-6]) == 1)
		message += "000100000: PSD not emerging from base level!\r"
	endif
	
	//001000000
	//64
	if(str2num(BinValue[slen-7,slen-7]) == 1)
		message += "001000000: Numerical and analytical CNR are not in agreement!\r"
	endif
	
	//010000000
	//128
	if(str2num(BinValue[slen-8,slen-8]) == 1)
		message += "010000000: Lor2Tot is smaller than 5%!\r"
	endif
	
	//100000000
	//256
	if(str2num(BinValue[slen-9,slen-9]) == 1)
		message += "100000000: 1pf2Tot is smaller than 5%!\r"
	endif
	
	
	DoAlert /T=(title) 0, message

End



//////////////////////////// Panel2-Evaluation ////////////////////////////////////////////////////////

Window Panel2() : Panel
	PauseUpdate; Silent 1		// building window...
	NewPanel /W=(474,91,1855,619)
	ShowTools/A
	SetDrawLayer UserBack
	SetDrawEnv dash= 3,fsize= 16
	DrawText 0.0446841294298921,0.089171974522293,"POS"
	SetDrawEnv fsize= 16
	DrawText 0.0323574730354391,0.71656050955414,"NEG"
	DrawLine 0,0.5,1,0.5
	SetDrawEnv dash= 3,fsize= 16
	DrawText 0.0446841294298921,0.089171974522293,"POS"
	SetDrawEnv fsize= 16
	DrawText 0.0323574730354391,0.71656050955414,"NEG"
	DrawLine 0,0.5,1,0.5
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	DrawLine 0,2e-16,0,2e-14
	DrawLine 0,2e-16,0,2e-14
	SetDrawEnv dash= 3,fsize= 16
	DrawText 0.04,0.09,"POS"
	SetDrawEnv fsize= 16
	DrawText 0.04,0.6,"NEG"
	SetDrawEnv linethick= 2
	DrawLine 0,0.5,1,0.5
	SetDrawEnv fsize= 16
	DrawText 0.52,0.6,"SET"
	SetDrawEnv fsize= 16
	DrawText 0.35,0.6,"RESET"
	SetDrawEnv xcoord= prel,ycoord= prel,linethick= 2
	DrawLine 0,0.5,1,0.5
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	DrawText 776,174,"1."
	DrawText 776,199,"2."
	DrawText 776,224,"3."
	SetDrawEnv fsize= 14
	DrawText 0.02,0.1,""
	DrawText 1008,3,"SQL Control Panel"
	SetDrawEnv fsize= 18,textrgb= (65535,21845,0)
	DrawText 1093,28,"SQL Control Panel"
	SetDrawEnv linefgc= (52428,17472,1),fillpat= 3,fillfgc= (65535,21845,0)
	DrawRect 919,-9,929,560
	ListBox ResList,pos={512.00,39.00},size={238.00,378.00},proc=ListBox_Results
	ListBox ResList,listWave=root:Saved_Results:Data_List
	ListBox ResList,selWave=root:Saved_Results:sel,mode= 8,editStyle= 1
	Button MakeGraph,pos={52.00,459.00},size={400.00,50.00},proc=MKPLT,title="Make Graph"
	Button ClearRes,pos={659.00,426.00},size={92.00,25.00},proc=Clear_res,title="Clear Results"
	Button ClearRes,fColor=(65535,0,0)
	ListBox PlotLeft,pos={29.00,36.00},size={124.00,378.00}
	ListBox PlotLeft,listWave=root:Saved_Results:Data_types,mode= 6,selRow= 23
	ListBox PlotLeft,selCol= 0
	ListBox PlotRight,pos={201.00,36.00},size={124.00,378.00}
	ListBox PlotRight,listWave=root:Saved_Results:Data_types,mode= 5,selRow= 2
	ListBox PlotRight,selCol= 0
	ListBox PlotBottom,pos={359.00,38.00},size={124.00,378.00}
	ListBox PlotBottom,listWave=root:Saved_Results:Data_types,mode= 6,selRow= 0
	ListBox PlotBottom,selCol= 0
	Button UDC,pos={767.00,41.00},size={130.00,25.00},proc=RunUserDef,title="Run User Def Calc"
	CheckBox LogLeft,pos={29.00,420.00},size={59.00,15.00},title="Log axis",value= 0
	CheckBox LogRight,pos={201.00,423.00},size={59.00,15.00},title="Log axis"
	CheckBox LogRight,value= 0
	CheckBox LogBottom,pos={360.00,424.00},size={59.00,15.00},title="Log axis"
	CheckBox LogBottom,value= 0
	TitleBox LeftAxis,pos={28.00,11.00},size={53.00,23.00},title="Left Axis"
	TitleBox RightAxis,pos={200.00,10.00},size={61.00,23.00},title="Right Axis"
	TitleBox BottomAxis,pos={361.00,11.00},size={73.00,23.00},title="Bottom Axis"
	Button USEFLT,pos={767.00,71.00},size={130.00,25.00},proc=Filter,title="Use Filter"
	Button MKHIST,pos={767.00,101.00},size={130.00,25.00},proc=MakeHist,title="Make histograms"
	Button buttonevalcnr,pos={790.00,153.00},size={100.00,25.00},proc=CNR_eval,title="IV + CNR eval"
	SetVariable ivname,pos={767.00,234.00},size={130.00,18.00},title=" "
	SetVariable ivname,value= _STR:"",styledText= 1
	Button SwitchToData,pos={785.00,472.00},size={120.00,40.00},proc=SwitchToData,title="Switch to\rPanel0"
	Button SwitchToData,fColor=(65535,54611,49151)
	Button LoadRes,pos={512.00,426.00},size={92.00,25.00},proc=Load_res,title="Load Results"
	Button buttonevalcnr_save,pos={790.00,206.00},size={100.00,25.00},proc=SaveCNRres,title="Save Graphs"
	Button FitCNRbutton,pos={790.00,179.00},size={100.00,25.00},proc=CNR_fit_plot,title="Fit CNR data"
	ListBox materials_list,pos={949.00,41.00},size={162.00,138.00},proc=ListBoxProc
	ListBox materials_list,listWave=root:SQL:MaterialNames,mode= 6,selRow= 0
	ListBox materials_list,selCol= 0
	ListBox list0,pos={1128.00,40.00},size={229.00,139.00},proc=SQLListProc
	ListBox list0,listWave=root:SQL:SQLNames,selWave=root:SQL:SQL_sel,mode= 8
	Button sql_push_button,pos={1256.00,272.00},size={100.00,40.00},proc=SQLPushProc,title="Push data to sql"
	Button sql_push_button,fColor=(65535,16385,16385)
	Button import_button,pos={949.00,210.00},size={163.00,58.00},proc=SQLImportProc,title="Import data from sql"
	Button import_button,fColor=(3,52428,1)
	Slider owerwrite_slider,pos={1233.00,345.00},size={121.00,59.00},proc=SQLOverwriteProc
	Slider owerwrite_slider,limits={0,2,1},value= 2
	Slider owerwrite_slider,userTicks={:SQL:values,:SQL:ow_options}
	Button refresh_sql,pos={949.00,272.00},size={122.00,40.00},proc=SQLRefreshProc,title="Refresh"
	Button refresh_sql,fColor=(1,16019,65535)
	SetVariable setuser,pos={954.00,342.00},size={252.00,18.00},title="User"
	SetVariable setuser,value= root:SQL:user
	SetVariable setcomment,pos={951.00,317.00},size={405.00,18.00},title="Comment"
	SetVariable setcomment,value= root:SQL:comment
	TitleBox title0,pos={1128.00,185.00},size={228.00,83.00}
	TitleBox title0,variable= root:SQL:offsite_comment,fixedSize=1
	TitleBox usertitle,pos={950.00,184.00},size={161.00,23.00}
	TitleBox usertitle,variable= root:SQL:offsite_user,fixedSize=1
EndMacro


Function ListBox_Results(lba) : ListBoxControl
	STRUCT WMListboxAction &lba

	Variable row = lba.row
	Variable col = lba.col
	WAVE/T/Z listWave = lba.listWave
	WAVE/Z selWave = lba.selWave

	switch( lba.eventCode )
		case -1: // control being killed
			break
		case 1: // mouse down
			break
		case 3: // double click
			break
		case 4: // cell selection
			if (row >= 0)
				Wave/T dsel=root:Saved_Results:Data_List
				SetVariable ivname value = _STR:dsel[row]
			endif
			break
		case 5: // cell selection plus shift key
			break
		case 6: // begin edit
			break
		case 7: // finish edit
			break
		case 13: // checkbox clicked (Igor 6.2 or later)
			break
	endswitch

	return 0
End


Function Load_res(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			// click code here
			loadResults()
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function loadResults()
    SetDataFolder root:Saved_Results
    String message = "Select Results files!"
    String path
    String fileFilters = "All (.ibw):.ibw;"
    
    Open/P=home /D /R /MULT=1 /M=message/F=fileFilters refNum
    String outputPaths = S_fileName
 
    if (strlen(outputPaths) == 0)
        Print "Cancelled"
    else
        Variable numFilesSelected = ItemsInList(outputPaths, "\r")
        Variable i
        for(i=0; i<numFilesSelected; i+=1)
            path = StringFromList(i, outputPaths, "\r")
            Printf "%s\r", path
            
            LoadWave/H/Q path

            String name=""
            Variable data=GrepString(S_fileName, "data")
            Variable file=GrepString(S_fileName, "files")
            if (data == 1 && file == 0)
                string loaded1 = ReplaceString(";",S_waveNames,"")
                name=ReplaceString("_data",loaded1,"")
                LoadWave/H/Q S_path+ReplaceString("data",S_fileName,"files")
                
            endif
            if (data == 0 && file == 1)
                string loaded2 = ReplaceString(";",S_waveNames,"")
                name=ReplaceString("_files",loaded2,"")
                LoadWave/H/Q S_path+ReplaceString("files",S_fileName,"data")
                
            endif
            
            Wave  sel=root:Saved_Results:sel
            Wave /T Data_List=root:Saved_Results:Data_List
            Variable j=0
            InsertPoints DimSize(Data_List,0),1, root:Saved_Results:Data_List
            
            
            for(j=0;j<DimSize(Data_List,0);j=j+1)
                if(StringMatch(Data_List[i],name))
                    Data_List[j]=name
                    DeletePoints (DimSize(Data_List,0)-1),1, root:Saved_Results:Data_List
                    j=DimSize(Data_List,0)+1
                elseif(j==DimSize(Data_List,0)-1)
                Data_List[j]=name
                InsertPoints DimSize(sel,0),1, root:Saved_Results:sel
                endif
            endfor
            
        endfor
    endif
    
    SetDataFolder root:
End


Function MKPLT(ba) : ButtonControl
	STRUCT WMButtonAction &ba
	
	switch( ba.eventCode )
		case 2: // mouse up
		Plot()
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End
	

Function Plot()
	MultiThreadingControl setMode=0
	Wave data_sel=root:Saved_Results:sel
	Wave/T data_names=root:Saved_Results:Data_List
	Variable i=0
	Variable b=0,l=0,r=0
	ControlInfo /W=Panel2 PlotLeft
	l=V_Value
	ControlInfo /W=Panel2 PlotRight
	r=V_Value
	ControlInfo /W=Panel2 PlotBottom
	b=V_Value
	Wave/T Data_types=root:Saved_Results:Data_types
	string type
	if(r>=0)
		type=Data_types[l]+"_and_"+Data_types[r]//+"_vs_"+Data_types[b]
	else
		type=Data_types[l]+"_vs_"+Data_types[b]
	endif
	DoWindow /K $type
	Display as type
	DoWindow /C $type
	for (i=0;i<Dimsize(data_sel,0); i=i+1)
		if (data_sel[i][0]==1)
			Wave current=root:Saved_Results:$(data_names[i]+"_data")
			AppendToGraph /W=$type current[][l][0] vs current[][b][0]
			ModifyGraph rgb($(data_names[i]+"_data"))=(0,0,0)
			//ErrorBars/T=2/L=2 $data_names[i]+"_data" XY,wave=(current[*][b][1],current[*][b][1]),wave=(current[*][l][1],current[*][l][1])
			if(r>=0)
				AppendToGraph/R /W=$type current[][r][0] vs current[][b][0]	
				//ErrorBars/T=2/L=2 $data_names[i]+"_data#1" XY,wave=(current[*][b][1],current[*][b][1]),wave=(current[*][r][1],current[*][r][1])
			endif
		endif
	endfor
		
	ModifyGraph /W=$type width=340.157,height=226.772, log=0
	ModifyGraph /W=$type mode=3,marker=8,msize=5,mrkThick=2
	ModifyGraph  /W=$type tick=2,fSize=18,axThick=3
	Label  /W=$type bottom Data_types[b]
	Label  /W=$type left Data_types[l]
	
	ControlInfo /W=Panel2 LogLeft
	if(V_value==1)
		ModifyGraph /W=$type log(left)=1
	endif
	ControlInfo /W=Panel2 LogBottom
	if(V_value==1)
		ModifyGraph /W=$type log(bottom)=1
	endif
	if(r>=0)
		ControlInfo /W=Panel2 LogRight
		if(V_value==1)
			ModifyGraph /W=$type log(right)=1
		endif
		ModifyGraph axRGB(right)=(65535,0,0),tlblRGB(right)=(65535,0,0),alblRGB(right)=(65535,0,0)
		Label  /W=$type right Data_types[r]
	else
		ModifyGraph  /W=$type mirror=1
	endif
	
End


Function RunUserDef(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			UserDefCalc()
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function UserDefCalc()
	Wave data_sel=root:Saved_Results:sel
	Wave/T data_names=root:Saved_Results:Data_List
	Variable/G Snum=0
	Variable i=0
	for (i=0;i<Dimsize(data_sel,0); i=i+1)
		if (data_sel[i][0]==1)
			Wave current=root:Saved_Results:$(data_names[i]+"_data")
		
			//List of selected columns as input: {2,3,11,20} -> use 4 columns (column 2,3,11 and 20) as input; {6,7} -> use 2 columns (column 6 and 7) as input
			//Make/O in_waves={29} //Define input columns!
			//Variable j
			//for(j=0;j<DimSize(in_waves,0);j=j+1)
			//	Duplicate/O/RMD=[][in_waves[j],in_waves[j]] current $("in_wave" + num2str(j))
			//endfor
		
			//Results of "user defined calculation" could be stored in res1 or/and res2 (28th or/and 29th column of the original data matrix)
			//Calculation 1:
			//current[][28][0]=0//Put your code here!
			//current[][28][0]=12900/(current[p][2][0]-5900)

			//current[][14][3]=sqrt((current[p][4][3])^2*(1/(current[p][3][2]+1)*(30000^(current[p][3][2]+1)-50^(current[p][3][2]+1)))^2+current[p][3][3]^2*(current[p][4][2]/(current[p][3][2]+1)*(30000^(current[p][3][2]+1)*(ln(30000)-1/(current[p][3][2]+1))-50^(current[p][3][2]+1)*(ln(50)-1/(current[p][3][2]+1))))^2)
			//	current[][15][3]=sqrt((current[p][6][3])^2*(1/(current[p][5][2]+1)*(30000^(current[p][5][2]+1)-50^(current[p][5][2]+1)))^2+current[p][5][3]^2*(current[p][6][2]/(current[p][5][2]+1)*(30000^(current[p][5][2]+1)*(ln(30000)-1/(current[p][5][2]+1))-50^(current[p][5][2]+1)*(ln(50)-1/(current[p][5][2]+1))))^2)
			//current[][18][3]=sqrt(current[p][15][3]^2+current[p][16][3]^2)
			//current[][9][3]=sqrt((current[p][14][3]^2/4/current[p][14][2]/current[p][1][2]^2)+(current[p][1][3]^2*current[p][14][2]/current[p][1][2]^4)) 
			//current[][10][3]=sqrt((current[p][15][3]^2/4/current[p][15][2]/current[p][1][2]^2)+(current[p][1][3]^2*current[p][15][2]/current[p][1][2]^4)) 
			//current[][11][3]=sqrt((current[p][16][3]^2/4/current[p][16][2]/current[p][1][2]^2)+(current[p][1][3]^2*current[p][16][2]/current[p][1][2]^4)) 
			//current[][13][3]=sqrt((current[p][18][3]^2/4/current[p][18][2]/current[p][1][2]^2)+(current[p][1][3]^2*current[p][18][2]/current[p][1][2]^4)) 
			//
			//current[][19][3]=sqrt((current[p][16][3]/current[p][18][2])^2+(current[p][18][3]*current[p][16][2]/current[p][18][2]^2)^2)
			//current[][20][3]=sqrt((current[p][15][3]/current[p][18][2])^2+(current[p][18][3]*current[p][15][2]/current[p][18][2]^2)^2)
			//current[][21][3]=sqrt((current[p][16][3]/current[p][15][2])^2+(current[p][15][3]*current[p][16][2]/current[p][15][2]^2)^2)

			//Calculation 2:
			//current[][2][0]=current[p][1][0]*current[p][2][0]*1000
			
			//Put your code here!
			current[][29][0] = Snum//-current[p][0][0]
			Snum+=1
		endif
	endfor
End


Function Filter(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			UseFilter()
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function UseFilter()
	Wave data_sel=root:Saved_Results:sel
	Wave/T data_names=root:Saved_Results:Data_List
	Variable i=0
	for (i=0;i<Dimsize(data_sel,0); i=i+1)
		if (data_sel[i][0]==1)
			Wave current=root:Saved_Results:$(data_names[i]+"_data")
			//Filtered data will be stored in the original layer (=0, and errors =1), and the original (backup) data is stored in layer 2 (and error 3)
			//start fresh with the original data
			current[][][0]=current[p][q][2]
			current[][][1]=current[p][q][3]

		//FILTER
	filter_Lor(current)
		endif
	endfor
End


Function filter_Lor(in)
	Wave in

	Variable i=0

	for(i=0;i<DimSize(in,0);i=i+1)
		//Bias> 200mV, tau, Ampl >0; rel_err tau, Ampl <1; rel_err Int_curr_Lor <1
		if(abs(in[i][0][0])<499||abs(in[i][0][0])>501)
			in[i][][0]=0
			in[i][][1]=0
		else
			
		endif
	endfor

End


Function MakeHist(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			MakeLORHist()
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function MakeLORHist()
	Wave data_sel=root:Saved_Results:sel
	Wave/T data_names=root:Saved_Results:Data_List
	Variable i=0
	Variable BinDec=3
	Variable MinDec=3,MaxDec=10
	Variable j=0,ind=0
	Make /D/O/N=(BinDec*(MaxDec-MinDec)) :Saved_Results:LORHist
	Make /O/N=(BinDec*(MaxDec-MinDec)) :Saved_Results:LORnum2Totnum
	Make /D/O/N=(BinDec*(MaxDec-MinDec)) :Saved_Results:TCNRHist
	Make /D/O/N=(BinDec*(MaxDec-MinDec)) :Saved_Results:ExpHist
	Make /O/N=(BinDec*(MaxDec-MinDec)) :Saved_Results:ResHist

	Make /O/N=(BinDec*(MaxDec-MinDec)) :Saved_Results:FiltHist
	Make /O/N=(BinDec*(MaxDec-MinDec)) :Saved_Results:FiltTau
	Make /O/N=(BinDec*(MaxDec-MinDec)) :Saved_Results:FiltErr
	Make /D/O/N=(BinDec*(MaxDec-MinDec)) :Saved_Results:LORHistFilt
	Make /O/N=(BinDec*(MaxDec-MinDec)) :Saved_Results:LogScaleR
	Wave LORHist=:Saved_Results:LORHist
	Wave LORnum2Totnum=:Saved_Results:LORnum2Totnum
	Wave TCNRHist=:Saved_Results:TCNRHist
	Wave ExpHist=:Saved_Results:ExpHist
	//Wave TCNRHist=:Saved_Results:TCNRHist
	Wave ResHist=:Saved_Results:ResHist
	Wave FiltHist=:Saved_Results:FiltHist
	Wave FiltTau=:Saved_Results:FiltTau
	Wave FiltErr=:Saved_Results:FiltErr
	Wave LORHistFilt=:Saved_Results:LORHistFilt
	Wave LogScaleR=:Saved_Results:LogScaleR
	LORHist=0
	LORnum2Totnum=0
	TCNRHist=0
	ExpHist=0
	ResHist=0
	FiltHist=0
	FiltTau=0
	FiltErr=0
	LorHistFilt=0
	LogScaleR=10^(p/BinDec+MinDec)
	for (i=0;i<Dimsize(data_sel,0); i=i+1)
		if (data_sel[i][0]==1)
			Wave current=root:Saved_Results:$(data_names[i]+"_data")
		
			for(j=0;j<DimSize(current,0);j=j+1)
				ind=log(current[j][2][0])-MinDec
		
				if(ind>=0 && ind<=(MaxDec-MinDec))
					ind=floor(ind*BinDec)
					ResHist[ind]=ResHist[ind]+1
					LORHist[ind]=LORHist[ind]+current[j][19][0]
					if(current[j][19][0]>0)
							LORHist[ind]=LORHist[ind]+current[j][19][0]
							LORnum2Totnum[ind]=LORnum2Totnum[ind]+1
					endif
					
					if(current[j][29][0]==1)
						FiltTau[ind]=FiltTau[ind]+1
						FiltHist[ind]=FiltHist[ind]+1
					endif
					
					if(current[j][29][1]==1)
						FiltErr[ind]=FiltErr[ind]+1
						if(current[j][29][0]!=1)
							LORHistFilt[ind]=LORHistFilt[ind]+1//current[j][19][0]
							FiltHist[ind]=FiltHist[ind]+1
						endif
						
					endif
					
					TCNRHist[ind]=TCNRHist[ind]+current[j][13][0]
					ExpHist[ind]=ExpHist[ind]+current[j][5][0]
				endif
		
			endfor
		endif
	endfor
	//Normalize
	LORHistFilt=LORHistFilt/FiltErr
	LORHist=LORHist/ResHist
	TCNRHist=TCNRHist/ResHist
	ExpHist=ExpHist/ResHist
	//LORnum2Totnum=LORnum2Totnum/ResHist
		
End


Function CNR_eval(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			if (Load_IV() == 0)
				Eval_IV_CNR()
			endif
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function Load_IV()
	Variable refNum
	String message = "Select one IV .dat file"
	String path
	String fileFilters = "All (*.):.;"
	
	SetDataFolder root:
	NewDataFolder/O IV_Data
	
	NewPath/O/Q Path, "R:\Memristor"
	
	Open/P=Path /D /R /M=message/F=fileFilters refNum
	path = S_fileName
	String/G root:IV_Data:IV_file = S_fileName
 
	if (strlen(path) == 0)
		Print "Cancelled"
		return 1
	else
		Printf "%s\r", path
		SetDataFolder root:IV_Data
		
		reallyKillWaves(root:IV_Data:Bias__V_)
		reallyKillWaves(root:IV_Data:Current__A_)
		reallyKillWaves(root:IV_Data:Curve__)
			
		LoadWave/A/W/D/G/J/O/V={"	"," $",0,0}/L={2,3,0,0,0} path
		SetDataFolder root:
		return 0
	endif
End

Function Eval_IV_CNR()
	//plot IV curve and noise IV measurement together
	//IV file with header of 3 rows (samplerate, resistance, coloumn header)
	Wave data_sel=root:Saved_Results:sel
	Wave/T data_names=root:Saved_Results:Data_List
	Variable i, only1=0
	
	KillWindow/Z IV_noise
	KillWindow/Z Res_and_Noise
	KillWindow/Z Res_and_CNR
	KillWindow/Z ColorTable
	
	SetDataFolder root:IV_Data:
	
	for (i=0;i<Dimsize(data_sel,0); i=i+1)
		// Extract data from saved results
		if (data_sel[i][0]==1)
			if (only1)
				DoAlert/T="Evaluate IV and CNR" 0,"Select only 1 data!"
				return -1
			endif
			Wave data = root:Saved_Results:$(data_names[i]+"_data")
			//applied bias [mV]
			Duplicate/O/R=[0,*][0,0] data bias_sample
			Redimension/N=(-1,0) bias_sample
			//current
			Duplicate/O/R=[0,*][1,1] data meas_current 
			Redimension/N=(-1,0) meas_current
			//resistance
			Duplicate/O/R=[0,*][2,2] data meas_res
			Redimension/N=(-1,0) meas_res
			//bias on sample [V]
			Duplicate/O bias_sample bias_calc
//			Wave bias_calc = bias_calc
			bias_calc = meas_current*meas_res
			
			Duplicate/O bias_calc bias_calc_neg
//			Wave bias_calc_neg = root:bias_calc_neg
			bias_calc_neg = bias_calc_neg*(-1)
			
			//current noise
			Duplicate/O/R=[0,*][17,17] data int_curr_num
			Redimension/N=(-1,0) int_curr_num
			//CNR
			Duplicate/O/R=[0,*][12,12] data curr_noise_ratio_num
			Redimension/N=(-1,0) curr_noise_ratio_num
			
			// delete 0mV datapoint
			FindValue/V=0 bias_sample
			if(V_Value!=-1)
				DeletePoints V_Value, 1, bias_sample, meas_current, meas_res, bias_calc, bias_calc_neg, int_curr_num, curr_noise_ratio_num
			endif
			
			only1 = 1
		endif
	endfor
	
	//automatic coloring
	Make/O/N=(dimSize(bias_calc,0)) Color_ON_OFF
	Variable Val=-1
	for(i=0;i<dimSize(Color_ON_OFF,0);i+=1)
		Color_ON_OFF[i] = Val
		if(i==round(dimSize(Color_ON_OFF,0)/4))
			Val = 1
		elseif(i==round(dimSize(Color_ON_OFF,0)*3/4))
			Val = -1
		endif
	endfor 
	
	
	// Graph: IV curve with noise measurement coordinates
		
	// IV measurement loaded earlier from file (Load_IV())
	Wave Current__A_
	Wave Bias__V_ 
	Wave Color_ON_OFF
	
	Display/N=IV_noise/W=(201,39.5,751.5,429.5) Current__A_ vs Bias__V_
	AppendToGraph meas_current vs bias_calc

	ModifyGraph width=400,height=300
	ModifyGraph mode(meas_current)=3
	ModifyGraph lSize(Current__A_)=3
	ModifyGraph rgb(Current__A_)=(0,52224,26368)
	ModifyGraph msize(meas_current)=5
	ModifyGraph mrkThick(meas_current)=2
	ModifyGraph grid=1
	ModifyGraph tick=2
	ModifyGraph zero=1
	ModifyGraph mirror=1
	ModifyGraph fSize=16
	ModifyGraph standoff=0
	ModifyGraph axThick=2
	ModifyGraph gridRGB=(30583,30583,30583)
	ModifyGraph zeroThick=1
	Label left "Current (\\u A)"
	Label bottom "Bias (V)"
	ModifyGraph zColor(meas_current)={Color_ON_OFF,-1,1,RedWhiteBlue,0}
	SetDrawEnv fsize= 14
	SVAR IV_file
	DrawText 0.02,0.1,IV_file
	
	
	// Graph: Resistance and Current Noise
	Display/W=(228,68.75,809.25,449.75)/R/N=Res_and_Noise int_curr_num vs bias_calc
	AppendToGraph meas_res vs bias_calc	
	AppendToGraph/R=Int_Neg int_curr_num vs bias_calc_neg
	AppendToGraph/L=Res_Neg meas_res vs bias_calc_neg
	ModifyGraph width=400,height=300
	ModifyGraph mode=3
	ModifyGraph marker(meas_res)=19,marker(meas_res#1)=19
	ModifyGraph rgb(int_curr_num)=(0,0,0),rgb(int_curr_num#1)=(0,0,0)
	ModifyGraph zColor(int_curr_num)={Color_ON_OFF,-1,1,RedWhiteBlue256},zColor(meas_res)={Color_ON_OFF,-1,1,RedWhiteBlue256}
	ModifyGraph zColor(int_curr_num#1)={Color_ON_OFF,-1,1,RedWhiteBlue256},zColor(meas_res#1)={Color_ON_OFF,-1,1,RedWhiteBlue256}
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror(bottom)=1
	ModifyGraph fSize=16
	ModifyGraph standoff=0
	ModifyGraph axThick=2
	ModifyGraph lblPos(right)=80,lblPos(left)=80,lblPos(Int_Neg)=80,lblPos(Res_Neg)=80
	ModifyGraph lblRot(right)=180,lblRot(Int_Neg)=180
	ModifyGraph freePos(Int_Neg)={0,kwFraction}
	ModifyGraph freePos(Res_Neg)={0,kwFraction}
	ModifyGraph axisEnab(right)={0.5,1}
	ModifyGraph axisEnab(left)={0.5,1}
	ModifyGraph axisEnab(Int_Neg)={0,0.5}
	ModifyGraph axisEnab(Res_Neg)={0,0.5}
	ModifyGraph grid=2, gridRGB=(30583,30583,30583)
	Label right "ΔI\\B\\K(0,0,0)Num \\M(A\\S2\\M/Hz)"
	Label bottom "Bias (V)"
	Label left "Res (Ω)"
	Label Int_Neg "ΔI\\B\\K(0,0,0)Num \\M(A\\S2\\M/Hz)"
	Label Res_Neg "Res (Ω)"
	
	DoUpdate 
	GetAxis/Q bottom
	Variable x1 = V_min
	Variable x2 = x1*10
	SetDrawLayer UserFront
	SetDrawEnv xcoord= bottom,ycoord= right
	DrawLine x1,2e-16,x2,2e-14
	SetDrawEnv xcoord= bottom,ycoord= Int_Neg,dash= 3
	DrawLine x1,2e-16, x2,2e-14
	SetDrawEnv dash= 3,fsize= 16
	DrawText 0.04,0.09,"POS"
	SetDrawEnv fsize= 16
	DrawText 0.04,0.6,"NEG"
	SetDrawEnv linethick= 2.00
	DrawLine 0,0.5,1,0.5
	
	
	
	// Graph: Resistance and Current Noise Ratio
	Display/N=Res_and_CNR/L/B=Bias_neg /W=(266.25,154.25,814.5,546.5) curr_noise_ratio_num vs bias_calc
	AppendToGraph/R=CNR_neg/B curr_noise_ratio_num vs bias_calc_neg
	AppendToGraph/R=Res_neg/B meas_res vs bias_calc_neg
	AppendToGraph/L=Res/B=Bias_neg meas_res vs bias_calc
	
	ModifyGraph mode=4,lstyle=3
	ModifyGraph lSize=1.5
	ModifyGraph mrkThick=1.5
	ModifyGraph zColor(curr_noise_ratio_num)={Color_ON_OFF,-1,1,RedWhiteBlue}
	ModifyGraph zColor(curr_noise_ratio_num#1)={Color_ON_OFF,-1,1,RedWhiteBlue}
	ModifyGraph zColor(meas_res)={Color_ON_OFF,-1,1,RedWhiteBlue},zColor(meas_res#1)={Color_ON_OFF,-1,1,RedWhiteBlue}
	ModifyGraph log(left)=1,log(Bias_neg)=1,log(CNR_neg)=1,log(bottom)=1
	ModifyGraph marker=8
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph noLabel(CNR_neg)=2,noLabel(Res_neg)=2
	ModifyGraph fSize=16
	ModifyGraph lblMargin(left)=11
	ModifyGraph axThick=2
	ModifyGraph lblPos(left)=90,lblPos(Bias_neg)=55,lblPos(bottom)=55,lblPos(Res)=90
	ModifyGraph freePos(Bias_neg)={0,left}
	ModifyGraph freePos(CNR_neg)={0,Bias_neg}
	ModifyGraph freePos(Res_neg)={0,Bias_neg}
	ModifyGraph freePos(Res)={0,kwFraction}
	ModifyGraph axisEnab(left)={0,0.5}
	ModifyGraph axisEnab(Bias_neg)={0.5,1}
	ModifyGraph axisEnab(CNR_neg)={0,0.5}
	ModifyGraph axisEnab(bottom)={0,0.5}
	ModifyGraph axisEnab(Res_neg)={0.5,1}
	ModifyGraph axisEnab(Res)={0.5,1}
	ModifyGraph grid=2, gridRGB=(30583,30583,30583)
	Label left "∆I/I"
	Label Bias_neg "V\\Bbias\\M (V)"
	Label bottom "V\\Bbias\\M (V)"
	Label Res " R\\BM\\M (\\u Ω)"
	SetAxis/A/R bottom
	SetDrawLayer UserFront
	SetDrawEnv fsize= 16
	DrawText 0.52,0.6,"SET"
	SetDrawEnv fsize= 16
	DrawText 0.35,0.6,"RESET"
	SetDrawEnv xcoord= prel,ycoord= prel,linethick= 2
	DrawLine 0,0.5,1,0.5
		
	//Open ColorTable to edit
	Edit/W=(5.25,41.75,210,622.25)/N=ColorTable Color_ON_OFF
	
	SetDataFolder root:
End


Function CNR_fit_plot(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			FitCNR()
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End

Function CNRfit(w,x) : FitFunc
	Wave w
	Variable x

	//CurveFitDialog/ These comments were created by the Curve Fitting dialog. Altering them will
	//CurveFitDialog/ make the function less convenient to work with in the Curve Fitting dialog.
	//CurveFitDialog/ Equation:
	//CurveFitDialog/ f(x) = max(a*x+b,c*x+d)
	//CurveFitDialog/ End of Equation
	//CurveFitDialog/ Independent Variables 1
	//CurveFitDialog/ x
	//CurveFitDialog/ Coefficients 4
	//CurveFitDialog/ w[0] = a
	//CurveFitDialog/ w[1] = b
	//CurveFitDialog/ w[2] = c
	//CurveFitDialog/ w[3] = d

	return max(w[0]*x+w[1],w[2]*x+w[3])
End


Function FitCNR()
	Wave data_sel=root:Saved_Results:sel
	Wave/T data_names=root:Saved_Results:Data_List
	Variable i, only1=0, selectedDataInd
	
	SetDataFolder root:IV_Data:
	
	for (i=0;i<Dimsize(data_sel,0); i=i+1)
		// Extract data from saved results
		if (data_sel[i][0]==1)
			if (only1)
				DoAlert/T="Evaluate IV and CNR" 0,"Select only 1 data!"
				return -1
			endif
			Wave data = root:Saved_Results:$(data_names[i]+"_data")
			//applied bias [mV]
			Duplicate/O/R=[0,*][0,0] data bias_sample
			Redimension/N=(-1,0) bias_sample
			//current
			Duplicate/O/R=[0,*][1,1] data meas_current 
			Redimension/N=(-1,0) meas_current
			//resistance
			Duplicate/O/R=[0,*][2,2] data meas_res
			Redimension/N=(-1,0) meas_res
			//bias on sample [V]
			Duplicate/O bias_sample bias_calc
//			Wave bias_calc = bias_calc
			bias_calc = meas_current*meas_res
			
			Duplicate/O bias_calc bias_calc_neg
//			Wave bias_calc_neg = root:bias_calc_neg
			bias_calc_neg = bias_calc_neg*(-1)
			
			//current noise
			Duplicate/O/R=[0,*][17,17] data int_curr_num
			Redimension/N=(-1,0) int_curr_num
			//CNR
			Duplicate/O/R=[0,*][12,12] data curr_noise_ratio_num
			Redimension/N=(-1,0) curr_noise_ratio_num
			
			// delete 0mV datapoint
			FindValue/V=0 bias_sample
			if(V_Value!=-1)
				DeletePoints V_Value, 1, bias_sample, meas_current, meas_res, bias_calc, bias_calc_neg, int_curr_num, curr_noise_ratio_num
			endif
			
			only1 = 1
			selectedDataInd = i
		endif
	endfor
		
	Variable jpos = 0, jneg = 0
	Wave Color_ON_OFF = root:IV_Data:Color_ON_OFF
	Make/O/N=0 tempCNR_pos, tempCNR_neg, tempbias_pos, tempbias_neg
	for (i=0;i<Dimsize(Color_ON_OFF,0); i=i+1)
		if (Color_ON_OFF[i]==1)
			if(bias_calc[i]>0)
				Redimension/N=(jpos+1) tempCNR_pos,tempbias_pos
				tempCNR_pos[jpos] = curr_noise_ratio_num[i]
				tempbias_pos[jpos] = bias_calc[i]
				jpos += 1
			else
				Redimension/N=(jneg+1)tempCNR_neg, tempbias_neg
				tempCNR_neg[jneg] = curr_noise_ratio_num[i]
				tempbias_neg[jneg] = bias_calc_neg[i]
				jneg += 1
			endif
		endif
	endfor
	
	tempCNR_pos = log(tempCNR_pos)
	tempCNR_neg = log(tempCNR_neg)
	
	Make/D/O/N=4 eps_CNR = 0.01
	Make/D/O/N=4 W_coef_CNR
	//initial parameters: y = max(ax+b, cx+d)
	W_coef_CNR[0] = 0 // a
	W_coef_CNR[1] = -3 // b
	W_coef_CNR[2] = 5 // c
	W_coef_CNR[3] = -5 // d
	
	Variable breakV_pos, breakV_neg
	FuncFit/Q CNRfit W_coef_CNR tempCNR_pos /X=tempbias_pos /D /E=eps_CNR
	breakV_pos = (W_coef_CNR[3]-W_coef_CNR[1])/(W_coef_CNR[0]-W_coef_CNR[2])
	FuncFit/Q CNRfit W_coef_CNR tempCNR_neg /X=tempbias_neg /D /E=eps_CNR
	breakV_neg = (W_coef_CNR[3]-W_coef_CNR[1])/(W_coef_CNR[0]-W_coef_CNR[2])
	
	print("Break at V+ = " + num2str(breakV_pos) + " V")
	print("Break at V- = " + num2str(-breakV_neg) + " V")
	
	// write breakpoints into wave
	Make/N=(DimSize(data_sel,0))/O breakVoltage_POS 
	Make/N=(DimSize(data_sel,0))/O breakVoltage_NEG
	breakVoltage_POS[selectedDataInd] = breakV_pos
	breakVoltage_NEG[selectedDataInd] = -breakV_neg
	// copy data list, create wave for threshold voltages (for now: manual filling)
	Make/N=(DimSize(data_sel,0))/O ThresholdVoltage_NEG
	Make/N=(DimSize(data_sel,0))/O ThresholdVoltage_POS
	Duplicate/O root:Saved_Results:Data_List Data_List
	
	KillWaves tempCNR_pos, tempCNR_neg, tempbias_pos, tempbias_neg
	
	// scale back from logarithmic value
	Wave fit_tempCNR_pos
	Wave fit_tempCNR_neg
	fit_tempCNR_pos = 10^(fit_tempCNR_pos)
	fit_tempCNR_neg = 10^(fit_tempCNR_neg)
	
	RemoveFromGraph/W=Res_and_CNR/Z fit_tempCNR_neg
	RemoveFromGraph/W=Res_and_CNR/Z fit_tempCNR_pos

	AppendToGraph/W=Res_and_CNR/L=left/B=bottom fit_tempCNR_neg
	AppendToGraph/W=Res_and_CNR/R=CNR_neg/B=Bias_neg fit_tempCNR_pos
	
	ModifyGraph lsize(fit_tempCNR_neg)=1.2,rgb(fit_tempCNR_neg)=(0,0,0),lsize(fit_tempCNR_pos)=1.2,rgb(fit_tempCNR_pos)=(0,0,0)
	ModifyGraph lstyle(fit_tempCNR_neg)=7, lstyle(fit_tempCNR_pos)=7

	SetDataFolder root:
End


Function SaveCNRres(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			ControlInfo ivname
			print S_value
			SavePICT/WIN=IV_noise/P=home/E=-5/B=72 as S_value+"_IV.png"
			SavePICT/WIN=Res_and_Noise/P=home/E=-5/B=72 as S_value+"_res_and_noise.png"
			SavePICT/WIN=Res_and_CNR/P=home/E=-5/B=72 as S_value+"_res_and_CNR.png"

			KillWindow/Z ColorTable
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function reallyKillWaves(w)
   Wave w
   if(waveExists(w))
      String name=getWavesDataFolder(w,2)
      killAllGraphsWithWave(name)
      killAllTablesWithWave(name)
      KillWaves  w
   endif
end  


Function killAllGraphsWithWave(name)
   String name
   
   String graphs=WinList("*",";","WIN:1") // A list of all graphs
   Variable isDisplayed
   Variable i,j
   for(i=0;i<itemsinlist(graphs);i+=1)
		String graph = stringfromlist(i,graphs)
	   	checkDisplayed/W=$graph $name
	      	isDisplayed = V_flag
	   	if(isDisplayed)
	      	KillWindow $graph
	   	endif
   endfor
end


Function killAllTablesWithWave(name)
   String name
   String tables=WinList("*",";","WIN:2") // A list of all tables
   Variable i
   for(i=0;i<itemsinlist(tables);i+=1)
   		String table = stringfromlist(i,tables)
   		checkDisplayed/W = $table $name
		if( V_flag == 1)
   			KillWindow $table
   		endif
   endfor
end 

///////////////////////////////
//SQL code
///////////////////////////////
Function/S getSQLConnectionString()

	String connectionStr = "DSN=igor_postgres;UID=postgres;PWD=Zia9DrEsbyCvQqvD"
	return connectionStr
	
End

Function execSQLCommand(statement)
	String statement
	String connectionStr = getSQLConnectionString()
	
	SQLHighLevelOp /CSTR={connectionStr,SQL_DRIVER_COMPLETE} /o statement
End

Function pushSelectedToSQLServer()
	KillDataFolder /Z root:SQL:Import
	NewDataFolder root:SQL:Import
	SetDataFolder root:SQL:Import
	
	Wave data_sel=root:Saved_Results:sel
	Wave/T data_names=root:Saved_Results:Data_List
	
	
	Variable i
	Variable j
	variable d=0
	String statement = ""
	for (i=0;i<Dimsize(data_sel,0); i=i+1)
		Variable allow_write = 1
		if (data_sel[i][0]==1)
			execSQLCommand("SELECT \"Name\",max(\"Comment\") as com,max(\"User\") as usr FROM measurement_data WHERE \"Name\"='" + data_names[i] + "' GROUP BY \"Name\";")
			if (DimSize(root:SQL:Import:Name,0) > 0)
				Nvar sop = root:SQL:curr_ow_op

				if (sop == 2)
					Wave/T com2 = root:SQL:Import:com
					Wave/T usr2 = root:SQL:Import:usr
					
					String cw = com2[0]
					String uw = usr2[0]
					DoAlert /T="Overwrite?" 2,"Data with this name '" + data_names[i] + "' already exists in the database. User: '" + uw + "', Comment: '" + cw + "'. Overwrite?"
					if(V_flag==1)
						statement += "DELETE FROM measurement_data WHERE \"Name\"='" + data_names[i] + "';"
						statement += "DELETE FROM errors WHERE \"Name\"='" + data_names[i] + "';"
						statement += "DELETE FROM original_errors WHERE \"Name\"='" + data_names[i] + "';"
						statement += "DELETE FROM original_results WHERE \"Name\"='" + data_names[i] + "';"
						statement += "DELETE FROM layer4 WHERE \"Name\"='" + data_names[i] + "';"
					else
						allow_write = 0
					endif
				endif
				
				if (sop == 0)
					statement += "DELETE FROM measurement_data WHERE \"Name\"='" + data_names[i] + "';"
					statement += "DELETE FROM errors WHERE \"Name\"='" + data_names[i] + "';"
					statement += "DELETE FROM original_errors WHERE \"Name\"='" + data_names[i] + "';"
					statement += "DELETE FROM original_results WHERE \"Name\"='" + data_names[i] + "';"
					statement += "DELETE FROM layer4 WHERE \"Name\"='" + data_names[i] + "';"
				endif
				
				if (sop == 1)
					allow_write = 0
				endif
				
				if (sop > 2 || sop < 0)
					print("Unknown operator, database write operation canceled")
					allow_write = 0
				endif
			
			endif
			KillWaves/Z root:SQL:Import:Name,root:SQL:Import:com,root:SQL:Import:usr
			
			if (allow_write == 1)
				Wave data = root:Saved_Results:$(data_names[i]+"_data")
				Wave/T files_o = root:Saved_Results:$(data_names[i]+"_files")
				String ftext
				if (dimsize(files_o,1)>1)
					ftext=data_names[i]+"_files"
				else
					Make/T/O/N=(dimsize(files_o,0),10) root:Saved_Results:$(data_names[i]+"_files_newformat_compatibility")
					ftext = data_names[i]+"_files_newformat_compatibility"
					Wave/T files_tmp = root:Saved_Results:$(data_names[i]+"_files_newformat_compatibility")
					Variable l
					for (l=0;l<dimsize(files_o,0);l++)
						files_tmp[l][0] = files_o[l]
					endfor
				endif
				Wave/T files = root:Saved_Results:$(ftext)
				Svar material = root:SQL:currMaterial
				for (j = 0; j < Dimsize(data,0); j = j+1)
					Variable o = 0
					for (o = 0; o < 4; o = o+1)
						String table = ""
						if (o == 0)
							table = "measurement_data"
						endif
						if (o == 1)
							table = "errors"
						endif
						if (o == 2)
							table = "original_results"
						endif
						if (o == 3)
							table = "original_errors"
						endif
						//if(DimSize(data,2)==4)
						//	d=2
						//endif
						d = 0

						Svar usr = root:SQL:user
						Svar com = root:SQL:comment
						statement = statement + "INSERT INTO " + table + " (\"Name\"," + \
						"\"Filename\"," + \
						"\"Comment\"," + \
						"\"User\"," + \
						"\"Bias\"," + \
						"\"Current\"," + \
						"\"Resistance\"," + \
						"\"Exponent\"," + \
						"\"Beta\"," + \
						"\"Exp_Lor\"," + \
						"\"Beta_Lor\"," + \
						"\"Ampl_Lor\"," + \
						"\"Tau_Lor\"," + \
						"\"CNR_1pf\"," + \
						"\"CNR_1pf_Lor\"," + \
						"\"CNR_Lor\"," + \
						"\"CNR_Num\"," + \
						"\"TCNR\"," + \
						"\"Int_Noise_1pf\"," + \
						"\"Int_Noise_1pf_L\"," + \
						"\"Int_Noise_Lor\"," + \
						"\"Int_Noise_Num\"," + \
						"\"Int_Noise_Tot\"," + \
						"\"Lor2Tot\"," + \
						"\"N1pf2Tot\"," + \
						"\"LorTo1pf\"," + \
						"\"UserDef1\"," + \
						"\"UserDef2\"," + \
						"\"f1\"," + \
						"\"f2\"," + \
						"\"Timestamp\"," + \
						"\"Material\"," + \
						"\"col24\"," + \
						"\"col25\"," + \
						"\"col26\"," + \
						"\"col27\"," + \
						"\"measured_file\"," + \
						"\"base_psd\"," + \
						"\"eval_date_str\"," + \
						"\"version\"" + \
						\
						") VALUES ('" + data_names[i] + "','" + \
						files[j][0] + "'," + \
						"'" + files[j][3] + "'," + \
						"'" + files[j][4] + "'," + \
						num2str(data[j][0][o]) + "," + \
						num2str(data[j][1][o]) + "," + \
						num2str(data[j][2][o]) + "," + \
						num2str(data[j][3][o]) + "," + \
						num2str(data[j][4][o]) + "," + \
						num2str(data[j][5][o]) + "," + \
						num2str(data[j][6][o]) + "," + \
						num2str(data[j][7][o]) + "," + \
						num2str(data[j][8][o]) + "," + \
						num2str(data[j][9][o]) + "," + \
						num2str(data[j][10][o]) + "," + \
						num2str(data[j][11][o]) + "," + \
						num2str(data[j][12][o]) + "," + \
						num2str(data[j][13][o]) + "," + \
						num2str(data[j][14][o]) + "," + \
						num2str(data[j][15][o]) + "," + \
						num2str(data[j][16][o]) + "," + \
						num2str(data[j][17][o]) + "," + \
						num2str(data[j][18][o]) + "," + \
						num2str(data[j][19][o]) + "," + \
						num2str(data[j][20][o]) + "," + \
						num2str(data[j][21][o]) + "," + \
						num2str(data[j][28][o]) + "," + \
						num2str(data[j][29][o]) + "," + \
						num2str(data[j][22][o]) + "," + \
						num2str(data[j][23][o]) + "," + \
						"current_timestamp" + "," + \
						"'" + material + "'," + \
						num2str(data[j][24][o]) + "," + \
						num2str(data[j][25][o]) + "," + \
						num2str(data[j][26][o]) + "," + \
						num2str(data[j][27][o]) + "," + \
						"'" + files[j][1] + "'," + \
						"'" + files[j][2] + "'," + \
						"'" + files[j][5] + "'," + \
						"'" + files[j][6] + "'" + \
						");"
					endfor
					if (dimsize(data,2) == 5)
						//layer4 (metadata)
						statement = statement + "INSERT INTO layer4 (\"Name\"," + \
						"\"Rserial\"," + \
						"\"Gain\"," + \
						"\"CutStart\"," + \
						"\"CutStop\"," + \
						"\"df\"," + \
						"\"NumAvg\"," + \
						"\"int_limit_f1\"," + \
						"\"int_limit_f2\"," + \
						"\"fitLor_f0_Min\"," + \
						"\"fitLor_f0_Max\"," + \
						"\"fit_range_log1\"," + \
						"\"fit_range_log2\"," + \
						"\"fit_NumDec\"," + \
						"\"fit_beta_initial\"," + \
						"\"fit_f0_initial\"," + \
						"\"arb1\"," + \
						"\"arb2\"," + \
						"\"arb3\"," + \
						"\"arb4\"," + \
						"\"arb5\"," + \
						"\"arb6\"," + \
						"\"arb7\"," + \
						"\"arb8\"," + \
						"\"arb9\"," + \
						"\"arb10\"," + \
						"\"arb11\"," + \
						"\"arb12\"," + \
						"\"arb13\"," + \
						"\"arb14\"," + \
						"\"arb15\"" + \
						") VALUES ('" + data_names[i] + "'," + \
						num2str(data[j][0][4]) + "," + \
						num2str(data[j][1][4]) + "," + \
						num2str(data[j][2][4]) + "," + \
						num2str(data[j][3][4]) + "," + \
						num2str(data[j][4][4]) + "," + \
						num2str(data[j][5][4]) + "," + \
						num2str(data[j][6][4]) + "," + \
						num2str(data[j][7][4]) + "," + \
						num2str(data[j][8][4]) + "," + \
						num2str(data[j][9][4]) + "," + \
						num2str(data[j][10][4]) + "," + \
						num2str(data[j][11][4]) + "," + \
						num2str(data[j][12][4]) + "," + \
						num2str(data[j][13][4]) + "," + \
						num2str(data[j][14][4]) + "," + \
						num2str(data[j][15][4]) + "," + \
						num2str(data[j][16][4]) + "," + \
						num2str(data[j][17][4]) + "," + \
						num2str(data[j][18][4]) + "," + \
						num2str(data[j][19][4]) + "," + \
						num2str(data[j][20][4]) + "," + \
						num2str(data[j][21][4]) + "," + \
						num2str(data[j][22][4]) + "," + \
						num2str(data[j][23][4]) + "," + \
						num2str(data[j][24][4]) + "," + \
						num2str(data[j][25][4]) + "," + \
						num2str(data[j][26][4]) + "," + \
						num2str(data[j][27][4]) + "," + \
						num2str(data[j][28][4]) + "," + \
						num2str(data[j][29][4]) + ");"
					endif
				endfor
			endif
		endif
		KillWaves/Z root:Saved_Results:$(data_names[i]+"_files_newformat_compatibility")
	endfor
	SetDataFolder root:
	KillDataFolder /Z root:SQL:Import
	if (CmpStr(statement,"") != 0)
		statement = ReplaceString("NaN",statement,"NULL")
		statement = ReplaceString("inf",statement,"NULL")
		execSQLCommand(statement)
	endif
End

Function SQLRefreshProc(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			SQLRefresh()
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function ListBoxProc(lba) : ListBoxControl
	STRUCT WMListboxAction &lba

	Variable row = lba.row
	Variable col = lba.col
	WAVE/T/Z listWave = lba.listWave
	WAVE/Z selWave = lba.selWave

	switch( lba.eventCode )
		case -1: // control being killed
			break
		case 1: // mouse down
			break
		case 3: // double click
			
			break
		case 4: // cell selection
			Svar mat = root:SQL:currMaterial
			mat = listWave[row]
			SQLRefresh()
			break
		case 5: // cell selection plus shift key
			break
		case 6: // begin edit
			break
		case 7: // finish edit
			break
		case 13: // checkbox clicked (Igor 6.2 or later)
			break
	endswitch

	return 0
End


Function SQLRefresh()
	SetDataFolder("root:SQL")
	
	//Refresh material list
	execSqlCommand("select \"Name\" as \"MaterialNames\" from materials")

	//Refresh measurement list
	Svar mat = root:SQL:currMaterial
	
	execSqlCommand("select \"Name\" as \"SQLNames\" from (select \"Name\",max(\"Timestamp\") as ts,max(\"Id\") as idd from measurement_data where \"Material\"='"+mat+"' group by \"Name\" order by ts desc,idd desc) as res")
	Wave /T SQLNames=root:SQL:SQLNames
	Wave SQL_sel=root:SQL:SQL_sel
	String sqlsel = ""
	variable i = 0
	for(i = 0; cmpstr("",sqlsel)==0 && i < dimsize(SQL_sel,0);i++)
		if (SQL_sel[i] == 1)
			sqlsel = SQLNames[i]
		endif
	endfor
	
	if (cmpstr("",sqlsel) != 0)
		execSqlCommand("select max(\"Comment\") as \"com\",max(\"User\") as \"usr\" from measurement_data where \"Name\"='" + sqlsel + "'")
		//print("select max(\"Comment\") as \"com\",max(\"User\") as \"usr\" from measurement_data where \"Name\"='" + sqlsel + "'")
		Svar oc = root:SQL:offsite_comment
		Svar ou = root:SQL:offsite_user
		Wave /T ocw = root:SQL:com
		Wave /T ouw = root:SQL:usr
		oc = ocw[0]
		ou = ouw[0]
		KillWaves root:SQL:com,root:SQL:usr
	endif
	
	SetDataFolder("root:")
	
	Redimension/N=(DimSize(SQLNames,0)) SQL_sel
End


Function SQLImport()
	Wave /T SQLNames=root:SQL:SQLNames
	Wave SQL_sel=root:SQL:SQL_sel
	KillDataFolder /Z root:SQL:Import
	NewDataFolder root:SQL:Import
	SetDataFolder root:SQL:Import 
	Variable i
	for (i=0;i<Dimsize(SQL_sel,0); i=i+1)
		if (SQL_sel[i]==1)
			KillWaves /Z root:Saved_Results:$(SQLNames[i]+"_data"),root:Saved_Results:$(SQLNames[i]+"_files")
			Variable o = 0
			for (o=0;o<4; o=o+1)
				String table = ""
				if (o == 0)
					table = "measurement_data"
				endif
				if (o == 1)
					table = "errors"
				endif
				if (o == 2)
					table = "original_results"
				endif
				if (o == 3)
					table = "original_errors"
				endif
				execSqlCommand("select \"Filename\",\"Bias\",\"Current\",\"Resistance\",\"Exponent\",\"Beta\" as \"Beta0\",\"Exp_Lor\",\"Beta_Lor\",\"Ampl_Lor\",\"Tau_Lor\",\"CNR_1pf\",\"CNR_1pf_Lor\",\"CNR_Lor\",\"CNR_Num\",\"TCNR\",\"Int_Noise_1pf\",\"Int_Noise_1pf_L\",\"Int_Noise_Lor\",\"Int_Noise_Num\",\"Int_Noise_Tot\",\"Lor2Tot\",\"N1pf2Tot\",\"LorTo1pf\",\"f1\",\"f2\",\"col24\",\"col25\",\"col26\",\"col27\",\"UserDef1\",\"UserDef2\",\"measured_file\",\"base_psd\",\"eval_date_str\",\"version\",\"User\",\"Comment\" from " + table + " where \"Name\" ='" + SQLNames[i] +"' order by \"Id\" asc")
				//Make/N=0/O root:Saved_Results:$(SQLNames[i])
				//Concatenate "Bias;Current;Resistance;Exponent;Beta0;Exp_Lor;Beta_Lor;Ampl_Lor;Tau_Lor;CNR_1pf;CNR_1pf_Lor;CNR_Lor;CNR_Num;TCNR;Int_Noise_1pf;Int_Noise_1pf_L;Int_Noise_Lor;Int_Noise_Num;Int_Noise_Tot;Lor2Tot;N1pf2Tot;LorTo1pf;f1;f2;col24;col25;col26;col27;UserDef1;UserDef2;", root:Saved_Results:$(SQLNames[i]+"_data")
				Concatenate "Bias;Current;Resistance;Exponent;Beta0;Exp_Lor;Beta_Lor;Ampl_Lor;Tau_Lor;CNR_1pf;CNR_1pf_Lor;CNR_Lor;CNR_Num;TCNR;Int_Noise_1pf;Int_Noise_1pf_L;Int_Noise_Lor;Int_Noise_Num;Int_Noise_Tot;Lor2Tot;N1pf2Tot;LorTo1pf;f1;f2;col24;col25;col26;col27;UserDef1;UserDef2;", root:SQL:Import:$(SQLNames[i]+"_data_layer"+num2str(o))
			endfor
			execSqlCommand("select \"Rserial\", \"Gain\", \"CutStart\", \"CutStop\", \"df\", \"NumAvg\", \"int_limit_f1\", \"int_limit_f2\", \"fitLor_f0_Min\", \"fitLor_f0_Max\", \"fit_range_log1\", \"fit_range_log2\", \"fit_NumDec\", \"fit_beta_initial\", \"fit_f0_initial\", \"Id\", \"Name\", \"arb1\", \"arb2\", \"arb3\", \"arb4\", \"arb5\", \"arb6\", \"arb7\", \"arb8\", \"arb9\", \"arb10\", \"arb11\", \"arb12\", \"arb13\", \"arb14\", \"arb15\" from \"layer4\" where \"Name\" ='" + SQLNames[i] +"' order by \"Id\" asc")
			Concatenate "Rserial;Gain;CutStart;CutStop;df;NumAvg;int_limit_f1;int_limit_f2;fitLor_f0_Min;fitLor_f0_Max;fit_range_log1;fit_range_log2;fit_NumDec;fit_beta_initial;fit_f0_initial;arb1;arb2;arb3;arb4;arb5;arb6;arb7;arb8;arb9;arb10;arb11;arb12;arb13;arb14;arb15;", root:SQL:Import:$(SQLNames[i]+"_data_layer4")
			//layer 4 NINCS!!!!
			
			//check for dimension mismatch
			Variable k
			String concat_waves = SQLNames[i]+"_data_layer0;"
			Variable concat_num = 1
			for (k=1;k<5;k++)
				String curr_layer = SQLNames[i]+"_data_layer" + num2str(k)
				Variable h
				Variable dim_mismatch = 0
				for (h=0;h<4;h++)
					if (dimsize($(SQLNames[i]+"_data_layer0"),h) != dimsize($(curr_layer),h))
						dim_mismatch = 1						
					endif
				endfor
				concat_waves += curr_layer + ";"
				concat_num += 1
				if (dim_mismatch == 1)
					Make/O/N=(dimsize($(SQLNames[i]+"_data_layer0"),0),30) $(curr_layer)
					print "Dimension mismatch: " + curr_layer + " is either completely missing, or has the wrong number of rows. This layer was filled with zeroes."
				endif
			endfor
				
			Wave Filename=root:SQL:Import:Filename
			Wave measured_file = root:SQL:Import:measured_file
			if (dimsize(Filename,0) == dimsize(measured_file,0))
				Concatenate "Filename;measured_file;base_psd;User;Comment;eval_date_str;version;",root:Saved_Results:$(SQLNames[i]+"_files")
			else
				Duplicate /O Filename,root:Saved_Results:$(SQLNames[i]+"_files")
			endif
			if (concat_num == 1)
				Duplicate /O $(SQLNames[i]+"_data_layer0"),root:Saved_Results:$(SQLNames[i]+"_data")
			else
				Concatenate/DL concat_waves, root:Saved_Results:$(SQLNames[i]+"_data")
			endif
			Wave  sel=root:Saved_Results:sel
			Wave /T Data_List=root:Saved_Results:Data_List
			Variable j=0
			InsertPoints DimSize(Data_List,0),1, Data_List
			
			for(j=0;j<DimSize(Data_List,0);j=j+1)
				if(StringMatch(Data_List[j],SQLNames[i]))
					Data_List[j]=SQLNames[i]
					DeletePoints (DimSize(Data_List,0)-1),1, Data_List
					j=DimSize(Data_List,0)+1
				elseif(j==DimSize(Data_List,0)-1)
				Data_List[j]=SQLNames[i]
				InsertPoints DimSize(sel,0),1, root:Saved_Results:sel
				endif		
			endfor
			
		endif
	endfor
	
	SetDataFolder root:
	KillDataFolder /Z root:SQL:Import
End


Function SQLImportProc(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			SQLImport()
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function SQLOverwriteProc(sa) : SliderControl
	STRUCT WMSliderAction &sa

	switch( sa.eventCode )
		case -3: // Control received keyboard focus
		case -2: // Control lost keyboard focus
		case -1: // Control being killed
			break
		default:
			if( sa.eventCode & 1 ) // value set
				Variable curval = sa.curval
				Nvar gvar = root:Sql:curr_ow_op
				gvar = curval
			endif
			break
	endswitch

	return 0
End


Function SQLPushProc(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			DoAlert /T="Push data to SQL server" 2,"Is every data (especially the material) correct?"
			if(V_flag==1)
				pushSelectedToSQLServer()
				SQLRefresh()
			endif
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End


Function SQLListProc(lba) : ListBoxControl
	STRUCT WMListboxAction &lba

	Variable row = lba.row
	Variable col = lba.col
	WAVE/T/Z listWave = lba.listWave
	WAVE/Z selWave = lba.selWave

	switch( lba.eventCode )
		case -1: // control being killed
			break
		case 1: // mouse down
			break
		case 3: // double click
			break
		case 4: // cell selection
			SQLRefresh()
		case 5: // cell selection plus shift key
			break
		case 6: // begin edit
			break
		case 7: // finish edit
			break
		case 13: // checkbox clicked (Igor 6.2 or later)
			break
	endswitch

	return 0
End



///////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
///////////////// NOT CATALOGIZED  /////////////////////
///////////////////////////////////////////////////////
//////////////////////////////////////////////////////
/////////////////////////////////////////////////////



//Function calc_error(i)
//	Variable i
//	Nvar f1=root:f1
//	Nvar f2=root:f2
//	
//	WAVE ampl=root:results:ampl
//	WAVE tau=root:results:tau
//	WAVE slope=root:results:slope_log
//	WAVE interc=root:results:interc_log
//	WAVE W_sigma_par=root:results:W_sigma_par
//	
//	Make/O /N=(100,5) Errors
//	Errors[i][0]=sqrt(W_sigma_par[i][2]^2*(atan(2*pi*tau[i]*f2)/2/pi-atan(2*pi*tau[i]*f1)/2/pi)^2+W_sigma_par[i][3]^2*(f2*ampl[i]/((2*pi*tau[i]*f2)^2+1)-f1*ampl[i]/((2*pi*tau[i]*f1)^2+1))^2)
//End
/

//
//
//Function ButtonProc(ba) : ButtonControl
//	STRUCT WMButtonAction &ba
//
//	switch( ba.eventCode )
//		case 2: // mouse up
//			KillWindow Panel0#G0; Display/HOST=# /W=(15,15,960,540)
//			break
//		case -1: // control being killed
//			break
//	endswitch
//
//	return 0
//End





Function DeltaInitCalc(Rserial,Vdrive_mV,Vmeas_mV)
	Variable Rserial
	Variable Vdrive_mV
	Variable Vmeas_mV
	print Vmeas_mV/(Vdrive_mV-Vmeas_mV)*Rserial

End


//Modified on 070523
Function ConcatenateResults([in_names])
	Wave/T in_names	
	if(ParamIsDefault(in_names))
	Wave selected=root:Saved_Results:sel
	Wave/T data_names=root:Saved_Results:Data_List
	else
	Wave/T data_names=in_names
	Make /O/N=(Dimsize(data_names,0)) selected
	selected=1
	endif
	Variable i=0
	Variable j=0
	Variable sample=0
	String data
	SetDataFolder root:Saved_Results:
	Make /O/N=(0,30,5) ConcData
	Make /T/O/N=(0,10) ConcDataName
	
	for (i=0;i<Dimsize(selected,0); i=i+1)
		if (selected[i][0]==1)
			Wave current=root:Saved_Results:$(data_names[i]+"_data")
			Wave/T current_files=root:Saved_Results:$(data_names[i]+"_files")
			sample+=1
			for(j=0;j<DimSize(current,0);j=j+1)
		
				if(current[j][0][0]!=0)
					InsertPoints DimSize(ConcData,0),1,ConcData
					ConcData[DimSize(ConcData,0)-1][][]=current[j][q][r]
					InsertPoints DimSize(ConcDataName,0),1,ConcDataName
					ConcDataName[DimSize(ConcDataName,0)-1][]=current_files[j][q]
					ConcDataName[DimSize(ConcDataName,0)-1][9]=num2str(sample)
				endif
			endfor
			
		endif
	endfor

//SORT
ControlInfo /W=Panel2 SortCHCK
if(V_Value)
ControlInfo /W=Panel2 PlotBottom
Variable sort_col=V_Value
Wave/T Data_types=root:Saved_Results:Data_types
String sort_col_name=Data_types[sort_col]	

Duplicate /O ConcData, $("ConcDataSortedBy"+sort_col_name)
Wave Sorted=$("ConcDataSortedBy"+sort_col_name)
Duplicate /T/O ConcDataName, $("ConcDataNameSortedBy"+sort_col_name)
Wave/T SortedName=$("ConcDataNameSortedBy"+sort_col_name)
Duplicate /O/RMD=[][sort_col, sort_col][0] ConcData,Key,Index
MakeIndex Key, Index
for(i=0;i<DimSize(ConcData,0);i=i+1)
Sorted[i][][]=ConcData[Index[i]][q][r]
SortedName[i][]=ConcDataName[Index[i]][q]
endfor
KillWaves Key,Index,ConcData,ConcDataName
endif

	SetDataFolder root:
End

//Created on 250424
Function ConcatenateAvgs(outname,[in_names])	
	String outname
	Wave/T in_names
	if(ParamIsDefault(in_names))
	Wave selected=root:Saved_Results:sel
	Wave/T data_names=root:Saved_Results:Data_List
	else
	Wave/T data_names=in_names
	Make /O/N=(Dimsize(data_names,0)) selected
	selected=1
	endif
	Variable i=0
	Variable j=0
	Variable k=0
	Variable temp_num=0
	Make /O/N=30 temp_mean=0
	Make /O/N=30 temp_std=0
	Variable set_ind=0 //ez indexeli a különböző adatsorokat (a név mellett ez hasznos lehet bizonyos esetekben)
	String data
	SetDataFolder root:Saved_Results:
	Make /O/N=(0,30,2) $outname
	Make /T/O/N=0 $(outname+"Name")
	Wave ConcData=$outname
	Wave /T ConcDataName=$(outname+"Name")
	
	for (i=0;i<Dimsize(selected,0); i=i+1)
		if (selected[i][0]==1)
		//kiválasztjuk az adott adatsort
			Wave current=root:Saved_Results:$(data_names[i]+"_data")
			set_ind+=1
			//elkezdjük végignézni az adatsor sorait
			for(j=0;j<DimSize(current,0);j=j+1)
				if(current[j][0][0]>499&&current[j][0][0]<501) //itt tudjuk definiálni a szükséges feltételt/feltételeket
				for(k=0;k<DimSize(current,1);k=k+1) //adott sort hozzáadja az átlaghoz és a szóráshoz
				temp_mean[k]+=current[j][k][0]
				temp_std[k]+=current[j][k][0]^2
				endfor
				temp_num+=1
				endif
			endfor
					InsertPoints DimSize(ConcData,0),1,ConcData
					ConcData[DimSize(ConcData,0)-1][][0]=temp_mean[q]/temp_num
					if(temp_num==1)
					ConcData[DimSize(ConcData,0)-1][][1]=0
					else
					ConcData[DimSize(ConcData,0)-1][][1]=sqrt((temp_std[q]/temp_num-(temp_mean[q]/temp_num)^2))
					endif
					InsertPoints DimSize(ConcDataName,0),1,ConcDataName
					ConcDataName[DimSize(ConcDataName,0)-1]=data_names[i]
					temp_num=0
				temp_mean=0
				temp_std=0					
		endif
	endfor
	KillWaves temp_mean,temp_std
	//KillVariables temp_num
	

//SORT
ControlInfo /W=Panel2 SortCHCK
if(V_Value)
ControlInfo /W=Panel2 PlotBottom
Variable sort_col=V_Value
Wave/T Data_types=root:Saved_Results:Data_types
String sort_col_name=Data_types[sort_col]	

Duplicate /O ConcData, $(outname+"_SortedBy"+sort_col_name)
Wave Sorted=$(outname+"_SortedBy"+sort_col_name)
Duplicate /T/O ConcDataName, $(outname+"Name_SortedBy"+sort_col_name)
Wave/T SortedName=$(outname+"Name_SortedBy"+sort_col_name)
Duplicate /O/RMD=[][sort_col, sort_col][0] ConcData,Key,Index
MakeIndex Key, Index
for(i=0;i<DimSize(ConcData,0);i=i+1)
Sorted[i][][]=ConcData[Index[i]][q][r]
SortedName[i][]=ConcDataName[Index[i]][q]
endfor
KillWaves Key,Index,ConcData,ConcDataName
endif

	SetDataFolder root:
End

Function Filter_1pf_Lor()
		
	Variable value_tau_ampl = 0.4
	Variable value_beta = 0.5, value_exp = -0.2, exp_min=-1.4, exp_max=-0.6
	Variable drive_min = 20, drive_max = 60
	
	Filter_tau_ampl(value_tau_ampl, drive_max, drive_min)
	Filter_exp_beta(value_beta, value_exp, exp_min, exp_max, drive_max, drive_min)
	Filter_ALL(value_tau_ampl, value_beta, value_exp, exp_min, exp_max, drive_max, drive_min)
End

Function Filter_tau_ampl(value_tau_ampl, drive_max, drive_min)
	Variable value_tau_ampl, drive_max, drive_min
	SetDataFolder root:results:
	
	Wave data = ConcData
	Wave dataname = ConcDataName
	
	Duplicate/O data, ConcData_Lor_filter
	Wave data_filter = ConcData_Lor_filter
	
	Duplicate/O/T dataname, ConcDataName_Lor_filter
	Wave/T dataname_filter = ConcDataName_Lor_filter
	
	Variable j,  rel_tau, rel_ampl, drive
	
	for(j=DimSize(data,0)-1;j>=0;j-=1)
		rel_tau =  data_filter[j][8][1]/data_filter[j][8][0]
		rel_ampl = data_filter[j][7][1]/data_filter[j][7][0]
		drive = abs(data_filter[j][0][0])
		
		if (rel_tau>value_tau_ampl || rel_ampl>value_tau_ampl || drive>drive_max || drive<drive_min)
			DeletePoints j, 1, data_filter
			DeletePoints j, 1, dataname_filter
		endif
	endfor
	SetDataFolder root:
End


Function Filter_exp_beta(value_beta, value_exp, exp_min, exp_max, drive_max, drive_min)
	Variable value_beta, value_exp, exp_min, exp_max, drive_max, drive_min
	SetDataFolder root:results:
	
	Wave data = ConcData
	Wave dataname = ConcDataName

	Duplicate/O data, ConcData_1pf_filter
	Wave data_filter = ConcData_1pf_filter
	
	Duplicate/O/T dataname, ConcDataName_1pf_filter
	Wave/T dataname_filter = ConcDataName_1pf_filter
	
	Variable j, rel_beta, rel_exp, exp_1pf, drive
	
	for(j=DimSize(data,0)-1;j>=0;j-=1)
		rel_beta =  data_filter[j][6][1]/data_filter[j][6][0]
		rel_exp = data_filter[j][5][1]/data_filter[j][5][0]
		exp_1pf = data_filter[j][5][0]
		drive = abs(data_filter[j][0][0])
		
		if (rel_beta>value_beta || value_exp>rel_exp || exp_min>exp_1pf || exp_1pf>exp_max || drive>drive_max || drive<drive_min)
			DeletePoints j, 1, data_filter
			DeletePoints j, 1, dataname_filter
		endif
	endfor
	SetDataFolder root:
End


Function Filter_ALL(value_tau_ampl, value_beta, value_exp, exp_min, exp_max, drive_max, drive_min)
	Variable value_tau_ampl, value_beta, value_exp, exp_min, exp_max, drive_max, drive_min
	
	
	SetDataFolder root:results:
	
	Wave data = ConcData
	Wave dataname = ConcDataName

	Duplicate/O data, ConcData_Lor_1pf_filter
	Wave data_filter = ConcData_Lor_1pf_filter
	
	Duplicate/O/T dataname, ConcDataName_Lor_1pf_filter
	Wave/T dataname_filter = ConcDataName_Lor_1pf_filter
	
	Variable j, rel_beta, rel_exp, exp_1pf, drive, rel_tau, rel_ampl
	
	for(j=DimSize(data,0)-1;j>=0;j-=1)
		rel_tau =  data_filter[j][8][1]/data_filter[j][8][0]
		rel_ampl = data_filter[j][7][1]/data_filter[j][7][0]
		rel_beta =  data_filter[j][6][1]/data_filter[j][6][0]
		rel_exp = data_filter[j][5][1]/data_filter[j][5][0]
		exp_1pf = data_filter[j][5][0]
		drive = abs(data_filter[j][0][0])
			
		
		if (rel_tau>value_tau_ampl || rel_ampl>value_tau_ampl || rel_beta>value_beta || value_exp>rel_exp || exp_min>exp_1pf || exp_1pf>exp_max || drive>drive_max || drive<drive_min)
			DeletePoints j, 1, data_filter
			DeletePoints j, 1, dataname_filter
		endif
				
	endfor
	SetDataFolder root:
	
End

Window Graph7() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:results:
	Display /W=(431.25,75.5,1014.75,494.75) ConcData_Lor_1pf_filter[*][13][0] vs ConcData_Lor_1pf_filter[*][2][0]
	AppendToGraph ConcData[*][13][0] vs ConcData[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker(ConcData_Lor_1pf_filter)=8,marker(ConcData)=19
	ModifyGraph rgb(ConcData)=(65535,0,0,19661)
	ModifyGraph mrkThick=2
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=14
	ModifyGraph axThick=2
	Label left "TCNR_Lor_1pf_filter"
	Label bottom "R"
EndMacro

Function ButtonProc(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			ConcatenateResults()
			break
		case -1: // control being killed
			break
	endswitch

	return 0
End

Window WB_Plot_p20() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_230329:
	Display /W=(298.5,115.25,850.5,511.25) p20Data_SortedByResistance[*][28][0] vs p20Data_SortedByResistance[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker=19
	ModifyGraph msize=4
	ModifyGraph mrkThick=1
	ModifyGraph zColor(p20Data_SortedByResistance)={:Evaluation_230329:p20DataMeasInd_SortedByResistance,*,*,Rainbow16}
	ModifyGraph log(bottom)=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "Weibull prob."
	Label bottom "R [Ω]"
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv fsize= 14,fstyle= 1
	DrawText 0.0401396160558465,0.0954653937947494,"PCMO 20x20μm"
	SetDrawEnv fstyle= 1
	DrawText 0.303664921465969,0.980906921241051,"Different colors represent different measurements"
EndMacro

Window TCNR_Plot_p20() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_230329:
	Display /W=(669.75,108.5,1221.75,504.5) p20Data_SortedByResistance[*][13][0] vs p20Data_SortedByResistance[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker=19
	ModifyGraph msize=4
	ModifyGraph mrkThick=1
	ModifyGraph zColor(p20Data_SortedByResistance)={:Evaluation_230329:p20DataMeasInd_SortedByResistance,*,*,Rainbow16}
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "∆I/I"
	Label bottom "R [Ω]"
	SetAxis left 0.001,0.3
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv fsize= 14,fstyle= 1
	DrawText 0.0401396160558465,0.0954653937947494,"PCMO 20x20μm"
	SetDrawEnv fstyle= 1
	DrawText 0.303664921465969,0.980906921241051,"Different colors represent different measurements"
EndMacro

Window WB_Plot_p50() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_230329:
	Display /W=(669.75,108.5,1221.75,504.5) p50Data_SortedByResistance[*][28][0] vs p50Data_SortedByResistance[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker=19
	ModifyGraph msize=4
	ModifyGraph mrkThick=1
	ModifyGraph zColor(p50Data_SortedByResistance)={:Evaluation_230329:p50DataMeasInd_SortedByResistance,*,*,Rainbow16}
	ModifyGraph log(bottom)=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "Weibull prob."
	Label bottom "R [Ω]"
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv fsize= 14,fstyle= 1
	DrawText 0.0401396160558465,0.0954653937947494,"PCMO 50x50μm"
	SetDrawEnv fstyle= 1
	DrawText 0.303664921465969,0.980906921241051,"Different colors represent different measurements"
EndMacro

Window TCNR_Plot_p50() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_230329:
	Display /W=(217.5,102.5,769.5,498.5) p50Data_SortedByResistance[*][13][0] vs p50Data_SortedByResistance[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker=19
	ModifyGraph msize=4
	ModifyGraph mrkThick=1
	ModifyGraph zColor(p50Data_SortedByResistance)={:Evaluation_230329:p50DataMeasInd_SortedByResistance,*,*,Rainbow16}
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "∆I/I"
	Label bottom "R [Ω]"
	SetAxis left 0.001,0.3
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv fsize= 14,fstyle= 1
	DrawText 0.0401396160558465,0.0954653937947494,"PCMO 50x50μm"
	SetDrawEnv fstyle= 1
	DrawText 0.303664921465969,0.980906921241051,"Different colors represent different measurements"
EndMacro

Window WB_Plot_p100() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_230329:
	Display /W=(669.75,108.5,1221.75,504.5) p100Data_SortedByResistance[*][28][0] vs p100Data_SortedByResistance[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker=19
	ModifyGraph msize=4
	ModifyGraph mrkThick=1
	ModifyGraph zColor(p100Data_SortedByResistance)={:Evaluation_230329:p100DataMeasInd_SortedByResistance,*,*,Rainbow16}
	ModifyGraph log(bottom)=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "Weibull prob."
	Label bottom "R [Ω]"
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv fsize= 14,fstyle= 1
	DrawText 0.0401396160558465,0.0954653937947494,"PCMO 100x100μm"
	SetDrawEnv fstyle= 1
	DrawText 0.303664921465969,0.980906921241051,"Different colors represent different measurements"
EndMacro

Window TCNR_Plot_p100() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_230329:
	Display /W=(738.75,84.5,1290.75,480.5) p100Data_SortedByResistance[*][13][0] vs p100Data_SortedByResistance[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker=19
	ModifyGraph msize=4
	ModifyGraph mrkThick=1
	ModifyGraph zColor(p100Data_SortedByResistance)={:Evaluation_230329:p100DataMeasInd_SortedByResistance,*,*,Rainbow16}
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "∆I/I"
	Label bottom "R [Ω]"
	SetAxis left 0.001,0.3
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv fsize= 14,fstyle= 1
	DrawText 0.0401396160558465,0.0954653937947494,"PCMO 100x100μm"
	SetDrawEnv fstyle= 1
	DrawText 0.303664921465969,0.980906921241051,"Different colors represent different measurements"
EndMacro

Window WB_Plot_All() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_230329:
	Display /W=(375.75,173.75,927.75,569.75) p100Data_SortedByResistance[*][28][0] vs p100Data_SortedByResistance[*][2][0]
	AppendToGraph p50Data_SortedByResistance[*][28][0] vs p50Data_SortedByResistance[*][2][0]
	AppendToGraph p20Data_SortedByResistance[*][28][0] vs p20Data_SortedByResistance[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker(p100Data_SortedByResistance)=19,marker(p50Data_SortedByResistance)=19
	ModifyGraph marker(p20Data_SortedByResistance)=8
	ModifyGraph rgb(p100Data_SortedByResistance)=(65535,32768,32768),rgb(p20Data_SortedByResistance)=(39321,1,1)
	ModifyGraph msize=4
	ModifyGraph mrkThick(p100Data_SortedByResistance)=1,mrkThick(p50Data_SortedByResistance)=1
	ModifyGraph mrkThick(p20Data_SortedByResistance)=2
	ModifyGraph zColor(p20Data_SortedByResistance)={:Evaluation_230329:p20DataMeasInd_SortedByResistance,9.1,9.9,YellowHot}
	ModifyGraph zColorMax(p20Data_SortedByResistance)=(65535,49157,16385)
	ModifyGraph zColorMin(p20Data_SortedByResistance)=(39321,1,1)
	ModifyGraph log(bottom)=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "Probability"
	Label bottom "R [Ω]"
	Legend/C/N=text0/J/H={0,2,10}/A=MC/X=26.35/Y=-30.55 "\\s(p100Data_SortedByResistance) 100x100μ\r\\s(p50Data_SortedByResistance) 50x50μ"
	AppendText "\\s(p20Data_SortedByResistance) 20x20μ (old meas)\r\\k(65535,49157,16385)\\W8008 20x20μ (new meas)"
	ShowTools/A
EndMacro

Window TCNR_Plot_All() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_230329:
	Display /W=(763.5,92,1314.75,488) p100Data_SortedByResistance[*][13][0] vs p100Data_SortedByResistance[*][2][0]
	AppendToGraph p50Data_SortedByResistance[*][13][0] vs p50Data_SortedByResistance[*][2][0]
	AppendToGraph p20Data_SortedByResistance[*][13][0] vs p20Data_SortedByResistance[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker(p100Data_SortedByResistance)=19,marker(p50Data_SortedByResistance)=19
	ModifyGraph marker(p20Data_SortedByResistance)=8
	ModifyGraph rgb(p100Data_SortedByResistance)=(65535,32768,32768),rgb(p20Data_SortedByResistance)=(39321,1,1)
	ModifyGraph msize=4
	ModifyGraph mrkThick(p100Data_SortedByResistance)=1,mrkThick(p50Data_SortedByResistance)=1
	ModifyGraph mrkThick(p20Data_SortedByResistance)=2
	ModifyGraph zColor(p20Data_SortedByResistance)={:Evaluation_230329:p20DataMeasInd_SortedByResistance,9.1,9.9,YellowHot}
	ModifyGraph zColorMax(p20Data_SortedByResistance)=(65535,49157,16385)
	ModifyGraph zColorMin(p20Data_SortedByResistance)=(39321,1,1)
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "∆I/I"
	Label bottom "R [Ω]"
	SetAxis left 0.001,0.3
	Cursor/P A p20Data_SortedByResistance 54
	ShowInfo
	Legend/C/N=text0/J/H={0,2,10}/A=MC/X=26.35/Y=-30.55 "\\s(p100Data_SortedByResistance) 100x100μ\r\\s(p50Data_SortedByResistance) 50x50μ"
	AppendText "\\s(p20Data_SortedByResistance) 20x20μ (old meas)\r\\k(65535,49157,16385)\\W8008 20x20μ (new meas)"
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 3,dash= 3
	DrawLine 2191576.42973066,0.00804281830301783,219157642.973065,0.0804281830301783
	SetDrawEnv fstyle= 1
	DrawText 0.801431127012522,0.0906921241050124,"m=0.5 (guide)"
EndMacro

Window p20_TCNR_new_meas() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Saved_Results:
	Display /W=(205.5,138.5,676.5,445.25) BSC6_B06p20_230323_ser01_data[*][13][0] vs BSC6_B06p20_230323_ser01_data[*][2][0] as "TCNR_vs_Resistance"
	AppendToGraph BSC6_B07p20_230323_ser02_data[*][13][0] vs BSC6_B07p20_230323_ser02_data[*][2][0]
	AppendToGraph BSC6_B07p20_230323_ser03_data[*][13][0] vs BSC6_B07p20_230323_ser03_data[*][2][0]
	AppendToGraph BSC6_B07p20_230323_ser05_data[*][13][0] vs BSC6_B07p20_230323_ser05_data[*][2][0]
	AppendToGraph BSC6_B07p20_230323_ser06_data[*][13][0] vs BSC6_B07p20_230323_ser06_data[*][2][0]
	AppendToGraph BSC6_D06p20_230327_ser02_data[*][13][0] vs BSC6_D06p20_230327_ser02_data[*][2][0]
	AppendToGraph BSC6_D06p20_230327_ser03_data[*][13][0] vs BSC6_D06p20_230327_ser03_data[*][2][0]
	AppendToGraph BSC6_D06p20_230327_ser04_data[*][13][0] vs BSC6_D06p20_230327_ser04_data[*][2][0]
	AppendToGraph BSC6_E07p20_230327_ser02_data[*][13][0] vs BSC6_E07p20_230327_ser02_data[*][2][0]
	AppendToGraph BSC6_E07p20_230327_ser03_data[*][13][0] vs BSC6_E07p20_230327_ser03_data[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph width=340.157,height=226.772
	ModifyGraph mode=3
	ModifyGraph marker(BSC6_B06p20_230323_ser01_data)=8,marker(BSC6_B07p20_230323_ser02_data)=8
	ModifyGraph marker(BSC6_B07p20_230323_ser03_data)=5,marker(BSC6_B07p20_230323_ser05_data)=6
	ModifyGraph marker(BSC6_B07p20_230323_ser06_data)=28,marker(BSC6_D06p20_230327_ser02_data)=8
	ModifyGraph marker(BSC6_D06p20_230327_ser03_data)=5,marker(BSC6_D06p20_230327_ser04_data)=6
	ModifyGraph marker(BSC6_E07p20_230327_ser02_data)=8,marker(BSC6_E07p20_230327_ser03_data)=5
	ModifyGraph rgb(BSC6_B06p20_230323_ser01_data)=(39321,1,1),rgb(BSC6_B07p20_230323_ser02_data)=(52428,34958,1)
	ModifyGraph rgb(BSC6_B07p20_230323_ser03_data)=(52428,34958,1),rgb(BSC6_B07p20_230323_ser05_data)=(52428,34958,1)
	ModifyGraph rgb(BSC6_B07p20_230323_ser06_data)=(52428,34958,1),rgb(BSC6_D06p20_230327_ser02_data)=(19675,39321,1)
	ModifyGraph rgb(BSC6_D06p20_230327_ser03_data)=(19675,39321,1),rgb(BSC6_D06p20_230327_ser04_data)=(19675,39321,1)
	ModifyGraph rgb(BSC6_E07p20_230327_ser02_data)=(1,9611,39321),rgb(BSC6_E07p20_230327_ser03_data)=(1,9611,39321)
	ModifyGraph msize=5
	ModifyGraph mrkThick=3
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "TCNR"
	Label bottom "Resistance"
	SetAxis left 0.001,0.3
	Legend/C/N=text0/J/H={0,2,10}/A=MC/X=-6.17/Y=-20.86 "\\s(BSC6_B06p20_230323_ser01_data) BSC6_B06p20_230323_ser01"
	AppendText "\\s(BSC6_B07p20_230323_ser02_data) BSC6_B07p20_230323_ser02\r\\s(BSC6_B07p20_230323_ser03_data) BSC6_B07p20_230323_ser03"
	AppendText "\\s(BSC6_B07p20_230323_ser05_data) BSC6_B07p20_230323_ser05\r\\s(BSC6_B07p20_230323_ser06_data) BSC6_B07p20_230323_ser06"
	AppendText "\\s(BSC6_D06p20_230327_ser02_data) BSC6_D06p20_230327_ser02\r\\s(BSC6_D06p20_230327_ser03_data) BSC6_D06p20_230327_ser03"
	AppendText "\\s(BSC6_D06p20_230327_ser04_data) BSC6_D06p20_230327_ser04\r\\s(BSC6_E07p20_230327_ser02_data) BSC6_E07p20_230327_ser02"
	AppendText "\\s(BSC6_E07p20_230327_ser03_data) BSC6_E07p20_230327_ser03"
EndMacro

Window PCMO_new_noise_map() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Saved_Results:
	Display /W=(476.25,122,1178.25,545.75) BSC6_Q12p100_230202_data[*][13][0] vs BSC6_Q12p100_230202_data[*][2][0] as "PCMO_new_noise_map"
	AppendToGraph BSC6_R12p50_230201_data[*][13][0] vs BSC6_R12p50_230201_data[*][2][0]
	AppendToGraph BSC6_Q12p50_230207_ser01_ONbefore1_data[*][13][0] vs BSC6_Q12p50_230207_ser01_ONbefore1_data[*][2][0]
	AppendToGraph BSC6_Q12p50_230207_ser01_ONbefore2_data[*][13][0] vs BSC6_Q12p50_230207_ser01_ONbefore2_data[*][2][0]
	AppendToGraph BSC6_Q12p50_230207_ser01_OFF1_data[*][13][0] vs BSC6_Q12p50_230207_ser01_OFF1_data[*][2][0]
	AppendToGraph BSC6_Q12p50_230207_ser01_OFF2_data[*][13][0] vs BSC6_Q12p50_230207_ser01_OFF2_data[*][2][0]
	AppendToGraph BSC6_Q12p50_230207_ser01_ONafter1_data[*][13][0] vs BSC6_Q12p50_230207_ser01_ONafter1_data[*][2][0]
	AppendToGraph BSC6_Q12p50_230207_ser01_ONafter2_data[*][13][0] vs BSC6_Q12p50_230207_ser01_ONafter2_data[*][2][0]
	AppendToGraph BSC6_Q12p50_230207_ser02_ONbefore_data[*][13][0] vs BSC6_Q12p50_230207_ser02_ONbefore_data[*][2][0]
	AppendToGraph BSC6_Q12p50_230207_ser02_ONbefore2_data[*][13][0] vs BSC6_Q12p50_230207_ser02_ONbefore2_data[*][2][0]
	AppendToGraph BSC6_Q12p50_230207_ser02_OFF1_data[*][13][0] vs BSC6_Q12p50_230207_ser02_OFF1_data[*][2][0]
	AppendToGraph BSC6_Q12p50_230207_ser02_OFF2_data[*][13][0] vs BSC6_Q12p50_230207_ser02_OFF2_data[*][2][0]
	AppendToGraph BSC6_Q12p50_230207_ser02_ONafter1_data[*][13][0] vs BSC6_Q12p50_230207_ser02_ONafter1_data[*][2][0]
	AppendToGraph BSC6_Q12p50_230207_ser02_ONafter2_data[*][13][0] vs BSC6_Q12p50_230207_ser02_ONafter2_data[*][2][0]
	AppendToGraph BSC6_U12p50_230209_ser01_ONbefore_data[*][13][0] vs BSC6_U12p50_230209_ser01_ONbefore_data[*][2][0]
	AppendToGraph BSC6_U12p50_230209_ser01_ONbefore2_data[*][13][0] vs BSC6_U12p50_230209_ser01_ONbefore2_data[*][2][0]
	AppendToGraph BSC6_U12p50_230209_ser01_OFF_data[*][13][0] vs BSC6_U12p50_230209_ser01_OFF_data[*][2][0]
	AppendToGraph BSC6_U12p50_230209_ser01_OFF2_data[*][13][0] vs BSC6_U12p50_230209_ser01_OFF2_data[*][2][0]
	AppendToGraph BSC6_U12p50_230209_ser01_ONafter1_data[*][13][0] vs BSC6_U12p50_230209_ser01_ONafter1_data[*][2][0]
	AppendToGraph BSC6_U12p50_230209_ser01_ONafter2_data[*][13][0] vs BSC6_U12p50_230209_ser01_ONafter2_data[*][2][0]
	AppendToGraph BSC6_W09p100_230214_ser01_ON_data[*][13][0] vs BSC6_W09p100_230214_ser01_ON_data[*][2][0]
	AppendToGraph BSC6_U05p20_230221_data[*][13][0] vs BSC6_U05p20_230221_data[*][2][0]
	AppendToGraph BSC6_V09p50_230221_data[*][13][0] vs BSC6_V09p50_230221_data[*][2][0]
	AppendToGraph BSC6_V09p50_230221_2nd_half_data[*][13][0] vs BSC6_V09p50_230221_2nd_half_data[*][2][0]
	AppendToGraph BSC6_Q12p50_230310_ser01_data[*][13][0] vs BSC6_Q12p50_230310_ser01_data[*][2][0]
	AppendToGraph BSC6_R12p50_230313_linear_data[*][13][0] vs BSC6_R12p50_230313_linear_data[*][2][0]
	AppendToGraph BSC6_U09p50_230313_linear_data[*][13][0] vs BSC6_U09p50_230313_linear_data[*][2][0]
	AppendToGraph BSC6_U06p50_230313_linear_data[*][13][0] vs BSC6_U06p50_230313_linear_data[*][2][0]
	AppendToGraph BSC6_W02p20_23031_data[*][13][0] vs BSC6_W02p20_23031_data[*][2][0]
	AppendToGraph BSC6_W01p20_230313_ser01_data[*][13][0] vs BSC6_W01p20_230313_ser01_data[*][2][0]
	AppendToGraph BSC6_W01p20_230313_ser02_data[*][13][0] vs BSC6_W01p20_230313_ser02_data[*][2][0]
	AppendToGraph BSC6_W01p20_230313_ser03_data[*][13][0] vs BSC6_W01p20_230313_ser03_data[*][2][0]
	AppendToGraph BSC6_E10p20_230314_data[*][13][0] vs BSC6_E10p20_230314_data[*][2][0]
	AppendToGraph BSC6_R080p20_230314_ser01_data[*][13][0] vs BSC6_R080p20_230314_ser01_data[*][2][0]
	AppendToGraph BSC6_R080p20_230314_ser02_data[*][13][0] vs BSC6_R080p20_230314_ser02_data[*][2][0]
	AppendToGraph BSC6_R080p20_230314_ser03_data[*][13][0] vs BSC6_R080p20_230314_ser03_data[*][2][0]
	AppendToGraph BSC6_R080p50_230314_ser01_data[*][13][0] vs BSC6_R080p50_230314_ser01_data[*][2][0]
	AppendToGraph BSC6_R080p50_230314_ser03_data[*][13][0] vs BSC6_R080p50_230314_ser03_data[*][2][0]
	AppendToGraph BSC6_R080p50_230314_ser06_data[*][13][0] vs BSC6_R080p50_230314_ser06_data[*][2][0]
	AppendToGraph BSC6_R080p50_230314_ser08_data[*][13][0] vs BSC6_R080p50_230314_ser08_data[*][2][0]
	AppendToGraph BSC6_R080p50_230314_ser10_data[*][13][0] vs BSC6_R080p50_230314_ser10_data[*][2][0]
	AppendToGraph BSC6_R080p50_230314_ser12_data[*][13][0] vs BSC6_R080p50_230314_ser12_data[*][2][0]
	AppendToGraph BSC6_R080p50_230314_ser14_data[*][13][0] vs BSC6_R080p50_230314_ser14_data[*][2][0]
	AppendToGraph BSC6_R080p50_230314_ser16_data[*][13][0] vs BSC6_R080p50_230314_ser16_data[*][2][0]
	AppendToGraph BSC6_U090p100_230317_ser01_data[*][13][0] vs BSC6_U090p100_230317_ser01_data[*][2][0]
	AppendToGraph BSC6_U090p100_230317_ser03_data[*][13][0] vs BSC6_U090p100_230317_ser03_data[*][2][0]
	AppendToGraph BSC6_U090p100_230317_ser04_data[*][13][0] vs BSC6_U090p100_230317_ser04_data[*][2][0]
	AppendToGraph BSC6_U090p100_230317_ser06_data[*][13][0] vs BSC6_U090p100_230317_ser06_data[*][2][0]
	AppendToGraph BSC6_S090p100_230317_ser01_data[*][13][0] vs BSC6_S090p100_230317_ser01_data[*][2][0]
	AppendToGraph BSC6_S090p100_230317_ser03_data[*][13][0] vs BSC6_S090p100_230317_ser03_data[*][2][0]
	AppendToGraph BSC6_S090p100_230317_ser05_data[*][13][0] vs BSC6_S090p100_230317_ser05_data[*][2][0]
	AppendToGraph BSC6_B06p20_230323_ser01_data[*][13][0] vs BSC6_B06p20_230323_ser01_data[*][2][0]
	AppendToGraph BSC6_B07p20_230323_ser02_data[*][13][0] vs BSC6_B07p20_230323_ser02_data[*][2][0]
	AppendToGraph BSC6_B07p20_230323_ser03_data[*][13][0] vs BSC6_B07p20_230323_ser03_data[*][2][0]
	AppendToGraph BSC6_B07p20_230323_ser05_data[*][13][0] vs BSC6_B07p20_230323_ser05_data[*][2][0]
	AppendToGraph BSC6_B07p20_230323_ser06_data[*][13][0] vs BSC6_B07p20_230323_ser06_data[*][2][0]
	AppendToGraph BSC6_D06p20_230327_ser02_data[*][13][0] vs BSC6_D06p20_230327_ser02_data[*][2][0]
	AppendToGraph BSC6_D06p20_230327_ser03_data[*][13][0] vs BSC6_D06p20_230327_ser03_data[*][2][0]
	AppendToGraph BSC6_D06p20_230327_ser04_data[*][13][0] vs BSC6_D06p20_230327_ser04_data[*][2][0]
	AppendToGraph BSC6_E07p20_230327_ser02_data[*][13][0] vs BSC6_E07p20_230327_ser02_data[*][2][0]
	AppendToGraph BSC6_E07p20_230327_ser03_data[*][13][0] vs BSC6_E07p20_230327_ser03_data[*][2][0]
	AppendToGraph MT1p5_H06p100_ser02_data[*][13][0] vs MT1p5_H06p100_ser02_data[*][2][0]
	AppendToGraph MT1_L07p50_ser01_data[*][13][0] vs MT1_L07p50_ser01_data[*][2][0]
	AppendToGraph MT1_L07p50_ser02_data[*][13][0] vs MT1_L07p50_ser02_data[*][2][0]
	AppendToGraph MT1_L06p50_ser01_data[*][13][0] vs MT1_L06p50_ser01_data[*][2][0]
	AppendToGraph MT1_L07p50_ser03_HRS_data[*][13][0] vs MT1_L07p50_ser03_HRS_data[*][2][0]
	AppendToGraph MT1_L07p50_ser04_LRS_data[*][13][0] vs MT1_L07p50_ser04_LRS_data[*][2][0]
	AppendToGraph MT1_L07p50_ser04_HRS_data[*][13][0] vs MT1_L07p50_ser04_HRS_data[*][2][0]
	AppendToGraph MT1_L09p50_ser02_HRS_data[*][13][0] vs MT1_L09p50_ser02_HRS_data[*][2][0]
	AppendToGraph MT1_L10p50_ser02_LRS_data[*][13][0] vs MT1_L10p50_ser02_LRS_data[*][2][0]
	AppendToGraph MT1_K08p50_ser01_LRS_data[*][13][0] vs MT1_K08p50_ser01_LRS_data[*][2][0]
	AppendToGraph MT1_K08p50_ser02_HRS_data[*][13][0] vs MT1_K08p50_ser02_HRS_data[*][2][0]
	AppendToGraph MT1_L10p50_ser01_HRS_data[*][13][0] vs MT1_L10p50_ser01_HRS_data[*][2][0]
	AppendToGraph MT1_K08p100_ser01_HRS_data[*][13][0] vs MT1_K08p100_ser01_HRS_data[*][2][0]
	AppendToGraph MT1_K08p100_ser02_HRS_data[*][13][0] vs MT1_K08p100_ser02_HRS_data[*][2][0]
	AppendToGraph MT1_K08p100_ser03_LRS_data[*][13][0] vs MT1_K08p100_ser03_LRS_data[*][2][0]
	AppendToGraph MT1_K08p100_ser04_LRS_data[*][13][0] vs MT1_K08p100_ser04_LRS_data[*][2][0]
	AppendToGraph MT1_K08p100_ser05_HRS_data[*][13][0] vs MT1_K08p100_ser05_HRS_data[*][2][0]
	AppendToGraph MT1_K09p20_ser01_LRS_data[*][13][0] vs MT1_K09p20_ser01_LRS_data[*][2][0]
	AppendToGraph MT1_N03p50_ser06_HRS_data[*][13][0] vs MT1_N03p50_ser06_HRS_data[*][2][0]
	AppendToGraph MT1_J08p100_ser01_HRS_data[*][13][0] vs MT1_J08p100_ser01_HRS_data[*][2][0]
	AppendToGraph MT1_J08p100_ser03_HRS_data[*][13][0] vs MT1_J08p100_ser03_HRS_data[*][2][0]
	AppendToGraph MT1_J08p100_ser02_LRS_data[*][13][0] vs MT1_J08p100_ser02_LRS_data[*][2][0]
	AppendToGraph MT1_J08p100_ser04_LRS_data[*][13][0] vs MT1_J08p100_ser04_LRS_data[*][2][0]
	AppendToGraph MT1_J08p50_ser01_LRS_data[*][13][0] vs MT1_J08p50_ser01_LRS_data[*][2][0]
	AppendToGraph MT1_J08p50_ser02_HRS_data[*][13][0] vs MT1_J08p50_ser02_HRS_data[*][2][0]
	AppendToGraph MT1_K09p50_ser01_LRS_data[*][13][0] vs MT1_K09p50_ser01_LRS_data[*][2][0]
	AppendToGraph MT1_K09p50_ser02_HRS_data[*][13][0] vs MT1_K09p50_ser02_HRS_data[*][2][0]
	AppendToGraph MT1_J09p20_ser01_LRS_data[*][13][0] vs MT1_J09p20_ser01_LRS_data[*][2][0]
	AppendToGraph MT1_J09p20_ser02_HRS_data[*][13][0] vs MT1_J09p20_ser02_HRS_data[*][2][0]
	AppendToGraph MT1_J09p20_ser03_LRS_data[*][13][0] vs MT1_J09p20_ser03_LRS_data[*][2][0]
	AppendToGraph MT1_P03p50_ser02_LRS_data[*][13][0] vs MT1_P03p50_ser02_LRS_data[*][2][0]
	AppendToGraph MT1_P03p50_ser03_HRS_data[*][13][0] vs MT1_P03p50_ser03_HRS_data[*][2][0]
	AppendToGraph MT1_P03p50_ser04_LRS_data[*][13][0] vs MT1_P03p50_ser04_LRS_data[*][2][0]
	AppendToGraph MT1_P03p50_ser05_HRS_data[*][13][0] vs MT1_P03p50_ser05_HRS_data[*][2][0]
	AppendToGraph MT1_N03p50_ser01_ZERO_data[*][13][0] vs MT1_N03p50_ser01_ZERO_data[*][2][0]
	AppendToGraph MT1_N03p50_ser02_LRS_data[*][13][0] vs MT1_N03p50_ser02_LRS_data[*][2][0]
	AppendToGraph MT1_N03p50_ser03_LRS_data[*][13][0] vs MT1_N03p50_ser03_LRS_data[*][2][0]
	AppendToGraph MT1_N03p50_ser04_HRS_data[*][13][0] vs MT1_N03p50_ser04_HRS_data[*][2][0]
	AppendToGraph MT1_N03p50_ser05_LRS_data[*][13][0] vs MT1_N03p50_ser05_LRS_data[*][2][0]
	AppendToGraph MT1_N03p50_ser06_HRS_data[*][13][0] vs MT1_N03p50_ser06_HRS_data[*][2][0]
	AppendToGraph MT1_N03p50_ser07_LRS_data[*][13][0] vs MT1_N03p50_ser07_LRS_data[*][2][0]
	AppendToGraph MT1_N03p50_ser08_HRS_data[*][13][0] vs MT1_N03p50_ser08_HRS_data[*][2][0]
	AppendToGraph MT1_N03p100_ser01_HRS_data[*][13][0] vs MT1_N03p100_ser01_HRS_data[*][2][0]
	AppendToGraph MT1_O03p50_ser01_ZERO_data[*][13][0] vs MT1_O03p50_ser01_ZERO_data[*][2][0]
	AppendToGraph MT1_O03p100_ser01_HRS_data[*][13][0] vs MT1_O03p100_ser01_HRS_data[*][2][0]
	AppendToGraph MT1_P03p100_ser01_ZERO_data[*][13][0] vs MT1_P03p100_ser01_ZERO_data[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph width=566.929,height=340.157
	ModifyGraph mode=3
	ModifyGraph marker(BSC6_Q12p100_230202_data)=19,marker(BSC6_R12p50_230201_data)=19
	ModifyGraph marker(BSC6_Q12p50_230207_ser01_ONbefore1_data)=19,marker(BSC6_Q12p50_230207_ser01_ONbefore2_data)=19
	ModifyGraph marker(BSC6_Q12p50_230207_ser01_OFF1_data)=19,marker(BSC6_Q12p50_230207_ser01_OFF2_data)=19
	ModifyGraph marker(BSC6_Q12p50_230207_ser01_ONafter1_data)=19,marker(BSC6_Q12p50_230207_ser01_ONafter2_data)=19
	ModifyGraph marker(BSC6_Q12p50_230207_ser02_ONbefore_data)=19,marker(BSC6_Q12p50_230207_ser02_ONbefore2_data)=19
	ModifyGraph marker(BSC6_Q12p50_230207_ser02_OFF1_data)=19,marker(BSC6_Q12p50_230207_ser02_OFF2_data)=19
	ModifyGraph marker(BSC6_Q12p50_230207_ser02_ONafter1_data)=19,marker(BSC6_Q12p50_230207_ser02_ONafter2_data)=19
	ModifyGraph marker(BSC6_U12p50_230209_ser01_ONbefore_data)=19,marker(BSC6_U12p50_230209_ser01_ONbefore2_data)=19
	ModifyGraph marker(BSC6_U12p50_230209_ser01_OFF_data)=19,marker(BSC6_U12p50_230209_ser01_OFF2_data)=19
	ModifyGraph marker(BSC6_U12p50_230209_ser01_ONafter1_data)=19,marker(BSC6_U12p50_230209_ser01_ONafter2_data)=19
	ModifyGraph marker(BSC6_W09p100_230214_ser01_ON_data)=19,marker(BSC6_U05p20_230221_data)=19
	ModifyGraph marker(BSC6_V09p50_230221_data)=19,marker(BSC6_V09p50_230221_2nd_half_data)=19
	ModifyGraph marker(BSC6_Q12p50_230310_ser01_data)=19,marker(BSC6_R12p50_230313_linear_data)=19
	ModifyGraph marker(BSC6_U09p50_230313_linear_data)=19,marker(BSC6_U06p50_230313_linear_data)=19
	ModifyGraph marker(BSC6_W02p20_23031_data)=19,marker(BSC6_W01p20_230313_ser01_data)=19
	ModifyGraph marker(BSC6_W01p20_230313_ser02_data)=19,marker(BSC6_W01p20_230313_ser03_data)=19
	ModifyGraph marker(BSC6_E10p20_230314_data)=19,marker(BSC6_R080p20_230314_ser01_data)=19
	ModifyGraph marker(BSC6_R080p20_230314_ser02_data)=19,marker(BSC6_R080p20_230314_ser03_data)=19
	ModifyGraph marker(BSC6_R080p50_230314_ser01_data)=19,marker(BSC6_R080p50_230314_ser03_data)=19
	ModifyGraph marker(BSC6_R080p50_230314_ser06_data)=19,marker(BSC6_R080p50_230314_ser08_data)=19
	ModifyGraph marker(BSC6_R080p50_230314_ser10_data)=19,marker(BSC6_R080p50_230314_ser12_data)=19
	ModifyGraph marker(BSC6_R080p50_230314_ser14_data)=19,marker(BSC6_R080p50_230314_ser16_data)=19
	ModifyGraph marker(BSC6_U090p100_230317_ser01_data)=19,marker(BSC6_U090p100_230317_ser03_data)=19
	ModifyGraph marker(BSC6_U090p100_230317_ser04_data)=19,marker(BSC6_U090p100_230317_ser06_data)=19
	ModifyGraph marker(BSC6_S090p100_230317_ser01_data)=19,marker(BSC6_S090p100_230317_ser03_data)=19
	ModifyGraph marker(BSC6_S090p100_230317_ser05_data)=19,marker(BSC6_B06p20_230323_ser01_data)=19
	ModifyGraph marker(BSC6_B07p20_230323_ser02_data)=19,marker(BSC6_B07p20_230323_ser03_data)=19
	ModifyGraph marker(BSC6_B07p20_230323_ser05_data)=19,marker(BSC6_B07p20_230323_ser06_data)=19
	ModifyGraph marker(BSC6_D06p20_230327_ser02_data)=19,marker(BSC6_D06p20_230327_ser03_data)=19
	ModifyGraph marker(BSC6_D06p20_230327_ser04_data)=19,marker(BSC6_E07p20_230327_ser02_data)=19
	ModifyGraph marker(BSC6_E07p20_230327_ser03_data)=19,marker(MT1p5_H06p100_ser02_data)=19
	ModifyGraph marker(MT1_L07p50_ser01_data)=6,marker(MT1_L07p50_ser02_data)=13,marker(MT1_L06p50_ser01_data)=13
	ModifyGraph marker(MT1_L07p50_ser03_HRS_data)=13,marker(MT1_L07p50_ser04_LRS_data)=6
	ModifyGraph marker(MT1_L07p50_ser04_HRS_data)=13,marker(MT1_L09p50_ser02_HRS_data)=13
	ModifyGraph marker(MT1_L10p50_ser02_LRS_data)=6,marker(MT1_K08p50_ser01_LRS_data)=6
	ModifyGraph marker(MT1_K08p50_ser02_HRS_data)=13,marker(MT1_L10p50_ser01_HRS_data)=13
	ModifyGraph marker(MT1_K08p100_ser01_HRS_data)=19,marker(MT1_K08p100_ser02_HRS_data)=13
	ModifyGraph marker(MT1_K08p100_ser03_LRS_data)=6,marker(MT1_K08p100_ser04_LRS_data)=17
	ModifyGraph marker(MT1_K08p100_ser05_HRS_data)=16,marker(MT1_K09p20_ser01_LRS_data)=6
	ModifyGraph marker(MT1_N03p50_ser06_HRS_data)=6,marker(MT1_J08p100_ser01_HRS_data)=13
	ModifyGraph marker(MT1_J08p100_ser03_HRS_data)=16,marker(MT1_J08p100_ser02_LRS_data)=6
	ModifyGraph marker(MT1_J08p100_ser04_LRS_data)=17,marker(MT1_J08p50_ser01_LRS_data)=6
	ModifyGraph marker(MT1_J08p50_ser02_HRS_data)=13,marker(MT1_K09p50_ser01_LRS_data)=6
	ModifyGraph marker(MT1_K09p50_ser02_HRS_data)=13,marker(MT1_J09p20_ser01_LRS_data)=6
	ModifyGraph marker(MT1_J09p20_ser02_HRS_data)=13,marker(MT1_J09p20_ser03_LRS_data)=17
	ModifyGraph marker(MT1_P03p50_ser02_LRS_data)=17,marker(MT1_P03p50_ser03_HRS_data)=16
	ModifyGraph marker(MT1_P03p50_ser04_LRS_data)=17,marker(MT1_P03p50_ser05_HRS_data)=16
	ModifyGraph marker(MT1_N03p50_ser01_ZERO_data)=18,marker(MT1_N03p50_ser02_LRS_data)=17
	ModifyGraph marker(MT1_N03p50_ser03_LRS_data)=17,marker(MT1_N03p50_ser04_HRS_data)=16
	ModifyGraph marker(MT1_N03p50_ser05_LRS_data)=17,marker(MT1_N03p50_ser06_HRS_data)=16
	ModifyGraph marker(MT1_N03p50_ser07_LRS_data)=17,marker(MT1_N03p50_ser08_HRS_data)=16
	ModifyGraph marker(MT1_N03p100_ser01_HRS_data)=16,marker(MT1_O03p50_ser01_ZERO_data)=18
	ModifyGraph marker(MT1_O03p100_ser01_HRS_data)=16,marker(MT1_P03p100_ser01_ZERO_data)=18
	ModifyGraph rgb(BSC6_Q12p100_230202_data)=(39321,39321,39321),rgb(BSC6_R12p50_230201_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_Q12p50_230207_ser01_ONbefore1_data)=(39321,39321,39321),rgb(BSC6_Q12p50_230207_ser01_ONbefore2_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_Q12p50_230207_ser01_OFF1_data)=(39321,39321,39321),rgb(BSC6_Q12p50_230207_ser01_OFF2_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_Q12p50_230207_ser01_ONafter1_data)=(39321,39321,39321),rgb(BSC6_Q12p50_230207_ser01_ONafter2_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_Q12p50_230207_ser02_ONbefore_data)=(39321,39321,39321),rgb(BSC6_Q12p50_230207_ser02_ONbefore2_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_Q12p50_230207_ser02_OFF1_data)=(39321,39321,39321),rgb(BSC6_Q12p50_230207_ser02_OFF2_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_Q12p50_230207_ser02_ONafter1_data)=(39321,39321,39321),rgb(BSC6_Q12p50_230207_ser02_ONafter2_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_U12p50_230209_ser01_ONbefore_data)=(39321,39321,39321),rgb(BSC6_U12p50_230209_ser01_ONbefore2_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_U12p50_230209_ser01_OFF_data)=(39321,39321,39321),rgb(BSC6_U12p50_230209_ser01_OFF2_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_U12p50_230209_ser01_ONafter1_data)=(39321,39321,39321),rgb(BSC6_U12p50_230209_ser01_ONafter2_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_W09p100_230214_ser01_ON_data)=(39321,39321,39321),rgb(BSC6_U05p20_230221_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_V09p50_230221_data)=(39321,39321,39321),rgb(BSC6_V09p50_230221_2nd_half_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_Q12p50_230310_ser01_data)=(39321,39321,39321),rgb(BSC6_R12p50_230313_linear_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_U09p50_230313_linear_data)=(39321,39321,39321),rgb(BSC6_U06p50_230313_linear_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_W02p20_23031_data)=(39321,39321,39321),rgb(BSC6_W01p20_230313_ser01_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_W01p20_230313_ser02_data)=(39321,39321,39321),rgb(BSC6_W01p20_230313_ser03_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_E10p20_230314_data)=(39321,39321,39321),rgb(BSC6_R080p20_230314_ser01_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_R080p20_230314_ser02_data)=(39321,39321,39321),rgb(BSC6_R080p20_230314_ser03_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_R080p50_230314_ser01_data)=(39321,39321,39321),rgb(BSC6_R080p50_230314_ser03_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_R080p50_230314_ser06_data)=(39321,39321,39321),rgb(BSC6_R080p50_230314_ser08_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_R080p50_230314_ser10_data)=(39321,39321,39321),rgb(BSC6_R080p50_230314_ser12_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_R080p50_230314_ser14_data)=(39321,39321,39321),rgb(BSC6_R080p50_230314_ser16_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_U090p100_230317_ser01_data)=(39321,39321,39321),rgb(BSC6_U090p100_230317_ser03_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_U090p100_230317_ser04_data)=(39321,39321,39321),rgb(BSC6_U090p100_230317_ser06_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_S090p100_230317_ser01_data)=(39321,39321,39321),rgb(BSC6_S090p100_230317_ser03_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_S090p100_230317_ser05_data)=(39321,39321,39321),rgb(BSC6_B06p20_230323_ser01_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_B07p20_230323_ser02_data)=(39321,39321,39321),rgb(BSC6_B07p20_230323_ser03_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_B07p20_230323_ser05_data)=(39321,39321,39321),rgb(BSC6_B07p20_230323_ser06_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_D06p20_230327_ser02_data)=(39321,39321,39321),rgb(BSC6_D06p20_230327_ser03_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_D06p20_230327_ser04_data)=(39321,39321,39321),rgb(BSC6_E07p20_230327_ser02_data)=(39321,39321,39321)
	ModifyGraph rgb(BSC6_E07p20_230327_ser03_data)=(39321,39321,39321),rgb(MT1p5_H06p100_ser02_data)=(52428,1,1)
	ModifyGraph rgb(MT1_L07p50_ser01_data)=(0,6405,26214),rgb(MT1_L07p50_ser02_data)=(0,6405,26214)
	ModifyGraph rgb(MT1_L06p50_ser01_data)=(16385,16388,65535),rgb(MT1_L07p50_ser03_HRS_data)=(0,6405,26214)
	ModifyGraph rgb(MT1_L07p50_ser04_LRS_data)=(0,6405,26214),rgb(MT1_L07p50_ser04_HRS_data)=(0,6405,26214)
	ModifyGraph rgb(MT1_L09p50_ser02_HRS_data)=(1,34817,52428),rgb(MT1_L10p50_ser02_LRS_data)=(16385,28398,65535)
	ModifyGraph rgb(MT1_K08p50_ser01_LRS_data)=(16385,65535,65535),rgb(MT1_K08p50_ser02_HRS_data)=(16385,65535,65535)
	ModifyGraph rgb(MT1_L10p50_ser01_HRS_data)=(52428,52425,1),rgb(MT1_K08p100_ser01_HRS_data)=(13102,26214,0)
	ModifyGraph rgb(MT1_K08p100_ser02_HRS_data)=(13102,26214,0),rgb(MT1_K08p100_ser03_LRS_data)=(13102,26214,0)
	ModifyGraph rgb(MT1_K08p100_ser04_LRS_data)=(13102,26214,0),rgb(MT1_K08p100_ser05_HRS_data)=(13102,26214,0)
	ModifyGraph rgb(MT1_K09p20_ser01_LRS_data)=(52428,1,41942),rgb(MT1_N03p50_ser06_HRS_data)=(32792,65535,1)
	ModifyGraph rgb(MT1_J08p100_ser01_HRS_data)=(26205,52428,1),rgb(MT1_J08p100_ser03_HRS_data)=(26205,52428,1)
	ModifyGraph rgb(MT1_J08p100_ser02_LRS_data)=(26205,52428,1),rgb(MT1_J08p100_ser04_LRS_data)=(26205,52428,1)
	ModifyGraph rgb(MT1_J08p50_ser01_LRS_data)=(1,52428,52428),rgb(MT1_J08p50_ser02_HRS_data)=(1,52428,52428)
	ModifyGraph rgb(MT1_K09p50_ser01_LRS_data)=(1,9611,39321),rgb(MT1_K09p50_ser02_HRS_data)=(1,9611,39321)
	ModifyGraph rgb(MT1_J09p20_ser01_LRS_data)=(65535,0,26214),rgb(MT1_J09p20_ser02_HRS_data)=(65535,0,26214)
	ModifyGraph rgb(MT1_J09p20_ser03_LRS_data)=(65535,0,26214),rgb(MT1_P03p50_ser02_LRS_data)=(39321,39319,1)
	ModifyGraph rgb(MT1_P03p50_ser03_HRS_data)=(39321,39319,1),rgb(MT1_P03p50_ser04_LRS_data)=(39321,39319,1)
	ModifyGraph rgb(MT1_P03p50_ser05_HRS_data)=(39321,39319,1),rgb(MT1_N03p50_ser01_ZERO_data)=(65535,54607,32768)
	ModifyGraph rgb(MT1_N03p50_ser02_LRS_data)=(65535,54607,32768),rgb(MT1_N03p50_ser03_LRS_data)=(65535,54607,32768)
	ModifyGraph rgb(MT1_N03p50_ser04_HRS_data)=(65535,54607,32768),rgb(MT1_N03p50_ser05_LRS_data)=(65535,54607,32768)
	ModifyGraph rgb(MT1_N03p50_ser06_HRS_data)=(65535,54607,32768),rgb(MT1_N03p50_ser07_LRS_data)=(65535,54607,32768)
	ModifyGraph rgb(MT1_N03p50_ser08_HRS_data)=(65535,54607,32768),rgb(MT1_N03p100_ser01_HRS_data)=(65535,54607,32768)
	ModifyGraph rgb(MT1_O03p50_ser01_ZERO_data)=(65535,54607,32768),rgb(MT1_O03p100_ser01_HRS_data)=(65535,54607,32768)
	ModifyGraph rgb(MT1_P03p100_ser01_ZERO_data)=(65535,54607,32768)
	ModifyGraph msize(BSC6_Q12p100_230202_data)=4,msize(BSC6_R12p50_230201_data)=4,msize(BSC6_Q12p50_230207_ser01_ONbefore1_data)=4
	ModifyGraph msize(BSC6_Q12p50_230207_ser01_ONbefore2_data)=4,msize(BSC6_Q12p50_230207_ser01_OFF1_data)=4
	ModifyGraph msize(BSC6_Q12p50_230207_ser01_OFF2_data)=4,msize(BSC6_Q12p50_230207_ser01_ONafter1_data)=4
	ModifyGraph msize(BSC6_Q12p50_230207_ser01_ONafter2_data)=4,msize(BSC6_Q12p50_230207_ser02_ONbefore_data)=4
	ModifyGraph msize(BSC6_Q12p50_230207_ser02_ONbefore2_data)=4,msize(BSC6_Q12p50_230207_ser02_OFF1_data)=4
	ModifyGraph msize(BSC6_Q12p50_230207_ser02_OFF2_data)=4,msize(BSC6_Q12p50_230207_ser02_ONafter1_data)=4
	ModifyGraph msize(BSC6_Q12p50_230207_ser02_ONafter2_data)=4,msize(BSC6_U12p50_230209_ser01_ONbefore_data)=4
	ModifyGraph msize(BSC6_U12p50_230209_ser01_ONbefore2_data)=4,msize(BSC6_U12p50_230209_ser01_OFF_data)=4
	ModifyGraph msize(BSC6_U12p50_230209_ser01_OFF2_data)=4,msize(BSC6_U12p50_230209_ser01_ONafter1_data)=4
	ModifyGraph msize(BSC6_U12p50_230209_ser01_ONafter2_data)=4,msize(BSC6_W09p100_230214_ser01_ON_data)=4
	ModifyGraph msize(BSC6_U05p20_230221_data)=4,msize(BSC6_V09p50_230221_data)=4,msize(BSC6_V09p50_230221_2nd_half_data)=4
	ModifyGraph msize(BSC6_Q12p50_230310_ser01_data)=4,msize(BSC6_R12p50_230313_linear_data)=4
	ModifyGraph msize(BSC6_U09p50_230313_linear_data)=4,msize(BSC6_U06p50_230313_linear_data)=4
	ModifyGraph msize(BSC6_W02p20_23031_data)=4,msize(BSC6_W01p20_230313_ser01_data)=4
	ModifyGraph msize(BSC6_W01p20_230313_ser02_data)=4,msize(BSC6_W01p20_230313_ser03_data)=4
	ModifyGraph msize(BSC6_E10p20_230314_data)=4,msize(BSC6_R080p20_230314_ser01_data)=4
	ModifyGraph msize(BSC6_R080p20_230314_ser02_data)=4,msize(BSC6_R080p20_230314_ser03_data)=4
	ModifyGraph msize(BSC6_R080p50_230314_ser01_data)=4,msize(BSC6_R080p50_230314_ser03_data)=4
	ModifyGraph msize(BSC6_R080p50_230314_ser06_data)=4,msize(BSC6_R080p50_230314_ser08_data)=4
	ModifyGraph msize(BSC6_R080p50_230314_ser10_data)=4,msize(BSC6_R080p50_230314_ser12_data)=4
	ModifyGraph msize(BSC6_R080p50_230314_ser14_data)=4,msize(BSC6_R080p50_230314_ser16_data)=4
	ModifyGraph msize(BSC6_U090p100_230317_ser01_data)=4,msize(BSC6_U090p100_230317_ser03_data)=4
	ModifyGraph msize(BSC6_U090p100_230317_ser04_data)=4,msize(BSC6_U090p100_230317_ser06_data)=4
	ModifyGraph msize(BSC6_S090p100_230317_ser01_data)=4,msize(BSC6_S090p100_230317_ser03_data)=4
	ModifyGraph msize(BSC6_S090p100_230317_ser05_data)=4,msize(BSC6_B06p20_230323_ser01_data)=4
	ModifyGraph msize(BSC6_B07p20_230323_ser02_data)=4,msize(BSC6_B07p20_230323_ser03_data)=4
	ModifyGraph msize(BSC6_B07p20_230323_ser05_data)=4,msize(BSC6_B07p20_230323_ser06_data)=4
	ModifyGraph msize(BSC6_D06p20_230327_ser02_data)=4,msize(BSC6_D06p20_230327_ser03_data)=4
	ModifyGraph msize(BSC6_D06p20_230327_ser04_data)=4,msize(BSC6_E07p20_230327_ser02_data)=4
	ModifyGraph msize(BSC6_E07p20_230327_ser03_data)=4,msize(MT1p5_H06p100_ser02_data)=5
	ModifyGraph msize(MT1_L07p50_ser01_data)=5,msize(MT1_L07p50_ser02_data)=5,msize(MT1_L06p50_ser01_data)=5
	ModifyGraph msize(MT1_L07p50_ser03_HRS_data)=5,msize(MT1_L07p50_ser04_LRS_data)=5
	ModifyGraph msize(MT1_L07p50_ser04_HRS_data)=5,msize(MT1_L09p50_ser02_HRS_data)=5
	ModifyGraph msize(MT1_L10p50_ser02_LRS_data)=5,msize(MT1_K08p50_ser01_LRS_data)=5
	ModifyGraph msize(MT1_K08p50_ser02_HRS_data)=5,msize(MT1_L10p50_ser01_HRS_data)=5
	ModifyGraph msize(MT1_K08p100_ser01_HRS_data)=5,msize(MT1_K08p100_ser02_HRS_data)=5
	ModifyGraph msize(MT1_K08p100_ser03_LRS_data)=5,msize(MT1_K08p100_ser04_LRS_data)=5
	ModifyGraph msize(MT1_K08p100_ser05_HRS_data)=5,msize(MT1_K09p20_ser01_LRS_data)=5
	ModifyGraph msize(MT1_N03p50_ser06_HRS_data)=5,msize(MT1_J08p100_ser01_HRS_data)=5
	ModifyGraph msize(MT1_J08p100_ser03_HRS_data)=5,msize(MT1_J08p100_ser02_LRS_data)=5
	ModifyGraph msize(MT1_J08p100_ser04_LRS_data)=5,msize(MT1_J08p50_ser01_LRS_data)=5
	ModifyGraph msize(MT1_J08p50_ser02_HRS_data)=5,msize(MT1_K09p50_ser01_LRS_data)=5
	ModifyGraph msize(MT1_K09p50_ser02_HRS_data)=5,msize(MT1_J09p20_ser01_LRS_data)=5
	ModifyGraph msize(MT1_J09p20_ser02_HRS_data)=5,msize(MT1_J09p20_ser03_LRS_data)=5
	ModifyGraph msize(MT1_P03p50_ser02_LRS_data)=5,msize(MT1_P03p50_ser03_HRS_data)=5
	ModifyGraph msize(MT1_P03p50_ser04_LRS_data)=5,msize(MT1_P03p50_ser05_HRS_data)=5
	ModifyGraph msize(MT1_N03p50_ser01_ZERO_data)=5,msize(MT1_N03p50_ser02_LRS_data)=5
	ModifyGraph msize(MT1_N03p50_ser03_LRS_data)=5,msize(MT1_N03p50_ser04_HRS_data)=5
	ModifyGraph msize(MT1_N03p50_ser05_LRS_data)=5,msize(MT1_N03p50_ser06_HRS_data)=5
	ModifyGraph msize(MT1_N03p50_ser07_LRS_data)=5,msize(MT1_N03p50_ser08_HRS_data)=5
	ModifyGraph msize(MT1_N03p100_ser01_HRS_data)=5,msize(MT1_O03p50_ser01_ZERO_data)=5
	ModifyGraph msize(MT1_O03p100_ser01_HRS_data)=5,msize(MT1_P03p100_ser01_ZERO_data)=5
	ModifyGraph mrkThick(BSC6_Q12p100_230202_data)=1,mrkThick(BSC6_R12p50_230201_data)=1
	ModifyGraph mrkThick(BSC6_Q12p50_230207_ser01_ONbefore1_data)=1,mrkThick(BSC6_Q12p50_230207_ser01_ONbefore2_data)=1
	ModifyGraph mrkThick(BSC6_Q12p50_230207_ser01_OFF1_data)=1,mrkThick(BSC6_Q12p50_230207_ser01_OFF2_data)=1
	ModifyGraph mrkThick(BSC6_Q12p50_230207_ser01_ONafter1_data)=1,mrkThick(BSC6_Q12p50_230207_ser01_ONafter2_data)=1
	ModifyGraph mrkThick(BSC6_Q12p50_230207_ser02_ONbefore_data)=1,mrkThick(BSC6_Q12p50_230207_ser02_ONbefore2_data)=1
	ModifyGraph mrkThick(BSC6_Q12p50_230207_ser02_OFF1_data)=1,mrkThick(BSC6_Q12p50_230207_ser02_OFF2_data)=1
	ModifyGraph mrkThick(BSC6_Q12p50_230207_ser02_ONafter1_data)=1,mrkThick(BSC6_Q12p50_230207_ser02_ONafter2_data)=1
	ModifyGraph mrkThick(BSC6_U12p50_230209_ser01_ONbefore_data)=1,mrkThick(BSC6_U12p50_230209_ser01_ONbefore2_data)=1
	ModifyGraph mrkThick(BSC6_U12p50_230209_ser01_OFF_data)=1,mrkThick(BSC6_U12p50_230209_ser01_OFF2_data)=1
	ModifyGraph mrkThick(BSC6_U12p50_230209_ser01_ONafter1_data)=1,mrkThick(BSC6_U12p50_230209_ser01_ONafter2_data)=1
	ModifyGraph mrkThick(BSC6_W09p100_230214_ser01_ON_data)=1,mrkThick(BSC6_U05p20_230221_data)=1
	ModifyGraph mrkThick(BSC6_V09p50_230221_data)=1,mrkThick(BSC6_V09p50_230221_2nd_half_data)=1
	ModifyGraph mrkThick(BSC6_Q12p50_230310_ser01_data)=1,mrkThick(BSC6_R12p50_230313_linear_data)=1
	ModifyGraph mrkThick(BSC6_U09p50_230313_linear_data)=1,mrkThick(BSC6_U06p50_230313_linear_data)=1
	ModifyGraph mrkThick(BSC6_W02p20_23031_data)=1,mrkThick(BSC6_W01p20_230313_ser01_data)=1
	ModifyGraph mrkThick(BSC6_W01p20_230313_ser02_data)=1,mrkThick(BSC6_W01p20_230313_ser03_data)=1
	ModifyGraph mrkThick(BSC6_E10p20_230314_data)=1,mrkThick(BSC6_R080p20_230314_ser01_data)=1
	ModifyGraph mrkThick(BSC6_R080p20_230314_ser02_data)=1,mrkThick(BSC6_R080p20_230314_ser03_data)=1
	ModifyGraph mrkThick(BSC6_R080p50_230314_ser01_data)=1,mrkThick(BSC6_R080p50_230314_ser03_data)=1
	ModifyGraph mrkThick(BSC6_R080p50_230314_ser06_data)=1,mrkThick(BSC6_R080p50_230314_ser08_data)=1
	ModifyGraph mrkThick(BSC6_R080p50_230314_ser10_data)=1,mrkThick(BSC6_R080p50_230314_ser12_data)=1
	ModifyGraph mrkThick(BSC6_R080p50_230314_ser14_data)=1,mrkThick(BSC6_R080p50_230314_ser16_data)=1
	ModifyGraph mrkThick(BSC6_U090p100_230317_ser01_data)=1,mrkThick(BSC6_U090p100_230317_ser03_data)=1
	ModifyGraph mrkThick(BSC6_U090p100_230317_ser04_data)=1,mrkThick(BSC6_U090p100_230317_ser06_data)=1
	ModifyGraph mrkThick(BSC6_S090p100_230317_ser01_data)=1,mrkThick(BSC6_S090p100_230317_ser03_data)=1
	ModifyGraph mrkThick(BSC6_S090p100_230317_ser05_data)=1,mrkThick(BSC6_B06p20_230323_ser01_data)=1
	ModifyGraph mrkThick(BSC6_B07p20_230323_ser02_data)=1,mrkThick(BSC6_B07p20_230323_ser03_data)=1
	ModifyGraph mrkThick(BSC6_B07p20_230323_ser05_data)=1,mrkThick(BSC6_B07p20_230323_ser06_data)=1
	ModifyGraph mrkThick(BSC6_D06p20_230327_ser02_data)=1,mrkThick(BSC6_D06p20_230327_ser03_data)=1
	ModifyGraph mrkThick(BSC6_D06p20_230327_ser04_data)=1,mrkThick(BSC6_E07p20_230327_ser02_data)=1
	ModifyGraph mrkThick(BSC6_E07p20_230327_ser03_data)=1,mrkThick(MT1p5_H06p100_ser02_data)=2
	ModifyGraph mrkThick(MT1_L07p50_ser01_data)=3,mrkThick(MT1_L07p50_ser02_data)=2
	ModifyGraph mrkThick(MT1_L06p50_ser01_data)=2,mrkThick(MT1_L07p50_ser03_HRS_data)=2
	ModifyGraph mrkThick(MT1_L07p50_ser04_LRS_data)=3,mrkThick(MT1_L07p50_ser04_HRS_data)=2
	ModifyGraph mrkThick(MT1_L09p50_ser02_HRS_data)=2,mrkThick(MT1_L10p50_ser02_LRS_data)=3
	ModifyGraph mrkThick(MT1_K08p50_ser01_LRS_data)=3,mrkThick(MT1_K08p50_ser02_HRS_data)=2
	ModifyGraph mrkThick(MT1_L10p50_ser01_HRS_data)=2,mrkThick(MT1_K08p100_ser01_HRS_data)=2
	ModifyGraph mrkThick(MT1_K08p100_ser02_HRS_data)=2,mrkThick(MT1_K08p100_ser03_LRS_data)=2
	ModifyGraph mrkThick(MT1_K08p100_ser04_LRS_data)=2,mrkThick(MT1_K08p100_ser05_HRS_data)=2
	ModifyGraph mrkThick(MT1_K09p20_ser01_LRS_data)=2,mrkThick(MT1_N03p50_ser06_HRS_data)=2
	ModifyGraph mrkThick(MT1_J08p100_ser01_HRS_data)=2,mrkThick(MT1_J08p100_ser03_HRS_data)=1
	ModifyGraph mrkThick(MT1_J08p100_ser02_LRS_data)=2,mrkThick(MT1_J08p100_ser04_LRS_data)=1
	ModifyGraph mrkThick(MT1_J08p50_ser01_LRS_data)=2,mrkThick(MT1_J08p50_ser02_HRS_data)=2
	ModifyGraph mrkThick(MT1_K09p50_ser01_LRS_data)=2,mrkThick(MT1_K09p50_ser02_HRS_data)=2
	ModifyGraph mrkThick(MT1_J09p20_ser01_LRS_data)=2,mrkThick(MT1_J09p20_ser02_HRS_data)=2
	ModifyGraph mrkThick(MT1_J09p20_ser03_LRS_data)=2,mrkThick(MT1_P03p50_ser02_LRS_data)=2
	ModifyGraph mrkThick(MT1_P03p50_ser03_HRS_data)=2,mrkThick(MT1_P03p50_ser04_LRS_data)=2
	ModifyGraph mrkThick(MT1_P03p50_ser05_HRS_data)=2,mrkThick(MT1_N03p50_ser01_ZERO_data)=2
	ModifyGraph mrkThick(MT1_N03p50_ser02_LRS_data)=2,mrkThick(MT1_N03p50_ser03_LRS_data)=2
	ModifyGraph mrkThick(MT1_N03p50_ser04_HRS_data)=2,mrkThick(MT1_N03p50_ser05_LRS_data)=2
	ModifyGraph mrkThick(MT1_N03p50_ser06_HRS_data)=2,mrkThick(MT1_N03p50_ser07_LRS_data)=2
	ModifyGraph mrkThick(MT1_N03p50_ser08_HRS_data)=2,mrkThick(MT1_N03p100_ser01_HRS_data)=2
	ModifyGraph mrkThick(MT1_O03p50_ser01_ZERO_data)=2,mrkThick(MT1_O03p100_ser01_HRS_data)=2
	ModifyGraph mrkThick(MT1_P03p100_ser01_ZERO_data)=2
	ModifyGraph hideTrace(MT1p5_H06p100_ser02_data)=1
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "ΔI/I @500mV"
	Label bottom "R @500mV [Ω]"
	Cursor/P A MT1_K09p50_ser01_LRS_data 0
	ShowInfo
	Legend/C/N=text0/J/F=0/M/H={15,1,10}/A=MC/X=-37.43/Y=30.18 "\\s(BSC6_Q12p100_230202_data) BSC6 chip all meas.\rNew chips"
	AppendText "\\s(MT1p5_H06p100_ser02_data) 1.5nm (one meas on 100x100)\r\\s(MT1_L07p50_ser01_data) 1nm (~10 meas on 50x50)"
	AppendText "\\s(MT1_K08p100_ser03_LRS_data) 1nm (~1 meas on 50x50)\r different shades -> different devices \r\\W5013 HRS\r\\W5006 LRS"
	AppendText "\\W5019 Not mentioned or undefined\r\\s(MT1_P03p50_ser02_LRS_data) MT1_P03p50_ser02_LRS_data[*][13][0]"
	AppendText "\\s(MT1_P03p50_ser03_HRS_data) MT1_P03p50_ser03_HRS_data[*][13][0]\r\\s(MT1_P03p50_ser04_LRS_data) MT1_P03p50_ser04_LRS_data[*][13][0]"
	AppendText "\\s(MT1_P03p50_ser05_HRS_data) MT1_P03p50_ser05_HRS_data[*][13][0]\r\\s(MT1_N03p50_ser01_ZERO_data) MT1_N03p50_ser01_ZERO_data[*][13][0]"
	AppendText "\\s(MT1_N03p50_ser02_LRS_data) MT1_N03p50_ser02_LRS_data[*][13][0]\r\\s(MT1_N03p50_ser03_LRS_data) MT1_N03p50_ser03_LRS_data[*][13][0]"
	AppendText "\\s(MT1_N03p50_ser04_HRS_data) MT1_N03p50_ser04_HRS_data[*][13][0]\r\\s(MT1_N03p50_ser05_LRS_data) MT1_N03p50_ser05_LRS_data[*][13][0]"
	AppendText "\\s(MT1_N03p50_ser06_HRS_data) MT1_N03p50_ser06_HRS_data[*][13][0]\r\\s(MT1_N03p50_ser07_LRS_data) MT1_N03p50_ser07_LRS_data[*][13][0]"
	AppendText "\\s(MT1_N03p50_ser08_HRS_data) MT1_N03p50_ser08_HRS_data[*][13][0]\r\\s(MT1_N03p100_ser01_HRS_data) MT1_N03p100_ser01_HRS_data[*][13][0]"
	AppendText "\\s(MT1_O03p50_ser01_ZERO_data) MT1_O03p50_ser01_ZERO_data[*][13][0]\r\\s(MT1_O03p100_ser01_HRS_data) MT1_O03p100_ser01_HRS_data[*][13][0]"
	AppendText "\\s(MT1_P03p100_ser01_ZERO_data) MT1_P03p100_ser01_ZERO_data[*][13][0]"
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv gstart
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 3,dash= 3
	DrawLine 630374.07925135,0.000285711208039065,63037407.9251351,0.00285711208039064
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 3,dash= 3
	DrawLine 607347.045522777,0.000285711208039065,60734704.5522778,0.0285711208039065
	SetDrawEnv fstyle= 1
	DrawText 0.154761904761904,0.737885462555066,"m=1"
	SetDrawEnv fstyle= 1
	DrawText 0.16005291005291,0.863436123348017,"m=0.5"
	SetDrawEnv gstop
EndMacro

Window MT1_Avgs_dIpI_vs_R() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Saved_Results:
	Display /W=(56.25,72.5,650.25,524.75) MT1_HRSs_pos_SortedByResistance[*][13][0] vs MT1_HRSs_pos_SortedByResistance[*][2][0]
	AppendToGraph MT1_LRSs_pos_SortedByResistance[*][13][0] vs MT1_LRSs_pos_SortedByResistance[*][2][0]
	AppendToGraph MT1_HRSs_neg_SortedByResistance[*][13][0] vs MT1_HRSs_neg_SortedByResistance[*][2][0]
	AppendToGraph MT1_LRSs_neg_SortedByResistance[*][13][0] vs MT1_LRSs_neg_SortedByResistance[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker(MT1_HRSs_pos_SortedByResistance)=19,marker(MT1_LRSs_pos_SortedByResistance)=19
	ModifyGraph marker(MT1_HRSs_neg_SortedByResistance)=26,marker(MT1_LRSs_neg_SortedByResistance)=26
	ModifyGraph rgb(MT1_HRSs_pos_SortedByResistance)=(39321,1,1)
	ModifyGraph msize=5
	ModifyGraph mrkThick=1
	ModifyGraph zColor(MT1_HRSs_pos_SortedByResistance)={:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][29][0],10,20000,Red}
	ModifyGraph zColor(MT1_LRSs_pos_SortedByResistance)={:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][29][0],10,20000,Blue}
	ModifyGraph zColor(MT1_HRSs_neg_SortedByResistance)={:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][29][0],10,20000,Red}
	ModifyGraph zColor(MT1_LRSs_neg_SortedByResistance)={:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][29][0],10,20000,Blue}
	ModifyGraph logZColor=1
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=2
	Label left "ΔI/I"
	Label bottom "R [Ω]"
	SetAxis left 0.0002,0.006
	ErrorBars MT1_HRSs_pos_SortedByResistance XY,wave=(:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][2][1],:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][13][1],:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][13][1])
	ErrorBars MT1_LRSs_pos_SortedByResistance XY,wave=(:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][2][1],:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][13][1],:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][13][1])
	ErrorBars MT1_HRSs_neg_SortedByResistance XY,wave=(:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][2][1],:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][13][1],:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][13][1])
	ErrorBars MT1_LRSs_neg_SortedByResistance XY,wave=(:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][2][1],:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][13][1],:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][13][1])
	Cursor/P A MT1_HRSs_pos_SortedByResistance 8;Cursor/P B MT1_LRSs_pos_SortedByResistance 12
	ShowInfo
	TextBox/C/N=text0/F=0/M/H={15,1,10}/A=MC/X=16.99/Y=-39.84 "Method: 1 avg. data point / measurement series (state)\rMarkes: \\W5026/\\W5019 -Data at -/+500mV"
	AppendText "Colors:\\f01\\K(1,4,52428)\\k(1,4,52428) LRS /\\K(65535,0,0) HRS\r\\f00\\K(0,0,0)Shades: Dark to bright - 20x20μm to 100x100μm"
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv gstart
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 590372.027380818,0.000280822895495607,59037202.738082,0.00280822895495606
	SetDrawEnv linethick= 2,fstyle= 1
	DrawText 0.512757040800816,0.0817914287296948,"m=1"
	SetDrawEnv linethick= 2,fstyle= 1
	DrawText 0.800727784653913,0.254090057002321,"m=0.5"
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 590372.027380818,0.00028,59037202.738082,0.000885438
	SetDrawEnv linethick= 2,fstyle= 1
	DrawText 0.817067653934959,0.573195748059231,"m=0.25"
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 570393.552325241,0.000280634890986555,11860960.4413521,0.00583636083547873
	SetDrawEnv gstop
EndMacro

Window MT1_Avgs_dIpI_vs_A() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Saved_Results:
	Display /W=(455.25,119.75,1049.25,572) MT1_HRSs_pos_SortedByResistance[*][13][0] vs MT1_HRSs_pos_SortedByResistance[*][29][0]
	AppendToGraph MT1_LRSs_pos_SortedByResistance[*][13][0] vs MT1_LRSs_pos_SortedByResistance[*][29][0]
	AppendToGraph MT1_HRSs_neg_SortedByResistance[*][13][0] vs MT1_HRSs_neg_SortedByResistance[*][29][0]
	AppendToGraph MT1_LRSs_neg_SortedByResistance[*][13][0] vs MT1_LRSs_neg_SortedByResistance[*][29][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker(MT1_HRSs_pos_SortedByResistance)=19,marker(MT1_LRSs_pos_SortedByResistance)=19
	ModifyGraph marker(MT1_HRSs_neg_SortedByResistance)=26,marker(MT1_LRSs_neg_SortedByResistance)=26
	ModifyGraph rgb(MT1_HRSs_pos_SortedByResistance)=(39321,1,1)
	ModifyGraph msize=5
	ModifyGraph mrkThick=1
	ModifyGraph zColor(MT1_HRSs_pos_SortedByResistance)={:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][29][0],10,20000,Red}
	ModifyGraph zColor(MT1_LRSs_pos_SortedByResistance)={:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][29][0],10,20000,Blue}
	ModifyGraph zColor(MT1_HRSs_neg_SortedByResistance)={:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][29][0],10,20000,Red}
	ModifyGraph zColor(MT1_LRSs_neg_SortedByResistance)={:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][29][0],10,20000,Blue}
	ModifyGraph logZColor=1
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=2
	Label left "ΔI/I"
	Label bottom "R [Ω]"
	ErrorBars MT1_HRSs_pos_SortedByResistance XY,wave=(:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][29][1],:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][29][1]),wave=(:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][13][1],:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][13][1])
	ErrorBars MT1_LRSs_pos_SortedByResistance XY,wave=(:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][29][1],:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][29][1]),wave=(:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][13][1],:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][13][1])
	ErrorBars MT1_HRSs_neg_SortedByResistance XY,wave=(:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][29][1],:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][29][1]),wave=(:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][13][1],:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][13][1])
	ErrorBars MT1_LRSs_neg_SortedByResistance XY,wave=(:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][29][1],:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][29][1]),wave=(:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][13][1],:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][13][1])
	Cursor/P A MT1_HRSs_pos_SortedByResistance 1;Cursor/P B MT1_LRSs_pos_SortedByResistance 12
	ShowInfo
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv xcoord= bottom,ycoord= left
	DrawLine 607527.524369663,0.000307925052210153,60752752.4369661,0.00307925052210153
EndMacro

Window MT1_Neg_dIpI_Res_vs_Area() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_240515:
	Display /W=(710.25,78.5,1304.25,530.75) MT1_Results_HRS_CNRLog[*][0],MT1_Results_LRS_CNRLog[*][0] vs MT1_Results_DevAreaLog
	AppendToGraph/R MT1_Results_HRS_ResLog[*][0],MT1_Results_LRS_ResLog[*][0] vs MT1_Results_DevAreaLog
	AppendToGraph/R fit_MT1_Results_HRS_ResLog_Neg,fit_MT1_Results_LRS_ResLog_Neg
	AppendToGraph fit_MT1_Results_LRS_CNRLog_Neg,fit_MT1_Results_HRS_CNRLog_Neg
	ModifyGraph userticks(left)={CNR_labels_values,CNR_labels}
	ModifyGraph userticks(bottom)={Area_labels_values,Area_labels}
	ModifyGraph userticks(right)={R_labels_values,R_labels}
	SetDataFolder fldrSav0
	ModifyGraph mode(MT1_Results_HRS_CNRLog)=3,mode(MT1_Results_LRS_CNRLog)=3,mode(MT1_Results_HRS_ResLog)=3
	ModifyGraph mode(MT1_Results_LRS_ResLog)=3
	ModifyGraph marker(MT1_Results_HRS_CNRLog)=19,marker(MT1_Results_LRS_CNRLog)=19
	ModifyGraph marker(MT1_Results_HRS_ResLog)=16,marker(MT1_Results_LRS_ResLog)=16
	ModifyGraph lSize(fit_MT1_Results_HRS_ResLog_Neg)=2,lSize(fit_MT1_Results_LRS_ResLog_Neg)=2
	ModifyGraph lSize(fit_MT1_Results_LRS_CNRLog_Neg)=2,lSize(fit_MT1_Results_HRS_CNRLog_Neg)=2
	ModifyGraph lStyle(fit_MT1_Results_HRS_ResLog_Neg)=3,lStyle(fit_MT1_Results_LRS_ResLog_Neg)=3
	ModifyGraph lStyle(fit_MT1_Results_LRS_CNRLog_Neg)=3,lStyle(fit_MT1_Results_HRS_CNRLog_Neg)=3
	ModifyGraph rgb(MT1_Results_HRS_CNRLog)=(52428,1,1),rgb(MT1_Results_LRS_CNRLog)=(0,0,65535)
	ModifyGraph rgb(MT1_Results_HRS_ResLog)=(65535,16385,16385),rgb(MT1_Results_LRS_ResLog)=(16385,28398,65535)
	ModifyGraph rgb(fit_MT1_Results_HRS_ResLog_Neg)=(65535,16385,16385),rgb(fit_MT1_Results_LRS_ResLog_Neg)=(16385,28398,65535)
	ModifyGraph rgb(fit_MT1_Results_LRS_CNRLog_Neg)=(0,0,65535),rgb(fit_MT1_Results_HRS_CNRLog_Neg)=(52428,1,1)
	ModifyGraph msize(MT1_Results_HRS_CNRLog)=5,msize(MT1_Results_LRS_CNRLog)=5,msize(MT1_Results_HRS_ResLog)=5
	ModifyGraph msize(MT1_Results_LRS_ResLog)=5
	ModifyGraph mrkThick(MT1_Results_HRS_CNRLog)=1,mrkThick(MT1_Results_LRS_CNRLog)=1
	ModifyGraph mrkThick(MT1_Results_HRS_ResLog)=1,mrkThick(MT1_Results_LRS_ResLog)=1
	ModifyGraph tick=2
	ModifyGraph mirror(bottom)=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "∆I/I"
	Label bottom "Area [μm\\S2\\M]"
	Label right "R [Ω]"
	SetAxis left -3.5,-1.5
	SetAxis bottom 2.5,4.1
	SetAxis right 4,8
	ErrorBars MT1_Results_HRS_CNRLog Y,wave=(:Evaluation_240515:MT1_Results_HRS_CNRLog[*][0][1],:Evaluation_240515:MT1_Results_HRS_CNRLog[*][0][1])
	ErrorBars MT1_Results_LRS_CNRLog Y,wave=(:Evaluation_240515:MT1_Results_LRS_CNRLog[*][0][1],:Evaluation_240515:MT1_Results_LRS_CNRLog[*][0][1])
	ErrorBars MT1_Results_HRS_ResLog Y,wave=(:Evaluation_240515:MT1_Results_HRS_ResLog[*][0][1],:Evaluation_240515:MT1_Results_HRS_ResLog[*][0][1])
	ErrorBars MT1_Results_LRS_ResLog Y,wave=(:Evaluation_240515:MT1_Results_LRS_ResLog[*][0][1],:Evaluation_240515:MT1_Results_LRS_ResLog[*][0][1])
	Cursor/P A MT1_Results_LRS_CNRLog 0;Cursor/P B MT1_Results_LRS_CNRLog 2
	ShowInfo
	Legend/C/N=text0/J/F=0/M/H={15,1,10}/A=MC/X=30.24/Y=38.24 "\\Z18\\s(MT1_Results_HRS_ResLog) \\s(MT1_Results_LRS_ResLog)  R - HRS/LRS"
	AppendText "\n\\s(MT1_Results_HRS_CNRLog) \\s(MT1_Results_LRS_CNRLog)  ∆I/I - HRS/LRS"
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv linethick= 6,arrow= 1,arrowlen= 15,arrowfat= 0.7
	DrawLine 0.732248520710059,0.239234449760766,0.892011834319527,0.239234449760766
	SetDrawEnv linethick= 6,arrow= 2,arrowlen= 15,arrowfat= 0.7
	DrawLine 0.0813609467455621,0.633971291866029,0.24112426035503,0.633971291866029
	SetDrawEnv fstyle= 1,textrgb= (65535,16385,16385)
	DrawText 0.209417596034697,0.120098039215686,"m = -1.03"
	SetDrawEnv fstyle= 1,textrgb= (16385,28398,65535)
	DrawText 0.208178438661711,0.247549019607843,"m = -1.02"
	SetDrawEnv fstyle= 1,textrgb= (52428,1,1)
	DrawText 0.874845105328377,0.715686274509803,"m = 0"
	SetDrawEnv fstyle= 1,textrgb= (0,0,65535)
	DrawText 0.869888475836432,0.914215686274509,"m = -0.24"
EndMacro

Window MT1_Pos_dIpI_Res_vs_Area() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_240515:
	Display /W=(108.75,65.75,702.75,518) MT1_Results_HRS_CNRLog[*][1],MT1_Results_LRS_CNRLog[*][1] vs MT1_Results_DevAreaLog
	AppendToGraph/R MT1_Results_HRS_ResLog[*][1],MT1_Results_LRS_ResLog[*][1] vs MT1_Results_DevAreaLog
	AppendToGraph/R fit_MT1_Results_HRS_ResLog,fit_MT1_Results_LRS_ResLog
	AppendToGraph fit_MT1_Results_LRS_CNRLog,fit_MT1_Results_HRS_CNRLog
	ModifyGraph userticks(left)={CNR_labels_values,CNR_labels}
	ModifyGraph userticks(bottom)={Area_labels_values,Area_labels}
	ModifyGraph userticks(right)={R_labels_values,R_labels}
	SetDataFolder fldrSav0
	ModifyGraph mode(MT1_Results_HRS_CNRLog)=3,mode(MT1_Results_LRS_CNRLog)=3,mode(MT1_Results_HRS_ResLog)=3
	ModifyGraph mode(MT1_Results_LRS_ResLog)=3
	ModifyGraph marker(MT1_Results_HRS_CNRLog)=19,marker(MT1_Results_LRS_CNRLog)=19
	ModifyGraph marker(MT1_Results_HRS_ResLog)=16,marker(MT1_Results_LRS_ResLog)=16
	ModifyGraph lSize(fit_MT1_Results_HRS_ResLog)=2,lSize(fit_MT1_Results_LRS_ResLog)=2
	ModifyGraph lSize(fit_MT1_Results_LRS_CNRLog)=2,lSize(fit_MT1_Results_HRS_CNRLog)=2
	ModifyGraph lStyle(fit_MT1_Results_HRS_ResLog)=3,lStyle(fit_MT1_Results_LRS_ResLog)=3
	ModifyGraph lStyle(fit_MT1_Results_LRS_CNRLog)=3,lStyle(fit_MT1_Results_HRS_CNRLog)=3
	ModifyGraph rgb(MT1_Results_HRS_CNRLog)=(52428,1,1),rgb(MT1_Results_LRS_CNRLog)=(0,0,65535)
	ModifyGraph rgb(MT1_Results_HRS_ResLog)=(65535,16385,16385),rgb(MT1_Results_LRS_ResLog)=(16385,28398,65535)
	ModifyGraph rgb(fit_MT1_Results_HRS_ResLog)=(65535,16385,16385),rgb(fit_MT1_Results_LRS_ResLog)=(16385,28398,65535)
	ModifyGraph rgb(fit_MT1_Results_LRS_CNRLog)=(0,0,65535),rgb(fit_MT1_Results_HRS_CNRLog)=(52428,1,1)
	ModifyGraph msize(MT1_Results_HRS_CNRLog)=5,msize(MT1_Results_LRS_CNRLog)=5,msize(MT1_Results_HRS_ResLog)=5
	ModifyGraph msize(MT1_Results_LRS_ResLog)=5
	ModifyGraph mrkThick(MT1_Results_HRS_CNRLog)=1,mrkThick(MT1_Results_LRS_CNRLog)=1
	ModifyGraph mrkThick(MT1_Results_HRS_ResLog)=1,mrkThick(MT1_Results_LRS_ResLog)=1
	ModifyGraph tick=2
	ModifyGraph mirror(bottom)=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "∆I/I"
	Label bottom "Area [μm\\S2\\M]"
	Label right "R [Ω]"
	SetAxis left -3.5,-1.5
	SetAxis bottom 2.5,4.1
	SetAxis right 4,8
	ErrorBars MT1_Results_HRS_CNRLog Y,wave=(:Evaluation_240515:MT1_Results_HRS_CNRLog[*][1][1],:Evaluation_240515:MT1_Results_HRS_CNRLog[*][1][1])
	ErrorBars MT1_Results_LRS_CNRLog Y,wave=(:Evaluation_240515:MT1_Results_LRS_CNRLog[*][1][1],:Evaluation_240515:MT1_Results_LRS_CNRLog[*][1][1])
	ErrorBars MT1_Results_HRS_ResLog Y,wave=(:Evaluation_240515:MT1_Results_HRS_ResLog[*][1][1],:Evaluation_240515:MT1_Results_HRS_ResLog[*][1][1])
	ErrorBars MT1_Results_LRS_ResLog Y,wave=(:Evaluation_240515:MT1_Results_LRS_ResLog[*][1][1],:Evaluation_240515:MT1_Results_LRS_ResLog[*][1][1])
	Cursor/P A MT1_Results_LRS_CNRLog 0;Cursor/P B MT1_Results_LRS_CNRLog 2
	ShowInfo
	Legend/C/N=text0/J/F=0/M/H={15,1,10}/A=MC/X=30.24/Y=38.24 "\\Z18\\s(MT1_Results_HRS_ResLog) \\s(MT1_Results_LRS_ResLog)  R - HRS/LRS"
	AppendText "\n\\s(MT1_Results_HRS_CNRLog) \\s(MT1_Results_LRS_CNRLog)  ∆I/I - HRS/LRS"
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv linethick= 6,arrow= 1,arrowlen= 15,arrowfat= 0.7
	DrawLine 0.732248520710059,0.239234449760766,0.892011834319527,0.239234449760766
	SetDrawEnv linethick= 6,arrow= 2,arrowlen= 15,arrowfat= 0.7
	DrawLine 0.0813609467455621,0.633971291866029,0.24112426035503,0.633971291866029
	SetDrawEnv fstyle= 1,textrgb= (65535,16385,16385)
	DrawText 0.206939281288724,0.0955882352941174,"m = -1.04"
	SetDrawEnv fstyle= 1,textrgb= (16385,28398,65535)
	DrawText 0.208178438661711,0.215686274509804,"m = -1.01"
	SetDrawEnv fstyle= 1,textrgb= (52428,1,1)
	DrawText 0.845105328376704,0.713235294117646,"m = 0.05"
	SetDrawEnv fstyle= 1,textrgb= (0,0,65535)
	DrawText 0.85006195786865,0.870098039215685,"m = -0.15"
EndMacro

Window Area_Avg_dIpI_vs_R() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_240515:
	Display /W=(501,94.25,1095,545.75) MT1_Results_HRS_CNRLog[*][0][0] vs MT1_Results_HRS_ResLog[*][0][0]
	AppendToGraph MT1_Results_HRS_CNRLog[*][1][0] vs MT1_Results_HRS_ResLog[*][1][0]
	AppendToGraph MT1_Results_LRS_CNRLog[*][0][0] vs MT1_Results_LRS_ResLog[*][0][0]
	AppendToGraph MT1_Results_LRS_CNRLog[*][1][0] vs MT1_Results_LRS_ResLog[*][1][0]
	ModifyGraph userticks(left)={CNR_labels_values,CNR_labels}
	ModifyGraph userticks(bottom)={R_labels_values,R_labels}
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker(MT1_Results_HRS_CNRLog)=26,marker(MT1_Results_HRS_CNRLog#1)=19
	ModifyGraph marker(MT1_Results_LRS_CNRLog)=26,marker(MT1_Results_LRS_CNRLog#1)=19
	ModifyGraph rgb(MT1_Results_HRS_CNRLog)=(52428,1,1),rgb(MT1_Results_HRS_CNRLog#1)=(52428,1,1)
	ModifyGraph rgb(MT1_Results_LRS_CNRLog)=(1,4,52428),rgb(MT1_Results_LRS_CNRLog#1)=(1,4,52428)
	ModifyGraph msize=4
	ModifyGraph mrkThick=1
	ModifyGraph zColor(MT1_Results_HRS_CNRLog)={:Evaluation_240515:MT1_Results_DevAreaLog,1,4.33,Red}
	ModifyGraph zColor(MT1_Results_HRS_CNRLog#1)={:Evaluation_240515:MT1_Results_DevAreaLog,1,4.33,Red}
	ModifyGraph zColor(MT1_Results_LRS_CNRLog)={:Evaluation_240515:MT1_Results_DevAreaLog,1,4.33,Blue}
	ModifyGraph zColor(MT1_Results_LRS_CNRLog#1)={:Evaluation_240515:MT1_Results_DevAreaLog,1,4.33,Blue}
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "∆I/I"
	Label bottom "R [Ω]"
	SetAxis left -3.69897,-2.22185
	SetAxis bottom 5.6,8
	ErrorBars MT1_Results_HRS_CNRLog XY,wave=(:Evaluation_240515:MT1_Results_HRS_CNRLog[*][0][1],:Evaluation_240515:MT1_Results_HRS_CNRLog[*][0][1]),wave=(:Evaluation_240515:MT1_Results_HRS_CNRLog[*][0][1],:Evaluation_240515:MT1_Results_HRS_CNRLog[*][0][1])
	ErrorBars MT1_Results_HRS_CNRLog#1 XY,wave=(:Evaluation_240515:MT1_Results_HRS_CNRLog[*][1][1],:Evaluation_240515:MT1_Results_HRS_CNRLog[*][1][1]),wave=(:Evaluation_240515:MT1_Results_HRS_CNRLog[*][1][1],:Evaluation_240515:MT1_Results_HRS_CNRLog[*][1][1])
	ErrorBars MT1_Results_LRS_CNRLog XY,wave=(:Evaluation_240515:MT1_Results_LRS_CNRLog[*][0][1],:Evaluation_240515:MT1_Results_LRS_CNRLog[*][0][1]),wave=(:Evaluation_240515:MT1_Results_LRS_CNRLog[*][0][1],:Evaluation_240515:MT1_Results_LRS_CNRLog[*][0][1])
	ErrorBars MT1_Results_LRS_CNRLog#1 XY,wave=(:Evaluation_240515:MT1_Results_LRS_CNRLog[*][1][1],:Evaluation_240515:MT1_Results_LRS_CNRLog[*][1][1]),wave=(:Evaluation_240515:MT1_Results_LRS_CNRLog[*][1][1],:Evaluation_240515:MT1_Results_LRS_CNRLog[*][1][1])
	ShowInfo
	TextBox/C/N=text0/F=0/M/H={15,1,10}/A=MC/X=20.69/Y=-41.41 "Method: 1 avg data point / device size\rMarkes: \\W5026/\\W5019 -Data at -/+500mV"
	AppendText "Colors:\\f01\\K(1,4,52428)\\k(1,4,52428) LRS /\\K(65535,0,0) HRS\r\\f00\\K(0,0,0)Shades: Dark to bright - 20x20μm to 100x100μm"
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 5.79695914782487,-3.47084454259019,6.99695914782487,-2.27084454259019
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 5.79695914782487,-3.4708445425902,7.79695914782487,-2.4708445425902
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 5.79695914782487,-3.4708445425902,7.79695914782487,-2.9708445425902
	SetDrawEnv fstyle= 1
	DrawText 0.254254366323333,0.747147970260098,"m=0.5"
	SetDrawEnv fstyle= 1
	DrawText 0.214397671294223,0.841966957527598,"m=0.25"
	SetDrawEnv fstyle= 1
	DrawText 0.159034930586656,0.621042572987653,"m=1"
EndMacro

Window MT1_Avgs_dIpI_vs_R_neg() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Saved_Results:
	Display /W=(56.25,72.5,650.25,524.75) MT1_HRSs_pos_SortedByResistance[*][13][0] vs MT1_HRSs_pos_SortedByResistance[*][2][0]
	AppendToGraph MT1_LRSs_pos_SortedByResistance[*][13][0] vs MT1_LRSs_pos_SortedByResistance[*][2][0]
	AppendToGraph MT1_HRSs_neg_SortedByResistance[*][13][0] vs MT1_HRSs_neg_SortedByResistance[*][2][0]
	AppendToGraph MT1_LRSs_neg_SortedByResistance[*][13][0] vs MT1_LRSs_neg_SortedByResistance[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker(MT1_HRSs_pos_SortedByResistance)=19,marker(MT1_LRSs_pos_SortedByResistance)=19
	ModifyGraph marker(MT1_HRSs_neg_SortedByResistance)=26,marker(MT1_LRSs_neg_SortedByResistance)=26
	ModifyGraph rgb(MT1_HRSs_pos_SortedByResistance)=(39321,1,1)
	ModifyGraph msize=5
	ModifyGraph mrkThick=1
	ModifyGraph hideTrace(MT1_HRSs_pos_SortedByResistance)=1,hideTrace(MT1_LRSs_pos_SortedByResistance)=1
	ModifyGraph zColor(MT1_HRSs_pos_SortedByResistance)={:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][29][0],10,20000,Red}
	ModifyGraph zColor(MT1_LRSs_pos_SortedByResistance)={:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][29][0],10,20000,Blue}
	ModifyGraph zColor(MT1_HRSs_neg_SortedByResistance)={:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][29][0],10,20000,Red}
	ModifyGraph zColor(MT1_LRSs_neg_SortedByResistance)={:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][29][0],10,20000,Blue}
	ModifyGraph logZColor=1
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=2
	Label left "ΔI/I"
	Label bottom "R [Ω]"
	SetAxis left 0.0002,0.006
	ErrorBars MT1_HRSs_pos_SortedByResistance XY,wave=(:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][2][1],:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][13][1],:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][13][1])
	ErrorBars MT1_LRSs_pos_SortedByResistance XY,wave=(:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][2][1],:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][13][1],:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][13][1])
	ErrorBars MT1_HRSs_neg_SortedByResistance XY,wave=(:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][2][1],:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][13][1],:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][13][1])
	ErrorBars MT1_LRSs_neg_SortedByResistance XY,wave=(:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][2][1],:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][13][1],:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][13][1])
	Cursor/P A MT1_HRSs_pos_SortedByResistance 8;Cursor/P B MT1_LRSs_pos_SortedByResistance 12
	ShowInfo
	TextBox/C/N=text0/F=0/M/H={15,1,10}/A=MC/X=16.99/Y=-39.84 "Method: 1 avg. data point / measurement series (state)\rMarkes: \\W5026/\\W5019 -Data at -/+500mV"
	AppendText "Colors:\\f01\\K(1,4,52428)\\k(1,4,52428) LRS /\\K(65535,0,0) HRS\r\\f00\\K(0,0,0)Shades: Dark to bright - 20x20μm to 100x100μm"
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv gstart
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 590372.027380818,0.000280822895495607,59037202.738082,0.00280822895495606
	SetDrawEnv linethick= 2,fstyle= 1
	DrawText 0.512757040800816,0.0817914287296948,"m=1"
	SetDrawEnv linethick= 2,fstyle= 1
	DrawText 0.800727784653913,0.254090057002321,"m=0.5"
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 590372.027380818,0.00028,59037202.738082,0.000885438
	SetDrawEnv linethick= 2,fstyle= 1
	DrawText 0.817067653934959,0.573195748059231,"m=0.25"
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 570393.552325241,0.000280634890986555,11860960.4413521,0.00583636083547873
	SetDrawEnv gstop
EndMacro

Window MT1_Avgs_dIpI_vs_R_pos() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Saved_Results:
	Display /W=(56.25,72.5,650.25,524.75) MT1_HRSs_pos_SortedByResistance[*][13][0] vs MT1_HRSs_pos_SortedByResistance[*][2][0]
	AppendToGraph MT1_LRSs_pos_SortedByResistance[*][13][0] vs MT1_LRSs_pos_SortedByResistance[*][2][0]
	AppendToGraph MT1_HRSs_neg_SortedByResistance[*][13][0] vs MT1_HRSs_neg_SortedByResistance[*][2][0]
	AppendToGraph MT1_LRSs_neg_SortedByResistance[*][13][0] vs MT1_LRSs_neg_SortedByResistance[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker(MT1_HRSs_pos_SortedByResistance)=19,marker(MT1_LRSs_pos_SortedByResistance)=19
	ModifyGraph marker(MT1_HRSs_neg_SortedByResistance)=26,marker(MT1_LRSs_neg_SortedByResistance)=26
	ModifyGraph rgb(MT1_HRSs_pos_SortedByResistance)=(39321,1,1)
	ModifyGraph msize=5
	ModifyGraph mrkThick=1
	ModifyGraph hideTrace(MT1_HRSs_neg_SortedByResistance)=1,hideTrace(MT1_LRSs_neg_SortedByResistance)=1
	ModifyGraph zColor(MT1_HRSs_pos_SortedByResistance)={:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][29][0],10,20000,Red}
	ModifyGraph zColor(MT1_LRSs_pos_SortedByResistance)={:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][29][0],10,20000,Blue}
	ModifyGraph zColor(MT1_HRSs_neg_SortedByResistance)={:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][29][0],10,20000,Red}
	ModifyGraph zColor(MT1_LRSs_neg_SortedByResistance)={:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][29][0],10,20000,Blue}
	ModifyGraph logZColor=1
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=2
	Label left "ΔI/I"
	Label bottom "R [Ω]"
	SetAxis left 0.0002,0.006
	ErrorBars MT1_HRSs_pos_SortedByResistance XY,wave=(:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][2][1],:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][13][1],:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][13][1])
	ErrorBars MT1_LRSs_pos_SortedByResistance XY,wave=(:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][2][1],:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][13][1],:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][13][1])
	ErrorBars MT1_HRSs_neg_SortedByResistance XY,wave=(:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][2][1],:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][13][1],:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][13][1])
	ErrorBars MT1_LRSs_neg_SortedByResistance XY,wave=(:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][2][1],:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][13][1],:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][13][1])
	Cursor/P A MT1_HRSs_pos_SortedByResistance 8;Cursor/P B MT1_LRSs_pos_SortedByResistance 12
	ShowInfo
	TextBox/C/N=text0/F=0/M/H={15,1,10}/A=MC/X=16.99/Y=-39.84 "Method: 1 avg. data point / measurement series (state)\rMarkes: \\W5026/\\W5019 -Data at -/+500mV"
	AppendText "Colors:\\f01\\K(1,4,52428)\\k(1,4,52428) LRS /\\K(65535,0,0) HRS\r\\f00\\K(0,0,0)Shades: Dark to bright - 20x20μm to 100x100μm"
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv gstart
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 795719.004896941,0.000465156268534411,79571900.4896946,0.00465156268534409
	SetDrawEnv linethick= 2,fstyle= 1
	DrawText 0.491515210735457,0.0817914287296948,"m=1"
	SetDrawEnv linethick= 2,fstyle= 1
	DrawText 0.859551314065678,0.105716073262484,"m=0.5"
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 795719.004896941,0.000463793220847523,79571900.4896946,0.00146664336385996
	SetDrawEnv linethick= 2,fstyle= 1
	DrawText 0.875891183346724,0.424821764319394,"m=0.25"
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 768791.488765952,0.000464844857045886,9801626.77362682,0.0059176148077475
	SetDrawEnv gstop
EndMacro

Window K09p100_ser01_PSD() : Graph
	PauseUpdate; Silent 1		// building window...
	Display /W=(56.25,72.5,654,413) 'MT1_K09p100_ser01_LRS_-500mV_1_Segm_0_CH0','MT1_K09p100_ser01_LRS_-500mV_2_Segm_0_CH0'
	AppendToGraph 'MT1_K09p100_ser01_LRS_-500mV_3_Segm_0_CH0','MT1_K09p100_ser01_LRS_-350mV_1_Segm_0_CH0'
	AppendToGraph 'MT1_K09p100_ser01_LRS_-350mV_2_Segm_0_CH0','MT1_K09p100_ser01_LRS_-200mV_1_Segm_0_CH0'
	AppendToGraph 'MT1_K09p100_ser01_LRS_-200mV_2_Segm_0_CH0','MT1_K09p100_ser01_LRS_-100mV_1_Segm_0_CH0'
	AppendToGraph 'MT1_K09p100_ser01_LRS_-100mV_2_Segm_0_CH0',MT1_K09p100_ser01_LRS_0mV_1_Segm_0_CH0
	AppendToGraph MT1_K09p100_ser01_LRS_0mV_2_Segm_0_CH0,MT1_K09p100_ser01_LRS_100mV_1_Segm_0_CH0
	AppendToGraph MT1_K09p100_ser01_LRS_100mV_2_Segm_0_CH0,MT1_K09p100_ser01_LRS_200mV_1_Segm_0_CH0
	AppendToGraph MT1_K09p100_ser01_LRS_200mV_2_Segm_0_CH0,MT1_K09p100_ser01_LRS_350mV_1_Segm_0_CH0
	AppendToGraph MT1_K09p100_ser01_LRS_350mV_2_Segm_0_CH0,MT1_K09p100_ser01_LRS_500mV_1_Segm_0_CH0
	AppendToGraph MT1_K09p100_ser01_LRS_500mV_2_Segm_0_CH0,MT1_K09p100_ser01_LRS_500mV_3_Segm_0_CH0
	ModifyGraph lSize=2
	ModifyGraph rgb('MT1_K09p100_ser01_LRS_-500mV_1_Segm_0_CH0')=(65535,21845,0),rgb('MT1_K09p100_ser01_LRS_-500mV_2_Segm_0_CH0')=(65535,21845,0)
	ModifyGraph rgb('MT1_K09p100_ser01_LRS_-500mV_3_Segm_0_CH0')=(65535,21845,0),rgb('MT1_K09p100_ser01_LRS_-350mV_1_Segm_0_CH0')=(65535,16385,16385)
	ModifyGraph rgb('MT1_K09p100_ser01_LRS_-350mV_2_Segm_0_CH0')=(65535,16385,16385)
	ModifyGraph rgb('MT1_K09p100_ser01_LRS_-200mV_1_Segm_0_CH0')=(52428,1,1),rgb('MT1_K09p100_ser01_LRS_-200mV_2_Segm_0_CH0')=(52428,1,1)
	ModifyGraph rgb('MT1_K09p100_ser01_LRS_-100mV_1_Segm_0_CH0')=(26214,0,0),rgb('MT1_K09p100_ser01_LRS_-100mV_2_Segm_0_CH0')=(26214,0,0)
	ModifyGraph rgb(MT1_K09p100_ser01_LRS_0mV_1_Segm_0_CH0)=(0,0,0),rgb(MT1_K09p100_ser01_LRS_0mV_2_Segm_0_CH0)=(0,0,0)
	ModifyGraph rgb(MT1_K09p100_ser01_LRS_100mV_1_Segm_0_CH0)=(26214,0,0),rgb(MT1_K09p100_ser01_LRS_100mV_2_Segm_0_CH0)=(26214,0,0)
	ModifyGraph rgb(MT1_K09p100_ser01_LRS_200mV_1_Segm_0_CH0)=(52428,1,1),rgb(MT1_K09p100_ser01_LRS_200mV_2_Segm_0_CH0)=(52428,1,1)
	ModifyGraph rgb(MT1_K09p100_ser01_LRS_350mV_1_Segm_0_CH0)=(65535,16385,16385),rgb(MT1_K09p100_ser01_LRS_350mV_2_Segm_0_CH0)=(65535,16385,16385)
	ModifyGraph rgb(MT1_K09p100_ser01_LRS_500mV_1_Segm_0_CH0)=(65535,21845,0),rgb(MT1_K09p100_ser01_LRS_500mV_2_Segm_0_CH0)=(65535,21845,0)
	ModifyGraph rgb(MT1_K09p100_ser01_LRS_500mV_3_Segm_0_CH0)=(65535,21845,0)
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "sqrt(S\\BI\\M) [A/sqrt(HZ)]"
	Label bottom "f [Hz]"
	SetAxis left 3e-13,1e-09
	Legend/C/N=text0/J/F=0/M/H={15,1,10}/A=MC/X=22.87/Y=20.62 "\\Z18\\s(MT1_K09p100_ser01_LRS_0mV_2_Segm_0_CH0) 0mV"
	AppendText "\\s(MT1_K09p100_ser01_LRS_100mV_1_Segm_0_CH0) 100mV\r\\s(MT1_K09p100_ser01_LRS_200mV_1_Segm_0_CH0) 200mV"
	AppendText "\\s(MT1_K09p100_ser01_LRS_350mV_1_Segm_0_CH0) 350mV\r\\s(MT1_K09p100_ser01_LRS_500mV_1_Segm_0_CH0) 500mV"
EndMacro



Window N03p50_ser06_PSD() : Graph
	PauseUpdate; Silent 1		// building window...
	Display /W=(56.25,72.5,654,413) 'MT1_N03p50_ser06_HRS_-500mV_1_Segm_0_CH0','MT1_N03p50_ser06_HRS_-500mV_2_Segm_0_CH0'
	AppendToGraph 'MT1_N03p50_ser06_HRS_-500mV_3_Segm_0_CH0','MT1_N03p50_ser06_HRS_-350mV_1_Segm_0_CH0'
	AppendToGraph 'MT1_N03p50_ser06_HRS_-350mV_2_Segm_0_CH0','MT1_N03p50_ser06_HRS_-200mV_1_Segm_0_CH0'
	AppendToGraph 'MT1_N03p50_ser06_HRS_-200mV_2_Segm_0_CH0','MT1_N03p50_ser06_HRS_-100mV_1_Segm_0_CH0'
	AppendToGraph 'MT1_N03p50_ser06_HRS_-100mV_2_Segm_0_CH0',MT1_N03p50_ser06_HRS_0mV_1_Segm_0_CH0
	AppendToGraph MT1_N03p50_ser06_HRS_0mV_2_Segm_0_CH0,MT1_N03p50_ser06_HRS_100mV_1_Segm_0_CH0
	AppendToGraph MT1_N03p50_ser06_HRS_100mV_2_Segm_0_CH0,MT1_N03p50_ser06_HRS_200mV_1_Segm_0_CH0
	AppendToGraph MT1_N03p50_ser06_HRS_200mV_2_Segm_0_CH0,MT1_N03p50_ser06_HRS_350mV_1_Segm_0_CH0
	AppendToGraph MT1_N03p50_ser06_HRS_350mV_2_Segm_0_CH0,MT1_N03p50_ser06_HRS_500mV_1_Segm_0_CH0
	AppendToGraph MT1_N03p50_ser06_HRS_500mV_2_Segm_0_CH0,MT1_N03p50_ser06_HRS_500mV_3_Segm_0_CH0
	ModifyGraph lSize=2
	ModifyGraph rgb('MT1_N03p50_ser06_HRS_-500mV_1_Segm_0_CH0')=(65535,21845,0),rgb('MT1_N03p50_ser06_HRS_-500mV_2_Segm_0_CH0')=(65535,21845,0)
	ModifyGraph rgb('MT1_N03p50_ser06_HRS_-500mV_3_Segm_0_CH0')=(65535,21845,0),rgb('MT1_N03p50_ser06_HRS_-350mV_1_Segm_0_CH0')=(65535,16385,16385)
	ModifyGraph rgb('MT1_N03p50_ser06_HRS_-350mV_2_Segm_0_CH0')=(65535,16385,16385)
	ModifyGraph rgb('MT1_N03p50_ser06_HRS_-200mV_1_Segm_0_CH0')=(52428,1,1),rgb('MT1_N03p50_ser06_HRS_-200mV_2_Segm_0_CH0')=(52428,1,1)
	ModifyGraph rgb('MT1_N03p50_ser06_HRS_-100mV_1_Segm_0_CH0')=(26214,0,0),rgb('MT1_N03p50_ser06_HRS_-100mV_2_Segm_0_CH0')=(26214,0,0)
	ModifyGraph rgb(MT1_N03p50_ser06_HRS_0mV_1_Segm_0_CH0)=(0,0,0),rgb(MT1_N03p50_ser06_HRS_0mV_2_Segm_0_CH0)=(0,0,0)
	ModifyGraph rgb(MT1_N03p50_ser06_HRS_100mV_1_Segm_0_CH0)=(26214,0,0),rgb(MT1_N03p50_ser06_HRS_100mV_2_Segm_0_CH0)=(26214,0,0)
	ModifyGraph rgb(MT1_N03p50_ser06_HRS_200mV_1_Segm_0_CH0)=(52428,1,1),rgb(MT1_N03p50_ser06_HRS_200mV_2_Segm_0_CH0)=(52428,1,1)
	ModifyGraph rgb(MT1_N03p50_ser06_HRS_350mV_1_Segm_0_CH0)=(65535,16385,16385),rgb(MT1_N03p50_ser06_HRS_350mV_2_Segm_0_CH0)=(65535,16385,16385)
	ModifyGraph rgb(MT1_N03p50_ser06_HRS_500mV_1_Segm_0_CH0)=(65535,21845,0),rgb(MT1_N03p50_ser06_HRS_500mV_2_Segm_0_CH0)=(65535,21845,0)
	ModifyGraph rgb(MT1_N03p50_ser06_HRS_500mV_3_Segm_0_CH0)=(65535,21845,0)
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "sqrt(S\\BI\\M) [A/sqrt(HZ)]"
	Label bottom "f [Hz]"
	SetAxis left 3e-13,1e-09
	Legend/C/N=text0/J/F=0/M/H={15,1,10}/A=MC/X=22.87/Y=20.62 "\\Z18\\s(MT1_N03p50_ser06_HRS_0mV_2_Segm_0_CH0) 0mV"
	AppendText "\\s(MT1_N03p50_ser06_HRS_100mV_1_Segm_0_CH0) 100mV\r\\s(MT1_N03p50_ser06_HRS_200mV_1_Segm_0_CH0) 200mV"
	AppendText "\\s(MT1_N03p50_ser06_HRS_350mV_1_Segm_0_CH0) 350mV\r\\s(MT1_N03p50_ser06_HRS_500mV_1_Segm_0_CH0) 500mV"
EndMacro


Window F08p50_ser01_PSD() : Graph
	PauseUpdate; Silent 1		// building window...
	Display /W=(206.25,190.25,804,530.75) 'MT1_F08p50_ser01_LRS_-500mV_1_Segm_0_CH0'
	AppendToGraph 'MT1_F08p50_ser01_LRS_-500mV_2_Segm_0_CH0'
	ModifyGraph lSize=2
	ModifyGraph rgb=(65535,21845,0)
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "sqrt(S\\BI\\M) [A/sqrt(HZ)]"
	Label bottom "f [Hz]"
	SetAxis left 3e-13,1e-09
	Legend/C/N=text0/J/F=0/M/H={15,1,10}/A=MC/X=22.87/Y=20.62 "\\Z18\\s('MT1_F08p50_ser01_LRS_-500mV_1_Segm_0_CH0') 500mV"
EndMacro


Window MT1_Avgs_dIpI_vs_R_All_polarity() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Saved_Results:
	Display /W=(92.25,102.5,686.25,554.75) MT1_HRSs_pos_SortedByResistance[*][13][0] vs MT1_HRSs_pos_SortedByResistance[*][2][0]
	AppendToGraph MT1_LRSs_pos_SortedByResistance[*][13][0] vs MT1_LRSs_pos_SortedByResistance[*][2][0]
	AppendToGraph MT1_HRSs_neg_SortedByResistance[*][13][0] vs MT1_HRSs_neg_SortedByResistance[*][2][0]
	AppendToGraph MT1_LRSs_neg_SortedByResistance[*][13][0] vs MT1_LRSs_neg_SortedByResistance[*][2][0]
	SetDataFolder fldrSav0
	ModifyGraph mode=3
	ModifyGraph marker=19
	ModifyGraph rgb(MT1_HRSs_pos_SortedByResistance)=(39321,1,1)
	ModifyGraph msize=5
	ModifyGraph mrkThick=1
	ModifyGraph zColor(MT1_HRSs_pos_SortedByResistance)={:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][29][0],10,20000,Red}
	ModifyGraph zColor(MT1_LRSs_pos_SortedByResistance)={:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][29][0],10,20000,Blue}
	ModifyGraph zColor(MT1_HRSs_neg_SortedByResistance)={:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][29][0],10,20000,Red}
	ModifyGraph zColor(MT1_LRSs_neg_SortedByResistance)={:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][29][0],10,20000,Blue}
	ModifyGraph logZColor=1
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=18
	ModifyGraph axThick=2
	Label left "ΔI/I"
	Label bottom "R [Ω]"
	SetAxis left 0.0002,0.006
	ErrorBars MT1_HRSs_pos_SortedByResistance XY,wave=(:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][2][1],:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][13][1],:Saved_Results:MT1_HRSs_pos_SortedByResistance[*][13][1])
	ErrorBars MT1_LRSs_pos_SortedByResistance XY,wave=(:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][2][1],:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][13][1],:Saved_Results:MT1_LRSs_pos_SortedByResistance[*][13][1])
	ErrorBars MT1_HRSs_neg_SortedByResistance XY,wave=(:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][2][1],:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][13][1],:Saved_Results:MT1_HRSs_neg_SortedByResistance[*][13][1])
	ErrorBars MT1_LRSs_neg_SortedByResistance XY,wave=(:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][2][1],:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][2][1]),wave=(:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][13][1],:Saved_Results:MT1_LRSs_neg_SortedByResistance[*][13][1])
	Cursor/P A MT1_HRSs_pos_SortedByResistance 8;Cursor/P B MT1_LRSs_pos_SortedByResistance 12
	ShowInfo
	TextBox/C/N=text0/F=0/M/H={15,1,10}/A=MC/X=37.25/Y=-43.29 "\\Z18\\f01\\K(1,4,52428)\\k(1,4,52428) LRS /\\K(65535,0,0) HRS"
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv gstart
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 590372.027380818,0.000280822895495607,59037202.738082,0.00280822895495606
	SetDrawEnv linethick= 2,fstyle= 1
	DrawText 0.512757040800816,0.0817914287296948,"m=1"
	SetDrawEnv linethick= 2,fstyle= 1
	DrawText 0.800727784653913,0.254090057002321,"m=0.5"
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 590372.027380818,0.00028,59037202.738082,0.000885438
	SetDrawEnv linethick= 2,fstyle= 1
	DrawText 0.817067653934959,0.573195748059231,"m=0.25"
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 3
	DrawLine 570393.552325241,0.000280634890986555,11860960.4413521,0.00583636083547873
	SetDrawEnv gstop
EndMacro

Window MT1_Neg_dIpI_vs_Area_POSTER() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_240515:
	Display /W=(381.75,86.75,975.75,539) MT1_Results_HRS_CNRLog[*][0],MT1_Results_LRS_CNRLog[*][0] vs MT1_Results_DevAreaLog
	AppendToGraph/R MT1_Results_HRS_ResLog[*][0],MT1_Results_LRS_ResLog[*][0] vs MT1_Results_DevAreaLog
	AppendToGraph/R fit_MT1_Results_HRS_ResLog_Neg,fit_MT1_Results_LRS_ResLog_Neg
	AppendToGraph fit_MT1_Results_LRS_CNRLog_Neg,fit_MT1_Results_HRS_CNRLog_Neg
	ModifyGraph userticks(left)={CNR_labels_values,CNR_labels}
	ModifyGraph userticks(bottom)={Area_labels_values,Area_labels}
	ModifyGraph userticks(right)={R_labels_values,R_labels}
	SetDataFolder fldrSav0
	ModifyGraph mode(MT1_Results_HRS_CNRLog)=3,mode(MT1_Results_LRS_CNRLog)=3,mode(MT1_Results_HRS_ResLog)=3
	ModifyGraph mode(MT1_Results_LRS_ResLog)=3
	ModifyGraph marker(MT1_Results_HRS_CNRLog)=19,marker(MT1_Results_LRS_CNRLog)=19
	ModifyGraph marker(MT1_Results_HRS_ResLog)=16,marker(MT1_Results_LRS_ResLog)=16
	ModifyGraph lSize(fit_MT1_Results_HRS_ResLog_Neg)=2,lSize(fit_MT1_Results_LRS_ResLog_Neg)=2
	ModifyGraph lSize(fit_MT1_Results_LRS_CNRLog_Neg)=2,lSize(fit_MT1_Results_HRS_CNRLog_Neg)=2
	ModifyGraph lStyle(fit_MT1_Results_HRS_ResLog_Neg)=3,lStyle(fit_MT1_Results_LRS_ResLog_Neg)=3
	ModifyGraph lStyle(fit_MT1_Results_LRS_CNRLog_Neg)=3,lStyle(fit_MT1_Results_HRS_CNRLog_Neg)=3
	ModifyGraph rgb(MT1_Results_HRS_CNRLog)=(52428,1,1),rgb(MT1_Results_LRS_CNRLog)=(0,0,65535)
	ModifyGraph rgb(MT1_Results_HRS_ResLog)=(65535,16385,16385),rgb(MT1_Results_LRS_ResLog)=(16385,28398,65535)
	ModifyGraph rgb(fit_MT1_Results_HRS_ResLog_Neg)=(65535,16385,16385),rgb(fit_MT1_Results_LRS_ResLog_Neg)=(16385,28398,65535)
	ModifyGraph rgb(fit_MT1_Results_LRS_CNRLog_Neg)=(0,0,65535),rgb(fit_MT1_Results_HRS_CNRLog_Neg)=(52428,1,1)
	ModifyGraph msize(MT1_Results_HRS_CNRLog)=5,msize(MT1_Results_LRS_CNRLog)=5,msize(MT1_Results_HRS_ResLog)=5
	ModifyGraph msize(MT1_Results_LRS_ResLog)=5
	ModifyGraph mrkThick(MT1_Results_HRS_CNRLog)=1,mrkThick(MT1_Results_LRS_CNRLog)=1
	ModifyGraph mrkThick(MT1_Results_HRS_ResLog)=1,mrkThick(MT1_Results_LRS_ResLog)=1
	ModifyGraph tick=2
	ModifyGraph mirror(bottom)=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	Label left "∆I/I"
	Label bottom "Area [μm\\S2\\M]"
	Label right "R [Ω]"
	SetAxis left -3.5,-1.5
	SetAxis bottom 2.5,4.1
	SetAxis right 4,8
	ErrorBars MT1_Results_HRS_CNRLog Y,wave=(:Evaluation_240515:MT1_Results_HRS_CNRLog[*][0][1],:Evaluation_240515:MT1_Results_HRS_CNRLog[*][0][1])
	ErrorBars MT1_Results_LRS_CNRLog Y,wave=(:Evaluation_240515:MT1_Results_LRS_CNRLog[*][0][1],:Evaluation_240515:MT1_Results_LRS_CNRLog[*][0][1])
	ErrorBars MT1_Results_HRS_ResLog Y,wave=(:Evaluation_240515:MT1_Results_HRS_ResLog[*][0][1],:Evaluation_240515:MT1_Results_HRS_ResLog[*][0][1])
	ErrorBars MT1_Results_LRS_ResLog Y,wave=(:Evaluation_240515:MT1_Results_LRS_ResLog[*][0][1],:Evaluation_240515:MT1_Results_LRS_ResLog[*][0][1])
	Cursor/P A MT1_Results_LRS_CNRLog 0;Cursor/P B MT1_Results_LRS_CNRLog 2
	ShowInfo
	Legend/C/N=text0/J/F=0/M/H={15,1,10}/A=MC/X=30.24/Y=38.24 "\\Z18\\s(MT1_Results_HRS_ResLog) \\s(MT1_Results_LRS_ResLog)  R - HRS/LRS"
	AppendText "\n\\s(MT1_Results_HRS_CNRLog) \\s(MT1_Results_LRS_CNRLog)  ∆I/I - HRS/LRS"
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv linethick= 6,arrow= 1,arrowlen= 15,arrowfat= 0.7
	DrawLine 0.732248520710059,0.239234449760766,0.892011834319527,0.239234449760766
	SetDrawEnv linethick= 6,arrow= 2,arrowlen= 15,arrowfat= 0.7
	DrawLine 0.0813609467455621,0.633971291866029,0.24112426035503,0.633971291866029
	SetDrawEnv fstyle= 1,textrgb= (65535,16385,16385)
	DrawText 0.209417596034697,0.120098039215686,"m = -1.03"
	SetDrawEnv fstyle= 1,textrgb= (16385,28398,65535)
	DrawText 0.208178438661711,0.247549019607843,"m = -1.02"
	SetDrawEnv fstyle= 1,textrgb= (52428,1,1)
	DrawText 0.874845105328377,0.715686274509803,"m = 0"
	SetDrawEnv fstyle= 1,textrgb= (0,0,65535)
	DrawText 0.869888475836432,0.914215686274509,"m = -0.24"
EndMacro

Window MT1_LRS_Neg_dIpI_vs_Area_POSTER() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_240515:
	Display /W=(78.75,65,672.75,517.25) MT1_Results_LRS_CNRLog[*][0] vs MT1_Results_DevAreaLog
	AppendToGraph fit_MT1_Results_LRS_CNRLog_Neg_fixed_slope,fit_MT1_Results_LRS_CNRLog_Neg
	ModifyGraph userticks(left)={CNR_labels_values,CNR_labels}
	ModifyGraph userticks(bottom)={Area_labels_values,Area_labels}
	SetDataFolder fldrSav0
	ModifyGraph margin(left)=85,margin(bottom)=79,margin(top)=14,margin(right)=14
	ModifyGraph mode(MT1_Results_LRS_CNRLog)=3
	ModifyGraph marker(MT1_Results_LRS_CNRLog)=19
	ModifyGraph lSize(fit_MT1_Results_LRS_CNRLog_Neg_fixed_slope)=3,lSize(fit_MT1_Results_LRS_CNRLog_Neg)=3
	ModifyGraph lStyle(fit_MT1_Results_LRS_CNRLog_Neg_fixed_slope)=3
	ModifyGraph rgb(MT1_Results_LRS_CNRLog)=(0,0,65535),rgb(fit_MT1_Results_LRS_CNRLog_Neg_fixed_slope)=(0,0,0)
	ModifyGraph rgb(fit_MT1_Results_LRS_CNRLog_Neg)=(0,0,65535)
	ModifyGraph msize(MT1_Results_LRS_CNRLog)=5
	ModifyGraph mrkThick(MT1_Results_LRS_CNRLog)=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=26
	ModifyGraph axThick=3
	Label left "∆I/I"
	Label bottom "Area [μm\\S2\\M]"
	SetAxis left -3.7,-2.5
	SetAxis bottom 2.5,4.1
	ErrorBars MT1_Results_LRS_CNRLog Y,wave=(:Evaluation_240515:MT1_Results_LRS_CNRLog[*][0][1],:Evaluation_240515:MT1_Results_LRS_CNRLog[*][0][1])
	Cursor/P A MT1_Results_LRS_CNRLog 0;Cursor/P B MT1_Results_LRS_CNRLog 2
	ShowInfo
	Legend/C/N=text0/J/F=0/M/H={15,1,10}/X=2.00/Y=1.00 "\\Z22\\s(MT1_Results_LRS_CNRLog)  ∆I/I - LRS\r\\s(fit_MT1_Results_LRS_CNRLog_Neg) best fitting"
	AppendText "\n\\s(fit_MT1_Results_LRS_CNRLog_Neg_fixed_slope) best fitting (fixed -0.5 theoretical slope)\r"
	ShowTools/A
EndMacro

Window MT1_HRS_Neg_dIpI_vs_Area_POSTER() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Evaluation_240515:
	Display /W=(629.25,64.25,1223.25,516.5)/R MT1_Results_HRS_CNRLog[*][0] vs MT1_Results_DevAreaLog
	AppendToGraph/R fit_MT1_Results_HRS_CNRLog_Neg,fit_MT1_Results_HRS_CNRLog_Neg_fixed_slope
	ModifyGraph userticks(right)={CNR_labels_values,CNR_labels}
	ModifyGraph userticks(bottom)={Area_labels_values,Area_labels}
	SetDataFolder fldrSav0
	ModifyGraph margin(left)=14,margin(bottom)=79,margin(top)=14,margin(right)=85
	ModifyGraph mode(MT1_Results_HRS_CNRLog)=3
	ModifyGraph marker(MT1_Results_HRS_CNRLog)=19
	ModifyGraph lSize(fit_MT1_Results_HRS_CNRLog_Neg)=3,lSize(fit_MT1_Results_HRS_CNRLog_Neg_fixed_slope)=3
	ModifyGraph lStyle(fit_MT1_Results_HRS_CNRLog_Neg_fixed_slope)=3
	ModifyGraph rgb(MT1_Results_HRS_CNRLog)=(52428,1,1),rgb(fit_MT1_Results_HRS_CNRLog_Neg)=(52428,1,1)
	ModifyGraph rgb(fit_MT1_Results_HRS_CNRLog_Neg_fixed_slope)=(0,0,0)
	ModifyGraph msize(MT1_Results_HRS_CNRLog)=5
	ModifyGraph mrkThick(MT1_Results_HRS_CNRLog)=1
	ModifyGraph tick=2
	ModifyGraph mirror=1
	ModifyGraph fSize=26
	ModifyGraph axThick=3
	Label right "∆I/I"
	Label bottom "Area [μm\\S2\\M]"
	SetAxis right -3.7,-2.5
	SetAxis bottom 2.5,4.1
	ErrorBars MT1_Results_HRS_CNRLog Y,wave=(:Evaluation_240515:MT1_Results_HRS_CNRLog[*][0][1],:Evaluation_240515:MT1_Results_HRS_CNRLog[*][0][1])
	Cursor/P A MT1_Results_HRS_CNRLog 0
	ShowInfo
	Legend/C/N=text0/J/F=0/M/H={15,1,10}/A=RB/X=2.00/Y=1.00 "\\Z22\\s(MT1_Results_HRS_CNRLog) ∆I/I - HRS\r\\s(fit_MT1_Results_HRS_CNRLog_Neg) best fitting"
	AppendText "\n\\s(fit_MT1_Results_HRS_CNRLog_Neg_fixed_slope) best fitting (fixed -0.5 theoretical slope)\r"
	ShowTools/A
EndMacro

Window DEMO_Nonlin_M03p50_ser13_HRS_pos() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Saved_Results:
	Display /W=(107.25,123.5,627.75,547.25) MT1_M03p50_ser13_HRS_data[*][12][0] vs MT1_M03p50_ser13_HRS_data[*][0][0] as "DEMO_Nonlin_M03p50_ser13_HRS_pos"
	AppendToGraph/R MT1_M03p50_ser13_HRS_data[*][2][0] vs MT1_M03p50_ser13_HRS_data[*][0][0]
	SetDataFolder fldrSav0
	ModifyGraph width=340.157,height=340.157
	ModifyGraph mode=3
	ModifyGraph marker=8
	ModifyGraph rgb(MT1_M03p50_ser13_HRS_data)=(0,0,0)
	ModifyGraph msize=5
	ModifyGraph mrkThick=2
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror(bottom)=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	ModifyGraph axRGB(right)=(65535,0,0)
	ModifyGraph tlblRGB(right)=(65535,0,0)
	ModifyGraph alblRGB(right)=(65535,0,0)
	Label left "∆I/I"
	Label bottom "V [mV]"
	Label right "R [Ω]"
	SetAxis left 0.0002,0.08
	SetAxis right 20000,8000000
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 8
	DrawLine 100.508465654599,0.00234941202851223,1005.08465654599,0.000234941202851223
	SetDrawEnv fsize= 14,fstyle= 1
	DrawText 0.594713656387665,0.0660792951541855,"M03p50 positive V"
	SetDrawEnv fstyle= 1
	DrawText 0.0374449339207052,0.759911894273127,"guide line ~1/V"
EndMacro

Window DEMO_Nonlin_M03p50_ser13_HRS_neg() : Graph
	PauseUpdate; Silent 1		// building window...
	String fldrSav0= GetDataFolder(1)
	SetDataFolder root:Saved_Results:
	Display /W=(107.25,123.5,627.75,547.25) MT1_M03p50_ser13_HRS_data[*][12][0] vs MT1_M03p50_ser13_HRS_data[*][29][0] as "DEMO_Nonlin_M03p50_ser13_HRS_neg"
	AppendToGraph/R MT1_M03p50_ser13_HRS_data[*][2][0] vs MT1_M03p50_ser13_HRS_data[*][29][0]
	SetDataFolder fldrSav0
	ModifyGraph width=340.157,height=340.157
	ModifyGraph mode=3
	ModifyGraph marker=8
	ModifyGraph rgb(MT1_M03p50_ser13_HRS_data)=(0,0,0)
	ModifyGraph msize=5
	ModifyGraph mrkThick=2
	ModifyGraph log=1
	ModifyGraph tick=2
	ModifyGraph mirror(bottom)=1
	ModifyGraph fSize=18
	ModifyGraph axThick=3
	ModifyGraph axRGB(right)=(65535,0,0)
	ModifyGraph tlblRGB(right)=(65535,0,0)
	ModifyGraph alblRGB(right)=(65535,0,0)
	Label left "∆I/I"
	Label bottom "V [mV]"
	Label right "R [Ω]"
	SetAxis left 0.0002,0.08
	SetAxis right 20000,8000000
	ShowTools/A
	SetDrawLayer UserFront
	SetDrawEnv xcoord= bottom,ycoord= left,linethick= 2,dash= 8
	DrawLine 100.508465654599,0.00234941202851223,1005.08465654599,0.000234941202851223
	SetDrawEnv fsize= 14,fstyle= 1
	DrawText 0.594713656387665,0.0660792951541855,"M03p50 negative V"
	SetDrawEnv fstyle= 1
	DrawText 0.0374449339207052,0.759911894273127,"guide line ~1/V"
EndMacro
